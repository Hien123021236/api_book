(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Axe = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function Agent() {
  this._defaults = [];
}

['use', 'on', 'once', 'set', 'query', 'type', 'accept', 'auth', 'withCredentials', 'sortQuery', 'retry', 'ok', 'redirects', 'timeout', 'buffer', 'serialize', 'parse', 'ca', 'key', 'pfx', 'cert'].forEach(function (fn) {
  // Default setting for all requests from this agent
  Agent.prototype[fn] = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this._defaults.push({
      fn: fn,
      args: args
    });

    return this;
  };
});

Agent.prototype._setDefaults = function (req) {
  this._defaults.forEach(function (def) {
    req[def.fn].apply(req, _toConsumableArray(def.args));
  });
};

module.exports = Agent;
},{}],2:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Root reference for iframes.
 */
var root;

if (typeof window !== 'undefined') {
  // Browser window
  root = window;
} else if (typeof self !== 'undefined') {
  // Web Worker
  root = self;
} else {
  // Other environments
  console.warn('Using browser-only version of superagent in non-browser environment');
  root = void 0;
}

var Emitter = require('component-emitter');

var RequestBase = require('./request-base');

var isObject = require('./is-object');

var ResponseBase = require('./response-base');

var Agent = require('./agent-base');
/**
 * Noop.
 */


function noop() {}
/**
 * Expose `request`.
 */


var request = exports = module.exports = function (method, url) {
  // callback
  if (typeof url === 'function') {
    return new exports.Request('GET', method).end(url);
  } // url first


  if (arguments.length == 1) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
};

exports.Request = Request;
/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest && (!root.location || root.location.protocol != 'file:' || !root.ActiveXObject)) {
    return new XMLHttpRequest();
  }

  try {
    return new ActiveXObject('Microsoft.XMLHTTP');
  } catch (e) {}

  try {
    return new ActiveXObject('Msxml2.XMLHTTP.6.0');
  } catch (e) {}

  try {
    return new ActiveXObject('Msxml2.XMLHTTP.3.0');
  } catch (e) {}

  try {
    return new ActiveXObject('Msxml2.XMLHTTP');
  } catch (e) {}

  throw new Error('Browser-only version of superagent could not find XHR');
};
/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */


var trim = ''.trim ? function (s) {
  return s.trim();
} : function (s) {
  return s.replace(/(^\s*|\s*$)/g, '');
};
/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];

  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }

  return pairs.join('&');
}
/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */


function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function (v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for (var subkey in val) {
        pushEncodedKeyValuePair(pairs, "".concat(key, "[").concat(subkey, "]"), val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}
/**
 * Expose serialization method.
 */


request.serializeObject = serialize;
/**
 * Parse the given x-www-form-urlencoded `str`.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');

    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}
/**
 * Expose parser.
 */


request.parseString = parseString;
/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  form: 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};
/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

request.serialize = {
  'application/x-www-form-urlencoded': serialize,
  'application/json': JSON.stringify
};
/**
 * Default parsers.
 *
 *     superagent.parse['application/xml'] = function(str){
 *       return { object parsed from str };
 *     };
 *
 */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};
/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');

    if (index === -1) {
      // could be empty line, just skip it
      continue;
    }

    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}
/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */


function isJSON(mime) {
  // should match /json or +json
  // but not /json-seq
  return /[\/+]json($|[^-\w])/.test(mime);
}
/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */


function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr; // responseText is accessible only if responseType is '' or 'text' and on older browsers

  this.text = this.req.method != 'HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text') || typeof this.xhr.responseType === 'undefined' ? this.xhr.responseText : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status; // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request

  if (status === 1223) {
    status = 204;
  }

  this._setStatusProperties(status);

  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders()); // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.

  this.header['content-type'] = this.xhr.getResponseHeader('content-type');

  this._setHeaderProperties(this.header);

  if (this.text === null && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD' ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
  }
}

ResponseBase(Response.prototype);
/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function (str) {
  var parse = request.parse[this.type];

  if (this.req._parser) {
    return this.req._parser(this, str);
  }

  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }

  return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
};
/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */


Response.prototype.toError = function () {
  var req = this.req;
  var method = req.method;
  var url = req.url;
  var msg = "cannot ".concat(method, " ").concat(url, " (").concat(this.status, ")");
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;
  return err;
};
/**
 * Expose `Response`.
 */


request.Response = Response;
/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case

  this._header = {}; // coerces header names to lowercase

  this.on('end', function () {
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch (e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e; // issue #675: return the raw response if the response parsing fails

      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType === 'undefined' ? self.xhr.responseText : self.xhr.response; // issue #876: return the http status code if the response parsing fails

        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);
    var new_err;

    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
      }
    } catch (custom_err) {
      new_err = custom_err; // ok() callback can throw
    } // #1000 don't catch errors from the callback to avoid double calling it


    if (new_err) {
      new_err.original = err;
      new_err.response = res;
      new_err.status = res.status;
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}
/**
 * Mixin `Emitter` and `RequestBase`.
 */


Emitter(Request.prototype);
RequestBase(Request.prototype);
/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function (type) {
  this.set('Content-Type', request.types[type] || type);
  return this;
};
/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */


Request.prototype.accept = function (type) {
  this.set('Accept', request.types[type] || type);
  return this;
};
/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */


Request.prototype.auth = function (user, pass, options) {
  if (arguments.length === 1) pass = '';

  if (_typeof(pass) === 'object' && pass !== null) {
    // pass is optional and can be replaced with options
    options = pass;
    pass = '';
  }

  if (!options) {
    options = {
      type: typeof btoa === 'function' ? 'basic' : 'auto'
    };
  }

  var encoder = function encoder(string) {
    if (typeof btoa === 'function') {
      return btoa(string);
    }

    throw new Error('Cannot use basic auth, btoa is not a function');
  };

  return this._auth(user, pass, options, encoder);
};
/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */


Request.prototype.query = function (val) {
  if (typeof val !== 'string') val = serialize(val);
  if (val) this._query.push(val);
  return this;
};
/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */


Request.prototype.attach = function (field, file, options) {
  if (file) {
    if (this._data) {
      throw new Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }

  return this;
};

Request.prototype._getFormData = function () {
  if (!this._formData) {
    this._formData = new root.FormData();
  }

  return this._formData;
};
/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */


Request.prototype.callback = function (err, res) {
  if (this._shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};
/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */


Request.prototype.crossDomainError = function () {
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;
  err.status = this.status;
  err.method = this.method;
  err.url = this.url;
  this.callback(err);
}; // This only warns, because the request is still likely to work


Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function () {
  console.warn('This is not supported in browser version of superagent');
  return this;
}; // This throws, because it can't send/receive data as expected


Request.prototype.pipe = Request.prototype.write = function () {
  throw new Error('Streaming is not supported in browser version of superagent');
};
/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */


Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && _typeof(obj) === 'object' && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
};
/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */


Request.prototype.end = function (fn) {
  if (this._endCalled) {
    console.warn('Warning: .end() was called twice. This is not supported in superagent');
  }

  this._endCalled = true; // store callback

  this._callback = fn || noop; // querystring

  this._finalizeQueryString();

  this._end();
};

Request.prototype._end = function () {
  if (this._aborted) return this.callback(new Error('The request has been aborted even before .end() was called'));
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var data = this._formData || this._data;

  this._setTimeouts(); // state change


  xhr.onreadystatechange = function () {
    var readyState = xhr.readyState;

    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }

    if (readyState != 4) {
      return;
    } // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"


    var status;

    try {
      status = xhr.status;
    } catch (e) {
      status = 0;
    }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }

    self.emit('end');
  }; // progress


  var handleProgress = function handleProgress(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }

    e.direction = direction;
    self.emit('progress', e);
  };

  if (this.hasListeners('progress')) {
    try {
      xhr.addEventListener('progress', handleProgress.bind(null, 'download'));

      if (xhr.upload) {
        xhr.upload.addEventListener('progress', handleProgress.bind(null, 'upload'));
      }
    } catch (e) {// Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  } // initiate request


  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  } // CORS


  if (this._withCredentials) xhr.withCredentials = true; // body

  if (!this._formData && this.method != 'GET' && this.method != 'HEAD' && typeof data !== 'string' && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];

    var _serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];

    if (!_serialize && isJSON(contentType)) {
      _serialize = request.serialize['application/json'];
    }

    if (_serialize) data = _serialize(data);
  } // set header fields


  for (var field in this.header) {
    if (this.header[field] == null) continue;
    if (this.header.hasOwnProperty(field)) xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  } // send stuff


  this.emit('request', this); // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined

  xhr.send(typeof data !== 'undefined' ? data : null);
};

request.agent = function () {
  return new Agent();
};

['GET', 'POST', 'OPTIONS', 'PATCH', 'PUT', 'DELETE'].forEach(function (method) {
  Agent.prototype[method.toLowerCase()] = function (url, fn) {
    var req = new request.Request(method, url);

    this._setDefaults(req);

    if (fn) {
      req.end(fn);
    }

    return req;
  };
});
Agent.prototype.del = Agent.prototype.delete;
/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function (url, data, fn) {
  var req = request('GET', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};
/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */


request.head = function (url, data, fn) {
  var req = request('HEAD', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};
/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */


request.options = function (url, data, fn) {
  var req = request('OPTIONS', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};
/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */


function del(url, data, fn) {
  var req = request('DELETE', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
}

request.del = del;
request.delete = del;
/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function (url, data, fn) {
  var req = request('PATCH', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};
/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */


request.post = function (url, data, fn) {
  var req = request('POST', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};
/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */


request.put = function (url, data, fn) {
  var req = request('PUT', url);
  if (typeof data === 'function') fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};
},{"./agent-base":1,"./is-object":3,"./request-base":4,"./response-base":5,"component-emitter":43}],3:[function(require,module,exports){
'use strict';
/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}

module.exports = isObject;
},{}],4:[function(require,module,exports){
'use strict';
/**
 * Module of mixed-in functions shared between node and client code
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isObject = require('./is-object');
/**
 * Expose `RequestBase`.
 */


module.exports = RequestBase;
/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}
/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */


function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }

  return obj;
}
/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.clearTimeout = function _clearTimeout() {
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};
/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */


RequestBase.prototype.parse = function parse(fn) {
  this._parser = fn;
  return this;
};
/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.responseType = function (val) {
  this._responseType = val;
  return this;
};
/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */


RequestBase.prototype.serialize = function serialize(fn) {
  this._serializer = fn;
  return this;
};
/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.timeout = function timeout(options) {
  if (!options || _typeof(options) !== 'object') {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for (var option in options) {
    switch (option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;

      case 'response':
        this._responseTimeout = options.response;
        break;

      default:
        console.warn('Unknown timeout option', option);
    }
  }

  return this;
};
/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @param {Function} [fn]
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.retry = function retry(count, fn) {
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  this._retryCallback = fn;
  return this;
};

var ERROR_CODES = ['ECONNRESET', 'ETIMEDOUT', 'EADDRINFO', 'ESOCKETTIMEDOUT'];
/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */

RequestBase.prototype._shouldRetry = function (err, res) {
  if (!this._maxRetries || this._retries++ >= this._maxRetries) {
    return false;
  }

  if (this._retryCallback) {
    try {
      var override = this._retryCallback(err, res);

      if (override === true) return true;
      if (override === false) return false; // undefined falls back to defaults
    } catch (e) {
      console.error(e);
    }
  }

  if (res && res.status && res.status >= 500 && res.status != 501) return true;

  if (err) {
    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true; // Superagent timeout

    if (err.timeout && err.code == 'ECONNABORTED') return true;
    if (err.crossDomain) return true;
  }

  return false;
};
/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */


RequestBase.prototype._retry = function () {
  this.clearTimeout(); // node

  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;
  return this._end();
};
/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */


RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;

    if (this._endCalled) {
      console.warn('Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises');
    }

    this._fullfilledPromise = new Promise(function (innerResolve, innerReject) {
      self.on('error', innerReject);
      self.end(function (err, res) {
        if (err) innerReject(err);else innerResolve(res);
      });
    });
  }

  return this._fullfilledPromise.then(resolve, reject);
};

RequestBase.prototype.catch = function (cb) {
  return this.then(undefined, cb);
};
/**
 * Allow for extension
 */


RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
};

RequestBase.prototype.ok = function (cb) {
  if (typeof cb !== 'function') throw new Error('Callback required');
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function (res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};
/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */


RequestBase.prototype.get = function (field) {
  return this._header[field.toLowerCase()];
};
/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */


RequestBase.prototype.getHeader = RequestBase.prototype.get;
/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function (field, val) {
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }

    return this;
  }

  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};
/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */


RequestBase.prototype.unset = function (field) {
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};
/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.field = function (name, val) {
  // name should be either a string or an object.
  if (name === null || undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }

    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }

    return this;
  } // val should be defined now


  if (val === null || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }

  if (typeof val === 'boolean') {
    val = String(val);
  }

  this._getFormData().append(name, val);

  return this;
};
/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */


RequestBase.prototype.abort = function () {
  if (this._aborted) {
    return this;
  }

  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser

  this.req && this.req.abort(); // node

  this.clearTimeout();
  this.emit('abort');
  return this;
};

RequestBase.prototype._auth = function (user, pass, options, base64Encoder) {
  switch (options.type) {
    case 'basic':
      this.set('Authorization', "Basic ".concat(base64Encoder("".concat(user, ":").concat(pass))));
      break;

    case 'auto':
      this.username = user;
      this.password = pass;
      break;

    case 'bearer':
      // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', "Bearer ".concat(user));
      break;
  }

  return this;
};
/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */


RequestBase.prototype.withCredentials = function (on) {
  // This is browser-only functionality. Node side is no-op.
  if (on == undefined) on = true;
  this._withCredentials = on;
  return this;
};
/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.redirects = function (n) {
  this._maxRedirects = n;
  return this;
};
/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */


RequestBase.prototype.maxResponseSize = function (n) {
  if (typeof n !== 'number') {
    throw new TypeError('Invalid argument');
  }

  this._maxResponseSize = n;
  return this;
};
/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */


RequestBase.prototype.toJSON = function () {
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};
/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.send = function (data) {
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw new Error("Can't merge these send calls");
  } // merge


  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if (typeof data === 'string') {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];

    if (type == 'application/x-www-form-urlencoded') {
      this._data = this._data ? "".concat(this._data, "&").concat(data) : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  } // default to json


  if (!type) this.type('json');
  return this;
};
/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.sortQuery = function (sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};
/**
 * Compose querystring to append to req.url
 *
 * @api private
 */


RequestBase.prototype._finalizeQueryString = function () {
  var query = this._query.join('&');

  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }

  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');

    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');

      if (typeof this._sort === 'function') {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }

      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
}; // For backwards compat only


RequestBase.prototype._appendQueryString = function () {
  console.trace('Unsupported');
};
/**
 * Invoke callback with timeout error.
 *
 * @api private
 */


RequestBase.prototype._timeoutError = function (reason, timeout, errno) {
  if (this._aborted) {
    return;
  }

  var err = new Error("".concat(reason + timeout, "ms exceeded"));
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function () {
  var self = this; // deadline

  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function () {
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  } // response timeout


  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function () {
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
};
},{"./is-object":3}],5:[function(require,module,exports){
'use strict';
/**
 * Module dependencies.
 */

var utils = require('./utils');
/**
 * Expose `ResponseBase`.
 */


module.exports = ResponseBase;
/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}
/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */


function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }

  return obj;
}
/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */


ResponseBase.prototype.get = function (field) {
  return this.header[field.toLowerCase()];
};
/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */


ResponseBase.prototype._setHeaderProperties = function (header) {
  // TODO: moar!
  // TODO: make this a util
  // content-type
  var ct = header['content-type'] || '';
  this.type = utils.type(ct); // params

  var params = utils.params(ct);

  for (var key in params) {
    this[key] = params[key];
  }

  this.links = {}; // links

  try {
    if (header.link) {
      this.links = utils.parseLinks(header.link);
    }
  } catch (err) {// ignore
  }
};
/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */


ResponseBase.prototype._setStatusProperties = function (status) {
  var type = status / 100 | 0; // status / class

  this.status = this.statusCode = status;
  this.statusType = type; // basics

  this.info = type == 1;
  this.ok = type == 2;
  this.redirect = type == 3;
  this.clientError = type == 4;
  this.serverError = type == 5;
  this.error = type == 4 || type == 5 ? this.toError() : false; // sugar

  this.created = status == 201;
  this.accepted = status == 202;
  this.noContent = status == 204;
  this.badRequest = status == 400;
  this.unauthorized = status == 401;
  this.notAcceptable = status == 406;
  this.forbidden = status == 403;
  this.notFound = status == 404;
  this.unprocessableEntity = status == 422;
};
},{"./utils":6}],6:[function(require,module,exports){
'use strict';
/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function (str) {
  return str.split(/ *; */).shift();
};
/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */


exports.params = function (str) {
  return str.split(/ *; */).reduce(function (obj, str) {
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();
    if (key && val) obj[key] = val;
    return obj;
  }, {});
};
/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */


exports.parseLinks = function (str) {
  return str.split(/ *, */).reduce(function (obj, str) {
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};
/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */


exports.cleanHeader = function (header, changesOrigin) {
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header.host; // secuirty

  if (changesOrigin) {
    delete header.authorization;
    delete header.cookie;
  }

  return header;
};
},{}],7:[function(require,module,exports){
/**
 * @file Creates an array with all elements that pass the test by the provided function.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-filter-x
 */

'use strict';

var toObject = require('to-object-x');
var assertIsFunction = require('assert-is-function-x');
var some = require('array-some-x');

var $filter = function filter(array, callBack /* , thisArg */) {
  var object = toObject(array);
  // If no callback function or if callback is not a callable function
  assertIsFunction(callBack);
  var result = [];
  var wrapped = function _wrapped(item, idx, obj) {
    // eslint-disable-next-line no-invalid-this
    if (callBack.call(this, item, idx, obj)) {
      result[result.length] = item;
    }
  };

  var args = [object, wrapped];
  if (arguments.length > 2) {
    args[2] = arguments[2];
  }

  some.apply(void 0, args);
  return result;
};

/**
 * This method creates a new array with all elements that pass the test
 * implemented by the provided function.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function is a predicate, to test each element.
 * @param {*} [thisArg] - Value to use as this when executing callback.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @returns {array} A new array with the elements that pass the test.
 * @example
 * var filter = require('array-filter-x');
 *
 * function isBigEnough(value) {
 *   return value >= 10;
 * }
 *
 * var filtered = filter([12, 5, 8, 130, 44], isBigEnough);
 * // filtered is [12, 130, 44]
 */
module.exports = $filter;

},{"array-some-x":25,"assert-is-function-x":30,"to-object-x":344}],8:[function(require,module,exports){
/**
 * @file Executes a provided function once for each array element.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-for-each-x
 */

'use strict';

var toObject = require('to-object-x');
var assertIsFunction = require('assert-is-function-x');
var some = require('array-some-x');

var $forEach = function forEach(array, callBack /* , thisArg */) {
  var object = toObject(array);
  // If no callback function or if callback is not a callable function
  assertIsFunction(callBack);
  var wrapped = function _wrapped(item, idx, obj) {
    // eslint-disable-next-line no-invalid-this
    callBack.call(this, item, idx, obj);
  };

  var args = [object, wrapped];
  if (arguments.length > 2) {
    args[2] = arguments[2];
  }

  some.apply(void 0, args);
};

/**
 * This method executes a provided function once for each array element.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function to execute for each element.
 * @param {*} [thisArg] - Value to use as this when executing callback.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @example
 * var forEach = require('array-for-each-x');
 *
 * var items = ['item1', 'item2', 'item3'];
 * var copy = [];
 *
 * forEach(items, function(item){
 *   copy.push(item)
 * });
 */
module.exports = $forEach;

},{"array-some-x":25,"assert-is-function-x":30,"to-object-x":344}],9:[function(require,module,exports){
/**
 * @file Determines whether an array includes a certain element.
 * @version 1.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-includes-x
 */

'use strict';

var toObject = require('to-object-x');
var nativeIncludes = Array.prototype.includes;
var $includes;

if (nativeIncludes) {
  var arr = {
    1: 'a',
    2: NaN,
    3: -0,
    length: 5
  };

  try {
    if (nativeIncludes.call(arr, void 0, -1) && nativeIncludes.call(arr, NaN) && nativeIncludes.call('abc', 'c')) {
      $includes = function includes(array, searchElement) {
        var object = toObject(array);
        var args = [searchElement];
        if (arguments.length > 2) {
          args[1] = arguments[2];
        }

        return nativeIncludes.apply(object, args);
      };
    }
  } catch (ignore) {}
}

if (Boolean($includes) === false) {
  var isString = require('is-string');
  var isUndefined = require('validate.io-undefined');
  var toLength = require('to-length-x');
  var sameValueZero = require('same-value-zero-x');
  var findIndex = require('find-index-x');
  var splitString = require('has-boxed-string-x') === false;
  var indexOf = require('index-of-x');
  var calcFromIndex = require('calculate-from-index-x');

  /*
   * This method returns an index in the array, if an element in the array
   * satisfies the provided testing function. Otherwise -1 is returned.
   *
   * @private
   * @param {Array} object - The array to search.
   * @param {*} searchElement - Element to locate in the array.
   * @param {number} fromIndex - The index to start the search at.
   * @returns {number} Returns index of found element, otherwise -1.
   */
  var findIdxFrom = function findIndexFrom(object, searchElement, fromIndex) {
    var fIdx = fromIndex;
    var length = toLength(object.length);
    while (fIdx < length) {
      if (sameValueZero(object[fIdx], searchElement)) {
        return fIdx;
      }

      fIdx += 1;
    }

    return -1;
  };

  $includes = function includes(array, searchElement) {
    var object = toObject(array);
    var iterable = splitString && isString(object) ? object.split('') : object;
    var length = toLength(iterable.length);
    if (length < 1) {
      return -1;
    }

    if (isUndefined(searchElement)) {
      var fromIndex = calcFromIndex(iterable, arguments[2]);
      if (fromIndex >= length) {
        return -1;
      }

      if (fromIndex < 0) {
        fromIndex = 0;
      }

      if (fromIndex > 0) {
        return findIdxFrom(iterable, searchElement, fromIndex) > -1;
      }

      return findIndex(iterable, function (element) {
        return sameValueZero(searchElement, element);
      }) > -1;
    }

    return indexOf(iterable, searchElement, arguments[2], 'samevaluezero') > -1;
  };
}

/**
 * This method determines whether an array includes a certain element,
 * returning true or false as appropriate.
 *
 * @param {Array} array - The array to search.
 * @throws {TypeError} If `array` is `null` or `undefined`.
 * @param {*} searchElement - Element to locate in the `array`.
 * @param {number} [fromIndex] - The position in this array at which to begin
 *  searching for searchElement. A negative value searches from the index of
 *  array.length + fromIndex by asc. Defaults to 0.
 * @returns {boolean} `true` if searched element is included; otherwise `false`.
 * @example
 * var includes = require('array-includes-x');
 *
 * var subject = [2, 3, undefined, true, 'hej', null, 2, false, 0, -0, NaN];
 * includes(subject, undefined); // true
 * includes(subject, undefined, 3); // false
 * includes(subject, NaN); // true
 * includes(subject, 10); // false
 *
 */
module.exports = $includes;

},{"calculate-from-index-x":36,"find-index-x":53,"has-boxed-string-x":69,"index-of-x":77,"is-string":134,"same-value-zero-x":333,"to-length-x":13,"to-object-x":344,"validate.io-undefined":356}],10:[function(require,module,exports){
/**
 * @file ES6-compliant shim for Number.isFinite.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-number.isfinite|20.1.2.2 Number.isFinite ( number )}
 * @version 1.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-finite-x
 */

'use strict';

var $isNaN = require('is-nan');

var $isFinite;
if (typeof Number.isFinite === 'function') {
  var MAX_SAFE_INTEGER = require('max-safe-integer');
  try {
    if (Number.isFinite(MAX_SAFE_INTEGER) && Number.isFinite(Infinity) === false) {
      $isFinite = Number.isFinite;
    }
  } catch (ignore) {}
}

/**
 * This method determines whether the passed value is a finite number.
 *
 * @param {*} number - The value to be tested for finiteness.
 * @returns {boolean} A Boolean indicating whether or not the given value is a finite number.
 * @example
 * var numIsFinite = require('is-finite-x');
 *
 * numIsFinite(Infinity);  // false
 * numIsFinite(NaN);       // false
 * numIsFinite(-Infinity); // false
 *
 * numIsFinite(0);         // true
 * numIsFinite(2e64);      // true
 *
 * numIsFinite('0');       // false, would've been true with
 *                         // global isFinite('0')
 * numIsFinite(null);      // false, would've been true with
 */
module.exports = $isFinite || function isFinite(number) {
  return !(typeof number !== 'number' || $isNaN(number) || number === Infinity || number === -Infinity);
};

},{"is-nan":118,"max-safe-integer":300}],11:[function(require,module,exports){
/**
 * @file ES6-compliant shim for Math.sign.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-math.sign|20.2.2.29 Math.sign(x)}
 * @version 1.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module math-sign-x
 */

'use strict';

var $isNaN = require('is-nan');

var $sign;
if (typeof Math.sign === 'function') {
  try {
    if (Math.sign(10) === 1 && Math.sign(-10) === -1 && Math.sign(0) === 0) {
      $sign = Math.sign;
    }
  } catch (ignore) {}
}

/**
 * This method returns the sign of a number, indicating whether the number is positive,
 * negative or zero.
 *
 * @param {*} x - A number.
 * @returns {number} A number representing the sign of the given argument. If the argument
 * is a positive number, negative number, positive zero or negative zero, the function will
 * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.
 * @example
 * var mathSign = require('math-sign-x');
 *
 * mathSign(3);     //  1
 * mathSign(-3);    // -1
 * mathSign('-3');  // -1
 * mathSign(0);     //  0
 * mathSign(-0);    // -0
 * mathSign(NaN);   // NaN
 * mathSign('foo'); // NaN
 * mathSign();      // NaN
 */
module.exports = $sign || function sign(x) {
  var n = Number(x);
  if (n === 0 || $isNaN(n)) {
    return n;
  }

  return n > 0 ? 1 : -1;
};

},{"is-nan":118}],12:[function(require,module,exports){
/**
 * @file ToInteger converts 'argument' to an integral numeric value.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger|7.1.4 ToInteger ( argument )}
 * @version 1.4.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-integer-x
 */

'use strict';

var $isNaN = require('is-nan');
var $isFinite = require('is-finite-x');
var $sign = require('math-sign-x');

/**
 * Converts `value` to an integer.
 *
 * @param {*} value - The value to convert.
 * @returns {number} Returns the converted integer.
 *
 * @example
 * var toInteger = require('to-integer-x');
 * toInteger(3); // 3
 * toInteger(Number.MIN_VALUE); // 0
 * toInteger(Infinity); // 1.7976931348623157e+308
 * toInteger('3'); // 3
 */
module.exports = function ToInteger(value) {
  var number = Number(value);
  if ($isNaN(number)) {
    return 0;
  }

  if (number === 0 || $isFinite(number) === false) {
    return number;
  }

  return $sign(number) * Math.floor(Math.abs(number));
};

},{"is-finite-x":10,"is-nan":118,"math-sign-x":11}],13:[function(require,module,exports){
/**
 * @file ES6-compliant shim for ToLength.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tolength|7.1.15 ToLength ( argument )}
 * @version 1.4.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-length-x
 */

'use strict';

var toInteger = require('to-integer-x');
var MAX_SAFE_INTEGER = require('max-safe-integer');

/**
 * Converts `value` to an integer suitable for use as the length of an
 * array-like object.
 *
 * @param {*} value - The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 * var toLength = require('to-length-x');
 * toLength(3); // 3
 * toLength(Number.MIN_VALUE); // 0
 * toLength(Infinity); // Number.MAX_SAFE_INTEGER
 * toLength('3'); // 3
 */
module.exports = function ToLength(value) {
  var len = toInteger(value);
  // includes converting -0 to +0
  if (len <= 0) {
    return 0;
  }

  if (len > MAX_SAFE_INTEGER) {
    return MAX_SAFE_INTEGER;
  }

  return len;
};

},{"max-safe-integer":300,"to-integer-x":12}],14:[function(require,module,exports){
/**
 * @file Cross-browser array-like slicer.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-like-slice-x
 */

'use strict';

var toObject = require('to-object-x');
var toInteger = require('to-integer-x').toInteger2018;
var toLength = require('to-length-x').toLength2018;
var isUndefined = require('validate.io-undefined');
var splitIfBoxedBug = require('split-if-boxed-bug-x');

var getMax = function _getMax(a, b) {
  return a >= b ? a : b;
};

var getMin = function _getMin(a, b) {
  return a <= b ? a : b;
};

var setRelative = function _setRelative(value, length) {
  return value < 0 ? getMax(length + value, 0) : getMin(value, length);
};

/**
 * The slice() method returns a shallow copy of a portion of an array into a new
 * array object selected from begin to end (end not included). The original
 * array will not be modified.
 *
 * @param {!Object} argsObject - The `arguments` to slice.
 * @param {number} [start] - Zero-based index at which to begin extraction.
 *  A negative index can be used, indicating an offset from the end of the
 *  sequence. slice(-2) extracts the last two elements in the sequence.
 *  If begin is undefined, slice begins from index 0.
 * @param {number} [end] - Zero-based index before which to end extraction.
 *  Slice extracts up to but not including end. For example, slice([0,1,2,3,4],1,4)
 *  extracts the second element through the fourth element (elements indexed
 *  1, 2, and 3).
 *  A negative index can be used, indicating an offset from the end of the
 *  sequence. slice(2,-1) extracts the third element through the second-to-last
 *  element in the sequence.
 *  If end is omitted, slice extracts through the end of the sequence (arr.length).
 *  If end is greater than the length of the sequence, slice extracts through
 *  the end of the sequence (arr.length).
 * @returns {Array} A new array containing the extracted elements.
 * @example
 * var arrayLikeSlice = require('array-like-slice-x');
 * var args = (function () {
    return arguments;
 * }('Banana', 'Orange', 'Lemon', 'Apple', 'Mango'));
 *
 * var citrus = arrayLikeSlice(args, 1, 3);
 *
 * // args contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']
 * // citrus contains ['Orange','Lemon']
 */
module.exports = function slice(arrayLike, start, end) {
  var iterable = splitIfBoxedBug(toObject(arrayLike));
  var length = toLength(iterable.length);
  var k = setRelative(toInteger(start), length);
  var relativeEnd = isUndefined(end) ? length : toInteger(end);
  var finalEnd = setRelative(relativeEnd, length);
  var val = [];
  val.length = getMax(finalEnd - k, 0);
  var next = 0;
  while (k < finalEnd) {
    if (k in iterable) {
      val[next] = iterable[k];
    }

    next += 1;
    k += 1;
  }

  return val;
};

},{"split-if-boxed-bug-x":334,"to-integer-x":337,"to-length-x":339,"to-object-x":344,"validate.io-undefined":356}],15:[function(require,module,exports){
/**
 * @file Creates an array with the results of calling a function on every element.
 * @version 2.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-map-x
 */

'use strict';

var cachedCtrs = require('cached-constructors-x');
var ArrayCtr = cachedCtrs.Array;
var castObject = cachedCtrs.Object;
var nativeMap = typeof ArrayCtr.prototype.map === 'function' && ArrayCtr.prototype.map;

var isWorking;
if (nativeMap) {
  var attempt = require('attempt-x');
  var spy = 0;
  var res = attempt.call([1, 2], nativeMap, function (item) {
    return item;
  });

  isWorking = res.threw === false && res.value && res.value.length === 2 && res.value[0] === 1 && res.value[1] === 2;

  if (isWorking) {
    spy = '';
    res = attempt.call(castObject('ab'), nativeMap, function (item) {
      return item;
    });

    isWorking = res.threw === false && res.value && res.value.length === 2 && res.value[0] === 'a' && res.value[1] === 'b';
  }

  if (isWorking) {
    spy = 0;
    res = attempt.call((function () {
      return arguments;
    }(1, 2)), nativeMap, function (item) {
      return item;
    });

    isWorking = res.threw === false && res.value && res.value.length === 2 && res.value[0] === 1 && res.value[1] === 2;
  }

  if (isWorking) {
    spy = 0;
    res = attempt.call({
      0: 1,
      2: 2,
      length: 3
    }, nativeMap, function (item) {
      return item;
    });

    isWorking = res.threw === false && res.value && res.value.length === 3 && (1 in res.value) === false;
  }

  if (isWorking) {
    var doc = typeof document !== 'undefined' && document;
    if (doc) {
      spy = null;
      var fragment = doc.createDocumentFragment();
      var div = doc.createElement('div');
      fragment.appendChild(div);
      res = attempt.call(fragment.childNodes, nativeMap, function (item) {
        return item;
      });

      isWorking = res.threw === false && res.value && res.value.length === 1 && res.value[0] === div;
    }
  }

  if (isWorking) {
    var isStrict = (function () {
      // eslint-disable-next-line no-invalid-this
      return Boolean(this) === false;
    }());

    if (isStrict) {
      spy = null;
      res = attempt.call([1], nativeMap, function () {
        // eslint-disable-next-line no-invalid-this
        spy = typeof this === 'string';
      }, 'x');

      isWorking = res.threw === false && res.value && res.value.length === 1 && spy === true;
    }
  }

  if (isWorking) {
    spy = {};
    var fn = [
      'return nativeMap.call("foo", function (_, __, context) {',
      'if (Boolean(context) === false || typeof context !== "object") {',
      'spy.value = true;}});'
    ].join('');

    // eslint-disable-next-line no-new-func
    res = attempt(Function('nativeMap', 'spy', fn), nativeMap, spy);

    isWorking = res.threw === false && res.value && res.value.length === 3 && spy.value !== true;
  }
}

var $map;
if (nativeMap) {
  $map = function map(array, callBack /* , thisArg */) {
    var args = [callBack];
    if (arguments.length > 2) {
      args[1] = arguments[2];
    }

    return nativeMap.apply(array, args);
  };
} else {
  var splitIfBoxedBug = require('split-if-boxed-bug-x');
  var toLength = require('to-length-x').toLength2018;
  var isUndefined = require('validate.io-undefined');
  var toObject = require('to-object-x');
  var assertIsFunction = require('assert-is-function-x');

  $map = function map(array, callBack /* , thisArg */) {
    var object = toObject(array);
    // If no callback function or if callback is not a callable function
    assertIsFunction(callBack);
    var iterable = splitIfBoxedBug(object);
    var length = toLength(iterable.length);
    var thisArg;
    if (arguments.length > 2) {
      thisArg = arguments[2];
    }

    var noThis = isUndefined(thisArg);
    var result = [];
    result.length = length;
    for (var i = 0; i < length; i += 1) {
      if (i in iterable) {
        var item = iterable[i];
        result[i] = noThis ? callBack(item, i, object) : callBack.call(thisArg, item, i, object);
      }
    }

    return result;
  };
}

/**
 * This method creates a new array with the results of calling a provided
 * function on every element in the calling array.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function that produces an element of the Array.
 * @param {*} [thisArg] - Value to use as this when executing callback.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @returns {array} A new array with each element being the result of the
 * callback function.
 * @example
 * var map = require('array-map-x');
 *
 * var numbers = [1, 4, 9];
 * var roots = map(numbers, Math.sqrt);
 * // roots is now [1, 2, 3]
 * // numbers is still [1, 4, 9]
 */
module.exports = $map;

},{"assert-is-function-x":16,"attempt-x":32,"cached-constructors-x":35,"split-if-boxed-bug-x":334,"to-length-x":339,"to-object-x":344,"validate.io-undefined":356}],16:[function(require,module,exports){
/**
 * @file If isFunction(callbackfn) is false, throw a TypeError exception.
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module assert-is-function-x
 */

'use strict';

var isFunction = require('is-function-x');
var safeToString = require('to-string-symbols-supported-x');
var isPrimitive = require('is-primitive');

/**
 * Tests `callback` to see if it is a function, throws a `TypeError` if it is
 * not. Otherwise returns the `callback`.
 *
 * @param {*} callback - The argument to be tested.
 * @throws {TypeError} Throws if `callback` is not a function.
 * @returns {*} Returns `callback` if it is function.
 * @example
 * var assertIsFunction = require('assert-is-function-x');
 * var primitive = true;
 * var mySymbol = Symbol('mySymbol');
 * var symObj = Object(mySymbol);
 * var object = {};
 * function fn () {}
 *
 * assertIsFunction(primitive);
 *    // TypeError 'true is not a function'.
 * assertIsFunction(object);
 *    // TypeError '#<Object> is not a function'.
 * assertIsFunction(mySymbol);
 *    // TypeError 'Symbol(mySymbol) is not a function'.
 * assertIsFunction(symObj);
 *    // TypeError '#<Object> is not a function'.
 * assertIsFunction(fn);
 *    // Returns fn.
 */
module.exports = function assertIsFunction(callback) {
  if (isFunction(callback) === false) {
    var msg = isPrimitive(callback) ? safeToString(callback) : '#<Object>';
    throw new TypeError(msg + ' is not a function');
  }

  return callback;
};

},{"is-function-x":110,"is-primitive":126,"to-string-symbols-supported-x":347}],17:[function(require,module,exports){
/**
 * @file Reduce an array (from left to right) to a single value.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-reduce-x
 */

'use strict';

var attempt = require('attempt-x');
var nativeReduce = typeof Array.prototype.reduce === 'function' && Array.prototype.reduce;

// ES5 15.4.4.21
// http://es5.github.com/#x15.4.4.21
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
var isWorking;
if (nativeReduce) {
  isWorking = attempt.call([], nativeReduce, function (acc) {
    return acc;
  }).threw;

  var res;
  if (isWorking) {
    res = attempt.call(Object('abc'), nativeReduce, function (acc, c) {
      return acc + c;
    }, 'x');

    isWorking = res.threw === false && res.value === 'xabc';
  }

  if (isWorking) {
    res = attempt.call((function () {
      return arguments;
    }(1, 2, 3)), nativeReduce, function (acc, arg) {
      return acc + arg;
    }, 1);

    isWorking = res.threw === false && res.value === 7;
  }

  if (isWorking) {
    res = attempt.call({
      0: 1,
      1: 2,
      3: 3,
      4: 4,
      length: 4
    }, nativeReduce, function (acc, arg) {
      return acc + arg;
    }, 2);

    isWorking = res.threw === false && res.value === 8;
  }

  if (isWorking) {
    var doc = typeof document !== 'undefined' && document;
    if (doc) {
      var fragment = doc.createDocumentFragment();
      var div = doc.createElement('div');
      fragment.appendChild(div);
      res = attempt.call(fragment.childNodes, nativeReduce, function (acc, node) {
        acc[acc.length] = node;
        return acc;
      }, []);

      isWorking = res.threw === false && res.value.length === 1 && res.value[0] === div;
    }
  }

  if (isWorking) {
    // eslint-disable-next-line max-params
    res = attempt.call('ab', nativeReduce, function (_, __, ___, list) {
      return list;
    });

    isWorking = res.threw === false && typeof res.value === 'object';
  }
}

var $reduce;
if (nativeReduce && isWorking) {
  $reduce = function reduce(array, callBack /* , initialValue */) {
    var args = [callBack];
    if (arguments.length > 2) {
      args[1] = arguments[2];
    }

    return nativeReduce.apply(array, args);
  };
} else {
  // Check failure of by-index access of string characters (IE < 9)
  // and failure of `0 in boxedString` (Rhino)
  var splitIfBoxedBug = require('split-if-boxed-bug-x');
  var toLength = require('to-length-x');
  var toObject = require('to-object-x');
  var assertIsFunction = require('assert-is-function-x');

  $reduce = function reduce(array, callBack /* , initialValue*/) {
    var object = toObject(array);
    // If no callback function or if callback is not a callable function
    assertIsFunction(callBack);
    var iterable = splitIfBoxedBug(object);
    var length = toLength(iterable.length);
    var argsLength = arguments.length;
    // no value to return if no initial value and an empty array
    if (length === 0 && argsLength < 3) {
      throw new TypeError('reduce of empty array with no initial value');
    }

    var i = 0;
    var result;
    if (argsLength > 2) {
      result = arguments[2];
    } else {
      // eslint-disable-next-line no-constant-condition
      do {
        if (i in iterable) {
          result = iterable[i];
          i += 1;
          // eslint-disable-next-line no-restricted-syntax
          break;
        }

        // if array contains no values, no initial value to return
        i += 1;
        if (i >= length) {
          throw new TypeError('reduce of empty array with no initial value');
        }
      } while (true);
    }

    while (i < length) {
      if (i in iterable) {
        result = callBack(result, iterable[i], i, object);
      }

      i += 1;
    }

    return result;
  };
}

/**
 * This method applies a function against an accumulator and each element in the
 * array (from left to right) to reduce it to a single value.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function to execute for each element.
 * @param {*} [initialValue] - Value to use as the first argument to the first
 *  call of the callback. If no initial value is supplied, the first element in
 *  the array will be used. Calling reduce on an empty array without an initial
 *  value is an error.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @throws {TypeError} If called on an empty array without an initial value.
 * @returns {*} The value that results from the reduction.
 * @example
 * var reduce = require('array-reduce-x');
 *
 * var sum = reduce([0, 1, 2, 3], function (a, b) {
 *   return a + b;
 * }, 0);
 * // sum is 6
 */
module.exports = $reduce;

},{"assert-is-function-x":18,"attempt-x":32,"split-if-boxed-bug-x":334,"to-length-x":22,"to-object-x":344}],18:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"dup":16,"is-function-x":110,"is-primitive":126,"to-string-symbols-supported-x":347}],19:[function(require,module,exports){
/**
 * @file ES6-compliant shim for Math.sign.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-math.sign|20.2.2.29 Math.sign(x)}
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module math-sign-x
 */

'use strict';

var toNumber = require('to-number-x');
var numberIsNaN = require('is-nan-x');

/**
 * This method returns the sign of a number, indicating whether the number is positive,
 * negative or zero.
 *
 * @param {*} x - A number.
 * @returns {number} A number representing the sign of the given argument. If the argument
 * is a positive number, negative number, positive zero or negative zero, the function will
 * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.
 * @example
 * var mathSign = require('math-sign-x');
 *
 * mathSign(3);     //  1
 * mathSign(-3);    // -1
 * mathSign('-3');  // -1
 * mathSign(0);     //  0
 * mathSign(-0);    // -0
 * mathSign(NaN);   // NaN
 * mathSign('foo'); // NaN
 * mathSign();      // NaN
 */
module.exports = function sign(x) {
  var n = toNumber(x);
  if (n === 0 || numberIsNaN(n)) {
    return n;
  }

  return n > 0 ? 1 : -1;
};

},{"is-nan-x":116,"to-number-x":23}],20:[function(require,module,exports){
/**
 * @file Parses a string argument and returns an integer of the specified radix.
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module parse-int-x
 */

'use strict';

var nativeParseInt = parseInt;
var ws = require('white-space-x').string;
var toStr = require('to-string-x');

var $parseInt;
if (nativeParseInt(ws + '08') === 8 && nativeParseInt(ws + '0x16') === 22) {
  $parseInt = function parseInteger(string, radix) {
    return nativeParseInt(toStr(string), radix);
  };
} else {
  var trim = require('trim-x');
  var castNumber = require('cached-constructors-x').Number;
  var hexRegex = /^[-+]?0[xX]/;
  var test = hexRegex.test;

  $parseInt = function parseInteger(string, radix) {
    var str = trim(toStr(string));

    return nativeParseInt(str, castNumber(radix) || (test.call(hexRegex, str) ? 16 : 10));
  };
}

/**
 * This method parses a string argument and returns an integer of the specified
 * radix (the base in mathematical numeral systems).
 *
 * @param {string} string - The value to parse. If the string argument is not a
 *  string, then it is converted to a string (using the ToString abstract
 *  operation). Leading whitespace in the string argument is ignored.
 * @param {number} radix - An integer between 2 and 36 that represents the radix
 *  (the base in mathematical numeral systems) of the above mentioned string.
 *  Specify 10 for the decimal numeral system commonly used by humans. Always
 *  specify this parameter to eliminate reader confusion and to guarantee
 *  predictable behavior. Different implementations produce different results
 *  when a radix is not specified, usually defaulting the value to 10.
 * @throws {TypeError} If target is a Symbol or is not coercible.
 * @returns {number} An integer number parsed from the given string. If the first
 *  character cannot be converted to a number, NaN is returned.
 * @example
 * var $parseInt = require('parse-int-x');
 *
 * // The following examples all return 15
 * $parseInt(' 0xF', 16);
 * $parseInt(' F', 16);
 * $parseInt('17', 8);
 * $parseInt(021, 8);
 * $parseInt('015', 10);   // $parseInt(015, 10); will return 15
 * $parseInt(15.99, 10);
 * $parseInt('15,123', 10);
 * $parseInt('FXX123', 16);
 * $parseInt('1111', 2);
 * $parseInt('15 * 3', 10);
 * $parseInt('15e2', 10);
 * $parseInt('15px', 10);
 * $parseInt('12', 13);
 *
 * //The following examples all return NaN:
 * $parseInt('Hello', 8); // Not a number at all
 * $parseInt('546', 2);   // Digits are not valid for binary representations
 */
module.exports = $parseInt;

},{"cached-constructors-x":35,"to-string-x":349,"trim-x":353,"white-space-x":357}],21:[function(require,module,exports){
/**
 * @file ToInteger converts 'argument' to an integral numeric value.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger|7.1.4 ToInteger ( argument )}
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-integer-x
 */

'use strict';

var toNumber = require('to-number-x');
var numberIsNaN = require('is-nan-x');
var numberIsFinite = require('is-finite-x');
var mathSign = require('math-sign-x');

/**
 * Converts `value` to an integer.
 *
 * @param {*} value - The value to convert.
 * @returns {number} Returns the converted integer.
 *
 * @example
 * var toInteger = require('to-integer-x');
 * toInteger(3); // 3
 * toInteger(Number.MIN_VALUE); // 0
 * toInteger(Infinity); // 1.7976931348623157e+308
 * toInteger('3'); // 3
 */
module.exports = function toInteger(value) {
  var number = toNumber(value);
  if (numberIsNaN(number)) {
    return 0;
  }

  if (number === 0 || numberIsFinite(number) === false) {
    return number;
  }

  return mathSign(number) * Math.floor(Math.abs(number));
};

},{"is-finite-x":109,"is-nan-x":116,"math-sign-x":19,"to-number-x":23}],22:[function(require,module,exports){
/**
 * @file ES6-compliant shim for ToLength.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tolength|7.1.15 ToLength ( argument )}
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-length-x
 */

'use strict';

var toInteger = require('to-integer-x');
var MAX_SAFE_INTEGER = require('max-safe-integer');

/**
 * Converts `value` to an integer suitable for use as the length of an
 * array-like object.
 *
 * @param {*} value - The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 * var toLength = require('to-length-x');
 * toLength(3); // 3
 * toLength(Number.MIN_VALUE); // 0
 * toLength(Infinity); // Number.MAX_SAFE_INTEGER
 * toLength('3'); // 3
 */
module.exports = function toLength(value) {
  var len = toInteger(value);
  // includes converting -0 to +0
  if (len <= 0) {
    return 0;
  }

  if (len > MAX_SAFE_INTEGER) {
    return MAX_SAFE_INTEGER;
  }

  return len;
};

},{"max-safe-integer":300,"to-integer-x":21}],23:[function(require,module,exports){
/**
 * @file Converts argument to a value of type Number.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-number-x
 */

'use strict';

var constructors = require('cached-constructors-x');
var castNumber = require('cached-constructors-x').Number;
var Rx = constructors.RegExp;
var toPrimitive = require('to-primitive-x');
var trim = require('trim-x');
var $parseInt = require('parse-int-x');
var pStrSlice = ''.slice;
var NAN = require('nan-x');

var binaryRegex = /^0b[01]+$/i;
// Note that in IE 8, RegExp.prototype.test doesn't seem to exist: ie, "test" is an own property of regexes. wtf.
var test = binaryRegex.test;
var isBinary = function _isBinary(value) {
  return test.call(binaryRegex, value);
};

var octalRegex = /^0o[0-7]+$/i;
var isOctal = function _isOctal(value) {
  return test.call(octalRegex, value);
};

var nonWSregex = new Rx('[\u0085\u200b\ufffe]', 'g');
var hasNonWS = function _hasNonWS(value) {
  return test.call(nonWSregex, value);
};

var invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;
var isInvalidHexLiteral = function _isInvalidHexLiteral(value) {
  return test.call(invalidHexLiteral, value);
};

/**
 * This method converts argument to a value of type Number.

 * @param {*} argument - The argument to convert to a number.
 * @throws {TypeError} - If argument is a Symbol or not coercible.
 * @returns {*} The argument converted to a number.
 * @example
 * var toNumber = require('to-number-x');
 *
 * toNumber('1'); // 1
 * toNumber(null); // 0
 * toNumber(true); // 1
 * toNumber('0o10'); // 8
 * toNumber('0b10'); // 2
 * toNumber('0xF'); // 16
 *
 * toNumber(' 1 '); // 1
 *
 * toNumber(Symbol('')) // TypeError
 * toNumber(Object.create(null)) // TypeError
 */
module.exports = function toNumber(argument) {
  var value = toPrimitive(argument, Number);
  if (typeof value === 'symbol') {
    throw new TypeError('Cannot convert a Symbol value to a number');
  }

  if (typeof value === 'string') {
    if (isBinary(value)) {
      return toNumber($parseInt(pStrSlice.call(value, 2), 2));
    }

    if (isOctal(value)) {
      return toNumber($parseInt(pStrSlice.call(value, 2), 8));
    }

    if (hasNonWS(value) || isInvalidHexLiteral(value)) {
      return NAN;
    }

    var trimmed = trim(value);
    if (trimmed !== value) {
      return toNumber(trimmed);
    }
  }

  return castNumber(value);
};

},{"cached-constructors-x":35,"nan-x":307,"parse-int-x":20,"to-primitive-x":345,"trim-x":353}],24:[function(require,module,exports){
/**
 * @file Cross-browser array slicer.
 * @version 3.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-slice-x
 */

'use strict';

var toObject = require('to-object-x');
var isArguments = require('is-arguments');
var isArray = require('is-array-x');
var arrayLikeSlice = require('array-like-slice-x');
var nativeSlice = require('cached-constructors-x').Array.prototype.slice;
var isString;
var failArr;
var failDOM;
if (nativeSlice) {
  var attempt = require('attempt-x');
  var res = attempt.call([
    1,
    2,
    3
  ], nativeSlice, 1, 2);

  failArr = res.threw || isArray(res.value) === false || res.value.length !== 1 || res.value[0] !== 2;
  if (failArr === false) {
    res = attempt.call('abc', nativeSlice, 1, 2);
    isString = (res.threw || res.value.length !== 1 || res.value[0] !== 'b') && require('is-string');
    var doc = typeof document !== 'undefined' && document;
    failDOM = doc && attempt.call(doc.documentElement, nativeSlice).threw;
  }
} else {
  failArr = true;
}

/**
 * The slice() method returns a shallow copy of a portion of an array into a new
 * array object selected from begin to end (end not included). The original
 * array will not be modified.
 *
 * @param {Array|Object} array - The array to slice.
 * @param {number} [start] - Zero-based index at which to begin extraction.
 *  A negative index can be used, indicating an offset from the end of the
 *  sequence. slice(-2) extracts the last two elements in the sequence.
 *  If begin is undefined, slice begins from index 0.
 * @param {number} [end] - Zero-based index before which to end extraction.
 *  Slice extracts up to but not including end. For example, slice(1,4)
 *  extracts the second element through the fourth element (elements indexed
 *  1, 2, and 3).
 *  A negative index can be used, indicating an offset from the end of the
 *  sequence. slice(2,-1) extracts the third element through the second-to-last
 *  element in the sequence.
 *  If end is omitted, slice extracts through the end of the
 *  sequence (arr.length).
 *  If end is greater than the length of the sequence, slice extracts through
 *  the end of the sequence (arr.length).
 * @returns {Array} A new array containing the extracted elements.
 * @example
 * var slice = require('array-slice-x');
 * var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
 * var citrus = slice(fruits, 1, 3);
 *
 * // fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']
 * // citrus contains ['Orange','Lemon']
 */
module.exports = function slice(array, start, end) {
  var object = toObject(array);
  if (failArr || (failDOM && isArray(object) === false) || (isString && isString(object)) || isArguments(object)) {
    return arrayLikeSlice(object, start, end);
  }

  return nativeSlice.apply(object, arrayLikeSlice(arguments, 1));
};

},{"array-like-slice-x":14,"attempt-x":32,"cached-constructors-x":35,"is-arguments":98,"is-array-x":101,"is-string":134,"to-object-x":344}],25:[function(require,module,exports){
/**
 * @file Tests whether some element passes the provided function.
 * @version 1.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-some-x
 */

'use strict';

var toObject = require('to-object-x');
var assertIsFunction = require('assert-is-function-x');

var tests = {
  // Check node 0.6.21 bug where third parameter is not boxed
  properlyBoxesNonStrict: true,
  properlyBoxesStrict: true
};

var nativeSome = Array.prototype.some;
if (nativeSome) {
  try {
    nativeSome.call([1], function () {
      // eslint-disable-next-line no-invalid-this
      tests.properlyBoxesStrict = typeof this === 'string';
    }, 'x');

    var fn = [
      'return nativeSome.call("foo", function (_, __, context) {',
      'if (Boolean(context) === false || typeof context !== "object") {',
      'tests.properlyBoxesNonStrict = false;}});'
    ].join('');

    // eslint-disable-next-line no-new-func
    Function('nativeSome', 'tests', fn)(nativeSome, tests);
  } catch (e) {
    nativeSome = null;
  }
}

var $some;
if (nativeSome && tests.properlyBoxesNonStrict && tests.properlyBoxesStrict) {
  $some = function some(array, callBack /* , thisArg */) {
    var object = toObject(array);
    var args = [assertIsFunction(callBack)];
    if (arguments.length > 2) {
      args.push(arguments[2]);
    }

    return nativeSome.apply(object, args);
  };
} else {
  // ES5 15.4.4.17
  // http://es5.github.com/#x15.4.4.17
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
  var isString = require('is-string');
  var toLength = require('to-length-x');
  var isUndefined = require('validate.io-undefined');
  var splitString = require('has-boxed-string-x') === false;
  $some = function some(array, callBack /* , thisArg */) {
    var object = toObject(array);
    // If no callback function or if callback is not a callable function
    assertIsFunction(callBack);
    var iterable = splitString && isString(object) ? object.split('') : object;
    var length = toLength(iterable.length);
    var thisArg;
    if (arguments.length > 2) {
      thisArg = arguments[2];
    }

    for (var i = 0; i < length; i += 1) {
      if (i in iterable) {
        var result;
        if (isUndefined(thisArg)) {
          result = callBack(iterable[i], i, object);
        } else {
          result = callBack.call(thisArg, iterable[i], i, object);
        }

        if (result) {
          return true;
        }
      }
    }

    return false;
  };
}

/**
 * This method tests whether some element in the array passes the test
 * implemented by the provided function.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function to test for each element.
 * @param {*} [thisArg] - Value to use as this when executing callback.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @returns {boolean} `true` if the callback function returns a truthy value for
 *  any array element; otherwise, `false`.
 * @example
 * var some = require('array-some-x');
 *
 * function isBiggerThan10(element, index, array) {
 *   return element > 10;
 * }
 *
 * some([2, 5, 8, 1, 4], isBiggerThan10);  // false
 * some([12, 5, 8, 1, 4], isBiggerThan10); // true
 */
module.exports = $some;

},{"assert-is-function-x":30,"has-boxed-string-x":69,"is-string":134,"to-length-x":29,"to-object-x":344,"validate.io-undefined":356}],26:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10,"is-nan":118,"max-safe-integer":300}],27:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"dup":11,"is-nan":118}],28:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"dup":12,"is-finite-x":26,"is-nan":118,"math-sign-x":27}],29:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"dup":13,"max-safe-integer":300,"to-integer-x":28}],30:[function(require,module,exports){
/**
 * @file If isFunction(callbackfn) is false, throw a TypeError exception.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module assert-is-function-x
 */

'use strict';

var isFunction = require('is-function-x');
var safeToString = require('safe-to-string-x');
var isPrimitive = require('is-primitive');

/**
 * Tests `callback` to see if it is a function, throws a `TypeError` if it is
 * not. Otherwise returns the `callback`.
 *
 * @param {*} callback - The argument to be tested.
 * @throws {TypeError} Throws if `callback` is not a function.
 * @returns {*} Returns `callback` if it is function.
 * @example
 * var assertIsFunction = require('assert-is-function-x');
 * var primitive = true;
 * var mySymbol = Symbol('mySymbol');
 * var symObj = Object(mySymbol);
 * var object = {};
 * function fn () {}
 *
 * assertIsFunction(primitive);
 *    // TypeError 'true is not a function'.
 * assertIsFunction(object);
 *    // TypeError '#<Object> is not a function'.
 * assertIsFunction(mySymbol);
 *    // TypeError 'Symbol(mySymbol) is not a function'.
 * assertIsFunction(symObj);
 *    // TypeError '#<Object> is not a function'.
 * assertIsFunction(fn);
 *    // Returns fn.
 */
module.exports = function assertIsFunction(callback) {
  if (isFunction(callback) === false) {
    var msg = isPrimitive(callback) ? safeToString(callback) : '#<Object>';
    throw new TypeError(msg + ' is not a function');
  }
  return callback;
};

},{"is-function-x":110,"is-primitive":126,"safe-to-string-x":331}],31:[function(require,module,exports){
/**
 * @file If IsObject(value) is false, throw a TypeError exception.
 * @version 1.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module assert-is-object-x
 */

'use strict';

var safeToString = require('safe-to-string-x');
var isPrimitive = require('is-primitive');

/**
   * Tests `value` to see if it is an object, throws a `TypeError` if it is
   * not. Otherwise returns the `value`.
   *
   * @param {*} value - The argument to be tested.
   * @throws {TypeError} Throws if `value` is not an object.
   * @returns {*} Returns `value` if it is an object.
   * @example
   * var assertIsObject = require('assert-is-object-x');
   * var primitive = true;
   * var mySymbol = Symbol('mySymbol');
   * var symObj = Object(mySymbol);
   * var object = {};
   * function fn () {}
   *
   * assertIsObject(primitive); // TypeError 'true is not an object'
   * assertIsObject(mySymbol); // TypeError 'Symbol(mySymbol) is not an object'
   * assertIsObject(symObj); // Returns symObj.
   * assertIsObject(object); // Returns object.
   * assertIsObject(fn); // Returns fn.
   */
module.exports = function assertIsObject(value) {
  if (isPrimitive(value)) {
    throw new TypeError(safeToString(value) + ' is not an object');
  }
  return value;
};

},{"is-primitive":126,"safe-to-string-x":331}],32:[function(require,module,exports){
/**
 * @file Invokes function, returning an object of the results.
 * @version 1.1.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module attempt-x
 */

'use strict';

var getArgs = function _getArgs(args) {
  var length = args.length >>> 0;
  var array = [];
  var argLength = length - 1;
  if (argLength < 1) {
    return array;
  }

  array.length = argLength;
  for (var index = 1; index < length; index += 1) {
    array[index - 1] = args[index];
  }

  return array;
};

/**
 * This method attempts to invoke the function, returning either the result or
 * the caught error object. Any additional arguments are provided to the
 * function when it's invoked.
 *
 * @param {Function} fn - The function to attempt.
 * @param {...*} [args] - The arguments to invoke the function with.
 * @returns {Object} Returns an object of the result.
 * @example
 * var attempt = require('attempt-x');
 *
 * function thrower() {
 *   throw new Error('Threw');
 * }
 *
 * attempt(thrower, 1, 2);
 * // {
 * //   threw: true,
 * //   value: // Error('Threw') object
 * // }
 *
 * function sumArgs(a, b) {
 *   return a + b;
 * }
 *
 * attempt(sumArgs, 1, 2);
 * // {
 * //   threw: false,
 * //   value: 3
 * // }
 *
 * var thisArg = [];
 * function pusher(a, b) {
 *   return this.push(a, b);
 * }
 *
 * attempt.call(thisArg, pusher, 1, 2);
 * // {
 * //   threw: false,
 * //   value: 2
 * // }
 * // thisArg => [1, 2];
 */
module.exports = function attempt(fn) {
  try {
    return {
      threw: false,
      value: fn.apply(this, getArgs(arguments))
    };
  } catch (e) {
    return {
      threw: true,
      value: e
    };
  }
};

},{}],33:[function(require,module,exports){
/**
* @file A big counter.
* @version 2.0.1
* @author Xotic750 <Xotic750@gmail.com>
* @copyright  Xotic750
* @license {@link <https://opensource.org/licenses/MIT> MIT}
* @module big-counter-x
*/

'use strict';

var defineProperties = require('object-define-properties-x');

/**
 * Serialise the counter´s current value.
 *
 * @private
 * @this BigCounter
 * @return {string} A string representation of an integer.
 */
var counterToString = function ToString() {
  return this.count.slice().reverse().join('');
};

/**
 * The BigCounter class.
 *
 * @private
 * @class
 */
var BigC = function BigCounter() {
  if (Boolean(this) === false || (this instanceof BigC) === false) {
    return new BigC();
  }

  defineProperties(this, {
    count: {
      value: [0]
    }
  });
};

defineProperties(BigC.prototype, {
  /**
   * Gets the counter´s current value.
   *
   * @function
   * @returns {string} A string representation of an integer.
   */
  get: {
    value: counterToString
  },
  /**
   * Increments the counter´s value by `1`.
   *
   * @function
   * @returns {Object} The counter object.
   */
  next: {
    value: function next() {
      var clone = this.count.slice();
      this.count.length = 0;
      var length = clone.length;
      var howMany = Math.max(length, 1);
      var carry = 0;
      var index = 0;
      while (index < howMany || carry) {
        var zi = carry + (index < length ? clone[index] : 0) + (index === 0 ? 1 : 0);
        this.count.push(zi % 10);
        carry = Math.floor(zi / 10);
        index += 1;
      }

      return this;
    }
  },
  /**
   * Resets the counter back to `0`.
   *
   * @function
   * @returns {Object} The counter object.
   */
  reset: {
    value: function reset() {
      this.count.length = 0;
      this.count.push(0);
      return this;
    }
  },
  /**
   * Gets the counter´s current value.
   *
   * @function
   * @returns {string} A string representation of an integer.
   */
  toJSON: {
    value: counterToString
  },
  /**
   * Gets the counter´s current value.
   *
   * @function
   * @returns {string} A string representation of an integer.
   */
  toString: {
    value: counterToString
  },
  /**
   * Gets the counter´s current value.
   *
   * @function
   * @returns {string} A string representation of an integer.
   */
  valueOf: {
    value: counterToString
  }
});

/**
 * Incremental integer counter. Counts from `0` to very big intergers.
 * Javascript´s number type allows you to count in integer steps
 * from `0` to `9007199254740991`. As of ES5, Strings can contain
 * approximately 65000 characters and ES6 is supposed to handle
 * the `MAX_SAFE_INTEGER` (though I don´t believe any environments supports
 * this). This counter represents integer values as strings and can therefore
 * count in integer steps from `0` to the maximum string length (that´s some
 * 65000 digits). In the lower range, upto `9007199254740991`, the strings can
 * be converted to safe Javascript integers `Number(value)` or `+value`. This
 * counter is great for any applications that need a really big count
 * represented as a string, (an ID string).
 *
 * @class
 * @example
 * var BigCounter = require('big-counter-x');
 * var counter = new BigCounter();
 *
 * counter.get(); // '0'
 * counter.next(); // counter object
 * counter.get(); // '1'
 *
 * // Methods are chainable.
 * counter.next().next(); // counter object
 * counter.get(); // '3'
 *
 * counter.reset(); // counter object
 * counter.get(); // '0'
 * counter.toString(); // '0'
 * counter.valueOf(); // '0'
 * counter.toJSON(); // '0'
 *
 * // Values upto `9007199254740991` convert to numbers.
 * Number(counter); // 0
 * +counter; // 0
 */
module.exports = BigC;

},{"object-define-properties-x":317}],34:[function(require,module,exports){
'use strict';

var boolean = function boolean(value) {
  if (typeof value === 'string') {
    return (/^(true|t|yes|y|1)$/i.test(value.trim())
    );
  }

  if (typeof value === 'number') {
    return value !== 0;
  }

  if (typeof value === 'boolean') {
    return value;
  }

  return false;
};

module.exports = boolean;
},{}],35:[function(require,module,exports){
/**
 * @file Constructors cached from literals.
 * @version 1.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module cached-constructors-x
 */

'use strict';

/**
 * Constructors cached from literals.
 *
 * @type Object
 * @example
 * var constructors = require('cached-constructors-x');
 */
module.exports = {
  Array: [].constructor,
  Boolean: true.constructor,
  Function: function () {}.constructor,
  Number: (0).constructor,
  Object: {}.constructor,
  RegExp: (/(?:)/).constructor,
  String: ''.constructor
};

},{}],36:[function(require,module,exports){
/**
 * @file Calculates a fromIndex of a given value for an array.
 * @version 1.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module calculate-from-index-x
 */

'use strict';

var toObject = require('to-object-x');
var toLength = require('to-length-x');
var toInteger = require('to-integer-x');
var isArrayLike = require('is-array-like-x');

var $calcFromIndex = function calcFromIndex(array, fromIndex) {
  var object = toObject(array);
  if (isArrayLike(object) === false) {
    return 0;
  }

  var length = toLength(object.length);
  var index = toInteger(fromIndex);
  return index >= 0 ? index : Math.max(0, length + index);
};

/**
 * This method calculates a fromIndex of a given value for an array.
 *
 * @param {array} array The array on which to calculate the starting index.
 * @throws {TypeError} If array is null or undefined.
 * @param {number} fromIndex The position in this array at which to begin. A
 *  negative value gives the index of array.length + fromIndex by asc.
 * @return {number} The calculated fromIndex. Default is 0.
 * @example
 * var calcFromIndex = require('calculate-from-index-x');
 *
 * calcFromIndex([1, 2, 3], 1); // 1
 * calcFromIndex([1, 2, 3], Infinity); // Infinity
 * calcFromIndex([1, 2, 3], -Infinity); // 0
 * calcFromIndex([1, 2, 3], -1); // 2
 */
module.exports = $calcFromIndex;

},{"is-array-like-x":100,"to-integer-x":39,"to-length-x":40,"to-object-x":344}],37:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10,"is-nan":118,"max-safe-integer":300}],38:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"dup":11,"is-nan":118}],39:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"dup":12,"is-finite-x":37,"is-nan":118,"math-sign-x":38}],40:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"dup":13,"max-safe-integer":300,"to-integer-x":39}],41:[function(require,module,exports){
/**
 * @file ES6 collections fallback library: Map and Set.
 * @version 2.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module collections-x
 */

'use strict';

var hasOwn = require('has-own-property-x');
var isFunction = require('is-function-x');
var defineProperty = require('object-define-property-x');
var defineProperties = require('object-define-properties-x');
var isString = require('is-string');
var isArrayLike = require('is-array-like-x');
var isPrimitive = require('is-primitive');
var isSurrogatePair = require('is-surrogate-pair-x');
var indexOf = require('index-of-x');
var assertIsFunction = require('assert-is-function-x');
var assertIsObject = require('assert-is-object-x');
var IdGenerator = require('big-counter-x');
var isNil = require('is-nil-x');
var isMap = require('is-map-x');
var isSet = require('is-set-x');
var isObjectLike = require('is-object-like-x');
var isArray = require('is-array-x');
var isBoolean = require('is-boolean-object');
var isUndefined = require('validate.io-undefined');
var some = require('array-some-x');
var getPrototypeOf = require('get-prototype-of-x');
var hasSymbolSupport = require('has-symbol-support-x');
var hasRealSymbolIterator = hasSymbolSupport && typeof Symbol.iterator === 'symbol';
var hasFakeSymbolIterator = typeof Symbol === 'object' && typeof Symbol.iterator === 'string';
var symIt;

if (hasRealSymbolIterator || hasFakeSymbolIterator) {
  symIt = Symbol.iterator;
} else if (isFunction(Array.prototype['_es6-shim iterator_'])) {
  symIt = '_es6-shim iterator_';
} else {
  symIt = '@@iterator';
}

var isNumberType = function _isNumberType(value) {
  return typeof value === 'number';
};

/**
 * Detect an interator function.
 *
 * @private
 * @param {*} iterable - Value to detect iterator function.
 * @returns {Symbol|string|undefined} The iterator property identifier.
 */
var getSymbolIterator = function _getSymbolIterator(iterable) {
  if (isNil(iterable) === false) {
    if ((hasRealSymbolIterator || hasFakeSymbolIterator) && iterable[symIt]) {
      return symIt;
    }

    if (iterable['_es6-shim iterator_']) {
      return '_es6-shim iterator_';
    }

    if (iterable['@@iterator']) {
      return '@@iterator';
    }
  }

  return void 0;
};

/**
 * If an iterable object is passed, all of its elements will be added to the
 * new Map/Set, null is treated as undefined.
 *
 * @private
 * @param {string} kind - Either 'map' or 'set'.
 * @param {Object} context - The Map/Set object.
 * @param {*} iterable - Value to parsed.
 */
// eslint-disable-next-line complexity
var parseIterable = function _parseIterable(kind, context, iterable) {
  var symbolIterator = getSymbolIterator(iterable);
  if (kind === 'map') {
    defineProperty(context, '[[value]]', {
      value: []
    });
  }

  defineProperties(context, {
    '[[changed]]': {
      value: false
    },
    '[[id]]': {
      value: new IdGenerator()
    },
    '[[key]]': {
      value: []
    },
    '[[order]]': {
      value: []
    }
  });

  var next;
  var key;
  var indexof;
  if (iterable && isFunction(iterable[symbolIterator])) {
    var iterator = iterable[symbolIterator]();
    next = iterator.next();
    if (kind === 'map') {
      if (isArrayLike(next.value) === false || next.value.length < 2) {
        throw new TypeError(
          'Iterator value ' + isArrayLike(next.value) + ' is not an entry object'
        );
      }
    }

    while (next.done === false) {
      key = kind === 'map' ? next.value[0] : next.value;
      indexof = indexOf(
        assertIsObject(context)['[[key]]'],
        key,
        'SameValueZero'
      );

      if (indexof < 0) {
        if (kind === 'map') {
          context['[[value]]'].push(next.value[1]);
        }

        context['[[key]]'].push(key);
        context['[[order]]'].push(context['[[id]]'].get());
        context['[[id]]'].next();
      } else if (kind === 'map') {
        context['[[value]]'][indexof] = next.value[1];
      }

      next = iterator.next();
    }
  }

  if (isString(iterable)) {
    if (kind === 'map') {
      throw new TypeError(
        'Iterator value ' + iterable.charAt(0) + ' is not an entry object'
      );
    }

    next = 0;
    while (next < iterable.length) {
      var char1 = iterable.charAt(next);
      var char2 = iterable.charAt(next + 1);
      if (isSurrogatePair(char1, char2)) {
        key = char1 + char2;
        next += 1;
      } else {
        key = char1;
      }

      indexof = indexOf(
        assertIsObject(context)['[[key]]'],
        key,
        'SameValueZero'
      );

      if (indexof < 0) {
        context['[[key]]'].push(key);
        context['[[order]]'].push(context['[[id]]'].get());
        context['[[id]]'].next();
      }

      next += 1;
    }
  } else if (isArrayLike(iterable)) {
    next = 0;
    while (next < iterable.length) {
      if (kind === 'map') {
        if (isPrimitive(iterable[next])) {
          throw new TypeError(
            'Iterator value ' + isArrayLike(next.value) + ' is not an entry object'
          );
        }

        key = iterable[next][0];
      } else {
        key = iterable[next];
      }

      key = kind === 'map' ? iterable[next][0] : iterable[next];
      indexof = indexOf(
        assertIsObject(context)['[[key]]'],
        key,
        'SameValueZero'
      );

      if (indexof < 0) {
        if (kind === 'map') {
          context['[[value]]'].push(iterable[next][1]);
        }

        context['[[key]]'].push(key);
        context['[[order]]'].push(context['[[id]]'].get());
        context['[[id]]'].next();
      } else if (kind === 'map') {
        context['[[value]]'][indexof] = iterable[next][1];
      }

      next += 1;
    }
  }

  defineProperty(context, 'size', {
    value: context['[[key]]'].length,
    writable: true
  });
};

/**
 * The base forEach method executes a provided function once per each value
 * in the Map/Set object, in insertion order.
 *
 * @private
 * @param {string} kind - Either 'map' or 'set'.
 * @param {Object} context - The Map/Set object.
 * @param {Function} callback - Function to execute for each element.
 * @param {*} [thisArg] - Value to use as this when executing callback.
 * @returns {Object} The Map/Set object.
 */
// eslint-disable-next-line max-params
var baseForEach = function _baseForEach(kind, context, callback, thisArg) {
  assertIsObject(context);
  assertIsFunction(callback);
  var pointers = {
    index: 0,
    order: context['[[order]]'][0]
  };

  context['[[change]]'] = false;
  var length = context['[[key]]'].length;
  while (pointers.index < length) {
    if (hasOwn(context['[[key]]'], pointers.index)) {
      var key = context['[[key]]'][pointers.index];
      var value = kind === 'map' ? context['[[value]]'][pointers.index] : key;
      callback.call(thisArg, value, key, context);
    }

    if (context['[[change]]']) {
      length = context['[[key]]'].length;
      some(context['[[order]]'], function _some1(id, count) {
        pointers.index = count;
        return id > pointers.order;
      });

      context['[[change]]'] = false;
    } else {
      pointers.index += 1;
    }

    pointers.order = context['[[order]]'][pointers.index];
  }

  return context;
};

/**
 * The base has method returns a boolean indicating whether an element with
 * the specified key/value exists in a Map/Set object or not.
 *
 * @private
 * @param {*} key - The key/value to test for presence in the Map/Set object.
 * @returns {boolean} Returns true if an element with the specified key/value
 *  exists in the Map/Set object; otherwise false.
 */
var baseHas = function has(key) {
  // eslint-disable-next-line no-invalid-this
  return indexOf(assertIsObject(this)['[[key]]'], key, 'SameValueZero') > -1;
};

/**
 * The base clear method removes all elements from a Map/Set object.
 *
 * @private
 * @param {string} kind - Either 'map' or 'set'.
 * @param {Object} context - The Map/Set object.
 * @returns {Object} The Map/Set object.
 */
var baseClear = function _baseClear(kind, context) {
  assertIsObject(context);
  context['[[id]]'].reset();
  context['[[change]]'] = true;
  context.size = 0;
  context['[[order]]'].length = 0;
  context['[[key]]'].length = 0;
  if (kind === 'map') {
    context['[[value]]'].length = 0;
  }

  return context;
};

/**
 * The base delete method removes the specified element from a Map/Set object.
 *
 * @private
 * @param {string} kind - Either 'map' or 'set'.
 * @param {Object} context - The Map/Set object.
 * @param {*} key - The key/value of the element to remove from Map/Set object.
 * @returns {Object} The Map/Set object.
 */
var baseDelete = function _baseDelete(kind, context, key) {
  var indexof = indexOf(
    assertIsObject(context)['[[key]]'],
    key,
    'SameValueZero'
  );

  var result = false;
  if (indexof > -1) {
    if (kind === 'map') {
      context['[[value]]'].splice(indexof, 1);
    }

    context['[[key]]'].splice(indexof, 1);
    context['[[order]]'].splice(indexof, 1);
    context['[[change]]'] = true;
    context.size = context['[[key]]'].length;
    result = true;
  }

  return result;
};

/**
 * The base set and add method.
 *
 * @private
 * @param {string} kind - Either 'map' or 'set'.
 * @param {Object} context - The Map/Set object.
 * @param {*} key - The key or value of the element to add/set on the object.
 * @param {*} value - The value of the element to add to the Map object.
 * @returns {Object} The Map/Set object.
 */
// eslint-disable-next-line max-params
var baseAddSet = function _baseAddSet(kind, context, key, value) {
  var index = indexOf(
    assertIsObject(context)['[[key]]'],
    key,
    'SameValueZero'
  );

  if (index > -1) {
    if (kind === 'map') {
      context['[[value]]'][index] = value;
    }
  } else {
    if (kind === 'map') {
      context['[[value]]'].push(value);
    }

    context['[[key]]'].push(key);
    context['[[order]]'].push(context['[[id]]'].get());
    context['[[id]]'].next();
    context['[[change]]'] = true;
    context.size = context['[[key]]'].length;
  }

  return context;
};

/**
 * An object is an iterator when it knows how to access items from a
 * collection one at a time, while keeping track of its current position
 * within that sequence. In JavaScript an iterator is an object that provides
 * a next() method which returns the next item in the sequence. This method
 * returns an object with two properties: done and value. Once created,
 * an iterator object can be used explicitly by repeatedly calling next().
 *
 * @private
 * @class
 * @param {Object} context - The Set object.
 * @param {string} iteratorKind - Values are `value`, `key` or `key+value`.
 */
var SetIt = function SetIterator(context, iteratorKind) {
  defineProperties(this, {
    '[[IteratorHasMore]]': {
      value: true,
      writable: true
    },
    '[[Set]]': {
      value: assertIsObject(context)
    },
    '[[SetIterationKind]]': {
      value: iteratorKind || 'value'
    },
    '[[SetNextIndex]]': {
      value: 0,
      writable: true
    }
  });
};

/**
 * Once initialized, the next() method can be called to access key-value
 * pairs from the object in turn.
 *
 * @private
 * @function next
 * @returns {Object} Returns an object with two properties: done and value.
 */
defineProperty(SetIt.prototype, 'next', {
  value: function next() {
    var context = assertIsObject(this['[[Set]]']);
    var index = this['[[SetNextIndex]]'];
    var iteratorKind = this['[[SetIterationKind]]'];
    var more = this['[[IteratorHasMore]]'];
    var object;
    if (index < context['[[key]]'].length && more) {
      object = { done: false };
      if (iteratorKind === 'key+value') {
        object.value = [context['[[key]]'][index], context['[[key]]'][index]];
      } else {
        object.value = context['[[key]]'][index];
      }

      this['[[SetNextIndex]]'] += 1;
    } else {
      this['[[IteratorHasMore]]'] = false;
      object = {
        done: true,
        value: void 0
      };
    }

    return object;
  }
});

/**
 * The @@iterator property is the same Iterator object.
 *
 * @private
 * @function symIt
 * @memberof SetIterator.prototype
 * @returns {Object} This Iterator object.
 */
defineProperty(SetIt.prototype, symIt, {
  value: function iterator() {
    return this;
  }
});

/**
 * This method returns a new Iterator object that contains the
 * values for each element in the Set object in insertion order.
 *
 * @private
 * @this Set
 * @returns {Object} A new Iterator object.
 */
var setValuesIterator = function values() {
  return new SetIt(this);
};

/**
 * The Set object lets you store unique values of any type, whether primitive
 * values or object references.
 *
 * @class Set
 * @private
 * @param {*} [iterable] - If an iterable object is passed, all of its elements
 * will be added to the new Set. null is treated as undefined.
 * @example
 * var mySet = new Set();
 *
 * mySet.add(1);
 * mySet.add(5);
 * mySet.add("some text");
 * var o = {a: 1, b: 2};
 * mySet.add(o);
 *
 * mySet.has(1); // true
 * mySet.has(3); // false, 3 has not been added to the set
 * mySet.has(5);              // true
 * mySet.has(Math.sqrt(25));  // true
 * mySet.has("Some Text".toLowerCase()); // true
 * mySet.has(o); // true
 *
 * mySet.size; // 4
 *
 * mySet.delete(5); // removes 5 from the set
 * mySet.has(5);    // false, 5 has been removed
 *
 * mySet.size; // 3, we just removed one value
 *
 * // Relation with Array objects
 *
 * var myArray = ["value1", "value2", "value3"];
 *
 * // Use the regular Set constructor to transform an Array into a Set
 * var mySet = new Set(myArray);
 *
 * mySet.has("value1"); // returns true
 *
 * // Use the spread operator to transform a set into an Array.
 * console.log(uneval([...mySet])); // Will show you exactly the same Array
 *                                  // as myArray
 */
var SetObject = function Set() {
  if (Boolean(this) === false || (this instanceof SetObject) === false) {
    throw new TypeError('Constructor Set requires \'new\'');
  }

  parseIterable('set', this, arguments.length ? arguments[0] : void 0);
};

defineProperties(SetObject.prototype, /** @lends module:collections-x.Set.prototype */ {
  /**
   * The add() method appends a new element with a specified value to the end
   * of a Set object.
   *
   * @param {*} value - Required. The value of the element to add to the Set
   *  object.
   * @returns {Object} The Set object.
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   *
   * mySet.add(1);
   * mySet.add(5).add("some text"); // chainable
   *
   * console.log(mySet);
   * // Set [1, 5, "some text"]
   */
  add: {
    value: function add(value) {
      return baseAddSet('set', this, value);
    }
  },
  /**
   * The clear() method removes all elements from a Set object.
   *
   * @returns {Object} The Set object.
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   * mySet.add(1);
   * mySet.add("foo");
   *
   * mySet.size;       // 2
   * mySet.has("foo"); // true
   *
   * mySet.clear();
   *
   * mySet.size;       // 0
   * mySet.has("bar")  // false
   */
  clear: {
    value: function clear() {
      return baseClear('set', this);
    }
  },
  /**
   * The delete() method removes the specified element from a Set object.
   *
   * @param {*} value - The value of the element to remove from the Set object.
   * @returns {boolean} Returns true if an element in the Set object has been
   *  removed successfully; otherwise false.
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   * mySet.add("foo");
   *
   * mySet.delete("bar"); // Returns false. No "bar" element found
   *                      //to be deleted.
   * mySet.delete("foo"); // Returns true.  Successfully removed.
   *
   * mySet.has("foo");    // Returns false. The "foo" element is no
   *                      //longer present.
   */
  'delete': {
    value: function de1ete(value) {
      return baseDelete('set', this, value);
    }
  },
  /**
   * The entries() method returns a new Iterator object that contains an
   * array of [value, value] for each element in the Set object, in
   * insertion order. For Set objects there is no key like in Map objects.
   * However, to keep the API similar to the Map object, each entry has the
   * same value for its key and value here, so that an array [value, value]
   * is returned.
   *
   * @function
   * @returns {Object} A new Iterator object.
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   * mySet.add("foobar");
   * mySet.add(1);
   * mySet.add("baz");
   *
   * var setIter = mySet.entries();
   *
   * console.log(setIter.next().value); // ["foobar", "foobar"]
   * console.log(setIter.next().value); // [1, 1]
   * console.log(setIter.next().value); // ["baz", "baz"]
   */
  entries: {
    value: function entries() {
      return new SetIt(this, 'key+value');
    }
  },
  /**
   * The forEach() method executes a provided function once per each value
   * in the Set object, in insertion order.
   *
   * @param {Function} callback - Function to execute for each element.
   * @param {*} [thisArg] - Value to use as this when executing callback.
   * @returns {Object} The Set object.
   * @example
   * function logSetElements(value1, value2, set) {
   *     console.log("s[" + value1 + "] = " + value2);
   * }
   *
   * new Set(["foo", "bar", undefined]).forEach(logSetElements);
   *
   * // logs:
   * // "s[foo] = foo"
   * // "s[bar] = bar"
   * // "s[undefined] = undefined"
   */
  forEach: {
    value: function forEach(callback, thisArg) {
      return baseForEach('set', this, callback, thisArg);
    }
  },
  /**
   * The has() method returns a boolean indicating whether an element with the
   * specified value exists in a Set object or not.
   *
   * @function
   * @param {*} value - The value to test for presence in the Set object.
   * @returns {boolean} Returns true if an element with the specified value
   *  exists in the Set object; otherwise false.
   * @example
   * var Set = require('collections-x').Set;
   * var mySet = new Set();
   * mySet.add("foo");
   *
   * mySet.has("foo");  // returns true
   * mySet.has("bar");  // returns false
   */
  has: {
    value: baseHas
  },
  /**
   * The keys() method is an alias for the `values` method (for similarity
   * with Map objects); it behaves exactly the same and returns values of
   * Set elements.
   *
   * @function
   * @returns {Object} A new Iterator object.
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   * mySet.add("foo");
   * mySet.add("bar");
   * mySet.add("baz");
   *
   * var setIter = mySet.keys();
   *
   * console.log(setIter.next().value); // "foo"
   * console.log(setIter.next().value); // "bar"
   * console.log(setIter.next().value); // "baz"
   */
  keys: {
    value: setValuesIterator
  },
  /**
   * The value of size is an integer representing how many entries the Set
   * object has.
   *
   * @name size
   * @memberof module:collections-x.Set
   * @instance
   * @type {number}
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   * mySet.add(1);
   * mySet.add(5);
   * mySet.add("some text");
   *
   * mySet.size; // 3
   */
  size: {
    value: 0,
    writable: true
  },
  /**
   * The values() method returns a new Iterator object that contains the
   * values for each element in the Set object in insertion order.
   *
   * @function
   * @returns {Object} A new Iterator object.
   * @example
   * var Set = require('collections-x').Set
   * var mySet = new Set();
   * mySet.add("foo");
   * mySet.add("bar");
   * mySet.add("baz");
   *
   * var setIter = mySet.values();
   *
   * console.log(setIter.next().value); // "foo"
   * console.log(setIter.next().value); // "bar"
   * console.log(setIter.next().value); // "baz"
   */
  values: {
    value: setValuesIterator
  }
});

/**
 * The initial value of the @@iterator property is the same function object
 * as the initial value of the values property.
 *
 * @function symIt
 * @memberof module:collections-x.Set.prototype
 * @returns {Object} A new Iterator object.
 * @example
 * var Set = require('collections-x').Set,
 * var symIt = var Set = require('collections-x').symIt;
 * var mySet = new Set();
 * mySet.add("0");
 * mySet.add(1);
 * mySet.add({});
 *
 * var setIter = mySet[symIt]();
 *
 * console.log(setIter.next().value); // "0"
 * console.log(setIter.next().value); // 1
 * console.log(setIter.next().value); // Object
 */
defineProperty(SetObject.prototype, symIt, {
  value: setValuesIterator
});

/**
 * An object is an iterator when it knows how to access items from a
 * collection one at a time, while keeping track of its current position
 * within that sequence. In JavaScript an iterator is an object that provides
 * a next() method which returns the next item in the sequence. This method
 * returns an object with two properties: done and value. Once created,
 * an iterator object can be used explicitly by repeatedly calling next().
 *
 * @private
 * @class
 * @param {Object} context - The Map object.
 * @param {string} iteratorKind - Values are `value`, `key` or `key+value`.
 */
var MapIt = function MapIterator(context, iteratorKind) {
  defineProperties(this, {
    '[[IteratorHasMore]]': {
      value: true,
      writable: true
    },
    '[[Map]]': {
      value: assertIsObject(context)
    },
    '[[MapIterationKind]]': {
      value: iteratorKind
    },
    '[[MapNextIndex]]': {
      value: 0,
      writable: true
    }
  });
};

/**
 * Once initialized, the next() method can be called to access key-value
 * pairs from the object in turn.
 *
 * @private
 * @function next
 * @returns {Object} Returns an object with two properties: done and value.
 */
defineProperty(MapIt.prototype, 'next', {
  value: function next() {
    var context = assertIsObject(this['[[Map]]']);
    var index = this['[[MapNextIndex]]'];
    var iteratorKind = this['[[MapIterationKind]]'];
    var more = this['[[IteratorHasMore]]'];
    var object;
    assertIsObject(context);
    if (index < context['[[key]]'].length && more) {
      object = { done: false };
      if (iteratorKind === 'key+value') {
        object.value = [context['[[key]]'][index], context['[[value]]'][index]];
      } else {
        object.value = context['[[' + iteratorKind + ']]'][index];
      }

      this['[[MapNextIndex]]'] += 1;
    } else {
      this['[[IteratorHasMore]]'] = false;
      object = {
        done: true,
        value: void 0
      };
    }

    return object;
  }
});

/**
 * The @@iterator property is the same Iterator object.
 *
 * @private
 * @function symIt
 * @memberof MapIterator.prototype
 * @returns {Object} This Iterator object.
 */
defineProperty(MapIt.prototype, symIt, {
  value: function iterator() {
    return this;
  }
});

/**
 * The Map object is a simple key/value map. Any value (both objects and
 * primitive values) may be used as either a key or a value.
 *
 * @class Map
 * @private
 * @param {*} [iterable] - Iterable is an Array or other iterable object whose
 *  elements are key-value pairs (2-element Arrays). Each key-value pair is
 *  added to the new Map. null is treated as undefined.
 * @example
 * var Map = require('collections-x').Map;
 * var myMap = new Map();
 *
 * var keyString = "a string",
 *     keyObj = {},
 *     keyFunc = function () {};
 *
 * // setting the values
 * myMap.set(keyString, "value associated with 'a string'");
 * myMap.set(keyObj, "value associated with keyObj");
 * myMap.set(keyFunc, "value associated with keyFunc");
 *
 * myMap.size; // 3
 *
 * // getting the values
 * myMap.get(keyString);    // "value associated with 'a string'"
 * myMap.get(keyObj);       // "value associated with keyObj"
 * myMap.get(keyFunc);      // "value associated with keyFunc"
 *
 * myMap.get("a string");   // "value associated with 'a string'"
 *                          // because keyString === 'a string'
 * myMap.get({});           // undefined, because keyObj !== {}
 * myMap.get(function() {}) // undefined, because keyFunc !== function () {}
 *
 * // Using NaN as Map keys
 * var myMap = new Map();
 * myMap.set(NaN, "not a number");
 *
 * myMap.get(NaN); // "not a number"
 *
 * var otherNaN = Number("foo");
 * myMap.get(otherNaN); // "not a number"
 *
 * // Relation with Array objects
 * var kvArray = [["key1", "value1"], ["key2", "value2"]];
 *
 * // Use the regular Map constructor to transform a
 * // 2D key-value Array into a map
 * var myMap = new Map(kvArray);
 *
 * myMap.get("key1"); // returns "value1"
 */
var MapObject = function Map() {
  if (Boolean(this) === false || (this instanceof MapObject) === false) {
    throw new TypeError('Constructor Map requires \'new\'');
  }

  parseIterable('map', this, arguments.length ? arguments[0] : void 0);
};

defineProperties(MapObject.prototype, /** @lends module:collections-x.Map.prototype */ {
  /**
   * The clear() method removes all elements from a Map object.
   *
   * @returns {Object} The Map object.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("bar", "baz");
   * myMap.set(1, "foo");
   *
   * myMap.size;       // 2
   * myMap.has("bar"); // true
   *
   * myMap.clear();
   *
   * myMap.size;       // 0
   * myMap.has("bar")  // false
   */
  clear: {
    value: function clear() {
      return baseClear('map', this);
    }
  },
  /**
   * The delete() method removes the specified element from a Map object.
   *
   * @param {*} key - The key of the element to remove from the Map object.
   * @returns {boolean} Returns true if an element in the Map object has been
   *  removed successfully.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("bar", "foo");
   *
   * myMap.delete("bar"); // Returns true. Successfully removed.
   * myMap.has("bar");    // Returns false.
   *                      // The "bar" element is no longer present.
   */
  'delete': {
    value: function de1ete(key) {
      return baseDelete('map', this, key);
    }
  },
  /**
   * The entries() method returns a new Iterator object that contains the
   * [key, value] pairs for each element in the Map object in insertion order.
   *
   * @returns {Object} A new Iterator object.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("0", "foo");
   * myMap.set(1, "bar");
   * myMap.set({}, "baz");
   *
   * var mapIter = myMap.entries();
   *
   * console.log(mapIter.next().value); // ["0", "foo"]
   * console.log(mapIter.next().value); // [1, "bar"]
   * console.log(mapIter.next().value); // [Object, "baz"]
   */
  entries: {
    value: function entries() {
      return new MapIt(this, 'key+value');
    }
  },
  /**
   * The forEach() method executes a provided function once per each
   * key/value pair in the Map object, in insertion order.
   *
   * @param {Function} callback - Function to execute for each element..
   * @param {*} [thisArg] - Value to use as this when executing callback.
   * @returns {Object} The Map object.
   * @example
   * var Map = require('collections-x').Map;
   * function logElements(value, key, map) {
   *      console.log("m[" + key + "] = " + value);
   * }
   * var myMap = new Map([["foo", 3], ["bar", {}], ["baz", undefined]]);
   * myMap.forEach(logElements);
   * // logs:
   * // "m[foo] = 3"
   * // "m[bar] = [object Object]"
   * // "m[baz] = undefined"
   */
  forEach: {
    value: function forEach(callback, thisArg) {
      return baseForEach('map', this, callback, thisArg);
    }
  },
  /**
   * The get() method returns a specified element from a Map object.
   *
   * @param {*} key - The key of the element to return from the Map object.
   * @returns {*} Returns the element associated with the specified key or
   *  undefined if the key can't be found in the Map object.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("bar", "foo");
   *
   * myMap.get("bar");  // Returns "foo".
   * myMap.get("baz");  // Returns undefined.
   */
  get: {
    value: function get(key) {
      var index = indexOf(
        assertIsObject(this)['[[key]]'],
        key,
        'SameValueZero'
      );

      return index > -1 ? this['[[value]]'][index] : void 0;
    }
  },
  /**
   * The has() method returns a boolean indicating whether an element with
   * the specified key exists or not.
   *
   * @function
   * @param {*} key - The key of the element to test for presence in the
   *  Map object.
   * @returns {boolean} Returns true if an element with the specified key
   *  exists in the Map object; otherwise false.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("bar", "foo");
   *
   * myMap.has("bar");  // returns true
   * myMap.has("baz");  // returns false
   */
  has: {
    value: baseHas
  },
  /**
   * The keys() method returns a new Iterator object that contains the keys
   * for each element in the Map object in insertion order.
   *
   * @returns {Object} A new Iterator object.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("0", "foo");
   * myMap.set(1, "bar");
   * myMap.set({}, "baz");
   *
   * var mapIter = myMap.keys();
   *
   * console.log(mapIter.next().value); // "0"
   * console.log(mapIter.next().value); // 1
   * console.log(mapIter.next().value); // Object
   */
  keys: {
    value: function keys() {
      return new MapIt(this, 'key');
    }
  },
  /**
   * The set() method adds a new element with a specified key and value to
   * a Map object.
   *
   * @param {*} key - The key of the element to add to the Map object.
   * @param {*} value - The value of the element to add to the Map object.
   * @returns {Object} The Map object.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   *
   * // Add new elements to the map
   * myMap.set("bar", "foo");
   * myMap.set(1, "foobar");
   *
   * // Update an element in the map
   * myMap.set("bar", "fuuu");
   */
  set: {
    value: function set(key, value) {
      return baseAddSet('map', this, key, value);
    }
  },
  /**
   * The value of size is an integer representing how many entries the Map
   * object has.
   *
   * @name size
   * @memberof module:collections-x.Map
   * @instance
   * @type {number}
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set(1, true);
   * myMap.set(5, false);
   * myMap.set("some text", 1);
   *
   * myMap.size; // 3
   */
  size: {
    value: 0,
    writable: true
  },
  /**
   * The values() method returns a new Iterator object that contains the
   * values for each element in the Map object in insertion order.
   *
   * @returns {Object} A new Iterator object.
   * @example
   * var Map = require('collections-x').Map;
   * var myMap = new Map();
   * myMap.set("0", "foo");
   * myMap.set(1, "bar");
   * myMap.set({}, "baz");
   *
   * var mapIter = myMap.values();
   *
   * console.log(mapIter.next().value); // "foo"
   * console.log(mapIter.next().value); // "bar"
   * console.log(mapIter.next().value); // "baz"
   */
  values: {
    value: function values() {
      return new MapIt(this, 'value');
    }
  }
});

/**
 * The initial value of the @@iterator property is the same function object
 * as the initial value of the entries property.
 *
 * @function symIt
 * @memberof module:collections-x.Map.prototype
 * @returns {Object} A new Iterator object.
 * @example
 * var Map = require('collections-x').Map;
 * var symIt = require('collections-x').symIt;
 * var myMap = new Map();
 * myMap.set("0", "foo");
 * myMap.set(1, "bar");
 * myMap.set({}, "baz");
 *
 * var mapIter = myMap[symIt]();
 *
 * console.log(mapIter.next().value); // ["0", "foo"]
 * console.log(mapIter.next().value); // [1, "bar"]
 * console.log(mapIter.next().value); // [Object, "baz"]
 */
defineProperty(MapObject.prototype, symIt, {
  value: MapObject.prototype.entries
});

/*
 * Determine whether to use shim or native.
 */

var ExportMap = MapObject;
try {
  ExportMap = new Map() ? Map : MapObject;
} catch (ignore) {}

var ExportSet = SetObject;
try {
  ExportSet = new Set() ? Set : SetObject;
} catch (ignore) {}

var testMap;

if (ExportMap !== MapObject) {
  testMap = new ExportMap();
  if (isNumberType(testMap.size) === false || testMap.size !== 0) {
    ExportMap = MapObject;
  } else {
    var propsMap = [
      'has',
      'set',
      'clear',
      'delete',
      'forEach',
      'values',
      'entries',
      'keys',
      symIt
    ];

    var failedMap = some(propsMap, function (method) {
      return isFunction(testMap[method]) === false;
    });

    if (failedMap) {
      ExportMap = MapObject;
    }
  }
}

if (ExportMap !== MapObject) {
  // Safari 8, for example, doesn't accept an iterable.
  var mapAcceptsArguments = false;
  try {
    mapAcceptsArguments = new ExportMap([[1, 2]]).get(1) === 2;
  } catch (ignore) {}

  if (mapAcceptsArguments === false) {
    ExportMap = MapObject;
  }
}

if (ExportMap !== MapObject) {
  testMap = new ExportMap();
  var mapSupportsChaining = testMap.set(1, 2) === testMap;
  if (mapSupportsChaining === false) {
    ExportMap = MapObject;
  }
}

if (ExportMap !== MapObject) {
  // Chrome 38-42, node 0.11/0.12, iojs 1/2 also have a bug when the Map has a size > 4
  testMap = new ExportMap([
    [1, 0],
    [2, 0],
    [3, 0],
    [4, 0]
  ]);
  testMap.set(-0, testMap);
  var gets = testMap.get(0) === testMap && testMap.get(-0) === testMap;
  var mapUsesSameValueZero = gets && testMap.has(0) && testMap.has(-0);

  if (mapUsesSameValueZero === false) {
    ExportMap = MapObject;
  }
}

if (ExportMap !== MapObject) {
  if (Object.setPrototypeOf) {
    var MyMap = function (arg) {
      testMap = new ExportMap(arg);
      Object.setPrototypeOf(testMap, MyMap.prototype);
      return testMap;
    };
    Object.setPrototypeOf(MyMap, ExportMap);
    MyMap.prototype = Object.create(ExportMap.prototype, { constructor: { value: MyMap } });

    var mapSupportsSubclassing = false;
    try {
      testMap = new MyMap([]);
      // Firefox 32 is ok with the instantiating the subclass but will
      // throw when the map is used.
      testMap.set(42, 42);
      mapSupportsSubclassing = testMap instanceof MyMap;
    } catch (ignore) {}

    if (mapSupportsSubclassing === false) {
      ExportMap = MapObject;
    }
  }
}

if (ExportMap !== MapObject) {
  var mapRequiresNew;
  try {
    // eslint-disable-next-line new-cap
    mapRequiresNew = (ExportMap() instanceof ExportMap) === false;
  } catch (e) {
    mapRequiresNew = e instanceof TypeError;
  }

  if (mapRequiresNew === false) {
    ExportMap = MapObject;
  }
}

if (ExportMap !== MapObject) {
  testMap = new ExportMap();
  // eslint-disable-next-line id-length
  var mapIterationThrowsStopIterator;
  try {
    mapIterationThrowsStopIterator = testMap.keys().next().done === false;
  } catch (ignore) {
    mapIterationThrowsStopIterator = true;
  }

  if (mapIterationThrowsStopIterator) {
    ExportMap = MapObject;
  }
}

// Safari 8
if (ExportMap !== MapObject && isFunction(new ExportMap().keys().next) === false) {
  ExportMap = MapObject;
}

if (hasRealSymbolIterator && ExportMap !== MapObject) {
  var testMapProto = getPrototypeOf(new ExportMap().keys());
  var hasBuggyMapIterator = true;
  if (testMapProto) {
    hasBuggyMapIterator = isFunction(testMapProto[symIt]) === false;
  }

  if (hasBuggyMapIterator) {
    ExportMap = MapObject;
  }
}

var testSet;

if (ExportSet !== SetObject) {
  testSet = new ExportSet();
  if (isNumberType(testSet.size) === false || testSet.size !== 0) {
    ExportMap = MapObject;
  } else {
    var propsSet = [
      'has',
      'add',
      'clear',
      'delete',
      'forEach',
      'values',
      'entries',
      'keys',
      symIt
    ];

    var failedSet = some(propsSet, function (method) {
      return isFunction(testSet[method]) === false;
    });

    if (failedSet) {
      ExportSet = SetObject;
    }
  }
}

if (ExportSet !== SetObject) {
  testSet = new ExportSet();
  testSet['delete'](0);
  testSet.add(-0);
  var setUsesSameValueZero = testSet.has(0) && testSet.has(-0);
  if (setUsesSameValueZero === false) {
    ExportSet = SetObject;
  }
}

if (ExportSet !== SetObject) {
  testSet = new ExportSet();
  var setSupportsChaining = testSet.add(1) === testSet;
  if (setSupportsChaining === false) {
    ExportSet = SetObject;
  }
}

if (ExportSet !== SetObject) {
  if (Object.setPrototypeOf) {
    var MySet = function (arg) {
      testSet = new ExportSet(arg);
      Object.setPrototypeOf(testSet, MySet.prototype);
      return testSet;
    };
    Object.setPrototypeOf(MySet, ExportSet);
    MySet.prototype = Object.create(ExportSet.prototype, { constructor: { value: MySet } });

    var setSupportsSubclassing = false;
    try {
      testSet = new MySet([]);
      testSet.add(42, 42);
      setSupportsSubclassing = testSet instanceof MySet;
    } catch (ignore) {}

    if (setSupportsSubclassing === false) {
      ExportSet = SetObject;
    }
  }
}

if (ExportSet !== SetObject) {
  var setRequiresNew;
  try {
    // eslint-disable-next-line new-cap
    setRequiresNew = (ExportSet() instanceof ExportSet) === false;
  } catch (e) {
    setRequiresNew = e instanceof TypeError;
  }

  if (setRequiresNew === false) {
    ExportSet = SetObject;
  }
}

if (ExportSet !== SetObject) {
  testSet = new ExportSet();
  // eslint-disable-next-line id-length
  var setIterationThrowsStopIterator;
  try {
    setIterationThrowsStopIterator = testSet.keys().next().done === false;
  } catch (ignore) {
    setIterationThrowsStopIterator = true;
  }

  if (setIterationThrowsStopIterator) {
    ExportSet = SetObject;
  }
}

// Safari 8
if (ExportSet !== SetObject && isFunction(new ExportSet().keys().next) === false) {
  ExportSet = SetObject;
}

if (hasRealSymbolIterator && ExportSet !== SetObject) {
  var testSetProto = getPrototypeOf(new ExportSet().keys());
  var hasBuggySetIterator = true;
  if (testSetProto) {
    hasBuggySetIterator = isFunction(testSetProto[symIt]) === false;
  }

  if (hasBuggySetIterator) {
    ExportSet = SetObject;
  }
}

var hasCommon = function _hasCommon(object) {
  return isObjectLike(object) && isFunction(object[symIt]) && isBoolean(object['[[changed]]']) && isObjectLike(object['[[id]]']) && isArray(object['[[key]]']) && isArray(object['[[order]]']) && isNumberType(object.size);
};

var $isMap;
if (ExportMap === MapObject) {
  $isMap = function _isMap(object) {
    if (isMap(object)) {
      return true;
    }

    return hasCommon(object) && isArray(object['[[value]]']);
  };
} else {
  $isMap = isMap;
}

var $isSet;
if (ExportSet === SetObject) {
  $isSet = function _isSet(object) {
    if (isSet(object)) {
      return true;
    }

    return hasCommon(object) && isUndefined(object['[[value]]']);
  };
} else {
  $isSet = isSet;
}

/*
 * Exports.
 */

module.exports = {
  /**
   * Determine if an `object` is a `Map`.
   *
   * @param {*} object - The object to test.
   * @returns {boolean} `true` if the `object` is a `Map`,
   *  else `false`.
   * @example
   * var isMap = require('collections-x').isMap;
   * var m = new Map();
   *
   * isMap([]); // false
   * isMap(true); // false
   * isMap(m); // true
   */
  isMap: $isMap,
  /**
   * Determine if an `object` is a `Set`.
   *
   * @param {*} object - The object to test.
   * @returns {boolean} `true` if the `object` is a `Set`,
   *  else `false`.
   * @example
   * var isSet = require('collections-x');
   * var s = new Set();
   *
   * isSet([]); // false
   * isSet(true); // false
   * isSet(s); // true
   */
  isSet: $isSet,
  /** @borrows Map as Map */
  Map: ExportMap,
  /** @borrows Set as Set */
  Set: ExportSet,
  /**
   * The iterator identifier that is in use.
   *
   * type {Symbol|string}
   */
  symIt: symIt
};

},{"array-some-x":25,"assert-is-function-x":30,"assert-is-object-x":31,"big-counter-x":33,"get-prototype-of-x":68,"has-own-property-x":42,"has-symbol-support-x":72,"index-of-x":77,"is-array-like-x":100,"is-array-x":101,"is-boolean-object":103,"is-function-x":110,"is-map-x":115,"is-nil-x":122,"is-object-like-x":124,"is-primitive":126,"is-set-x":133,"is-string":134,"is-surrogate-pair-x":135,"object-define-properties-x":317,"object-define-property-x":318,"validate.io-undefined":356}],42:[function(require,module,exports){
/**
 * @file Used to determine whether an object has an own property with the specified property key.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-hasownproperty|7.3.11 HasOwnProperty (O, P)}
 * @version 2.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-own-property-x
 */

'use strict';

var toObject = require('to-object-x');
var toPrimitive = require('es-to-primitive/es6');
var safeToString = require('safe-to-string-x');
var isSymbol = require('is-symbol');
var hop = Object.prototype.hasOwnProperty;

/**
 * The `hasOwnProperty` method returns a boolean indicating whether
 * the `object` has the specified `property`. Does not attempt to fix known
 * issues in older browsers, but does ES6ify the method.
 *
 * @param {!Object} object - The object to test.
 * @param {string|Symbol} property - The name or Symbol of the property to test.
 * @returns {boolean} `true` if the property is set on `object`, else `false`.
 * @example
 * var hasOwnProperty = require('has-own-property-x');
 * var o = {
 *   foo: 'bar'
 * };
 *
 *
 * hasOwnProperty(o, 'bar'); // false
 * hasOwnProperty(o, 'foo'); // true
 * hasOwnProperty(undefined, 'foo');
 *                   // TypeError: Cannot convert undefined or null to object
 */
module.exports = function hasOwnProperty(object, property) {
  var prop = isSymbol(property) ? property : safeToString(toPrimitive(property, String));

  return hop.call(toObject(object), prop);
};

},{"es-to-primitive/es6":50,"is-symbol":136,"safe-to-string-x":331,"to-object-x":344}],43:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],44:[function(require,module,exports){
// Console-polyfill. MIT license.
// https://github.com/paulmillr/console-polyfill
// Make it safe to do console.log() always.
(function(global) {
  'use strict';
  if (!global.console) {
    global.console = {};
  }
  var con = global.console;
  var prop, method;
  var dummy = function() {};
  var properties = ['memory'];
  var methods = ('assert,clear,count,debug,dir,dirxml,error,exception,group,' +
     'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
     'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',');
  while (prop = properties.pop()) if (!con[prop]) con[prop] = {};
  while (method = methods.pop()) if (!con[method]) con[method] = dummy;
  // Using `this` for web workers & supports Browserify / Webpack.
})(typeof window === 'undefined' ? this : window);

},{}],45:[function(require,module,exports){
/**
 * cuid.js
 * Collision-resistant UID generator for browsers and node.
 * Sequential for fast db lookups and recency sorting.
 * Safe for element IDs and server-side lookups.
 *
 * Extracted from CLCTR
 *
 * Copyright (c) Eric Elliott 2012
 * MIT License
 */

var fingerprint = require('./lib/fingerprint.js');
var pad = require('./lib/pad.js');

var c = 0,
  blockSize = 4,
  base = 36,
  discreteValues = Math.pow(base, blockSize);

function randomBlock () {
  return pad((Math.random() *
    discreteValues << 0)
    .toString(base), blockSize);
}

function safeCounter () {
  c = c < discreteValues ? c : 0;
  c++; // this is not subliminal
  return c - 1;
}

function cuid () {
  // Starting with a lowercase letter makes
  // it HTML element ID friendly.
  var letter = 'c', // hard-coded allows for sequential access

    // timestamp
    // warning: this exposes the exact date and time
    // that the uid was created.
    timestamp = (new Date().getTime()).toString(base),

    // Prevent same-machine collisions.
    counter = pad(safeCounter().toString(base), blockSize),

    // A few chars to generate distinct ids for different
    // clients (so different computers are far less
    // likely to generate the same id)
    print = fingerprint(),

    // Grab some more chars from Math.random()
    random = randomBlock() + randomBlock();

  return letter + timestamp + counter + print + random;
}

cuid.slug = function slug () {
  var date = new Date().getTime().toString(36),
    counter = safeCounter().toString(36).slice(-4),
    print = fingerprint().slice(0, 1) +
      fingerprint().slice(-1),
    random = randomBlock().slice(-2);

  return date.slice(-2) +
    counter + print + random;
};

cuid.isCuid = function isCuid (stringToCheck) {
  if (typeof stringToCheck !== 'string') return false;
  if (stringToCheck.startsWith('c')) return true;
  return false;
};

cuid.isSlug = function isSlug (stringToCheck) {
  if (typeof stringToCheck !== 'string') return false;
  var stringLength = stringToCheck.length;
  if (stringLength >= 7 && stringLength <= 10) return true;
  return false;
};

cuid.fingerprint = fingerprint;

module.exports = cuid;

},{"./lib/fingerprint.js":46,"./lib/pad.js":47}],46:[function(require,module,exports){
var pad = require('./pad.js');

var env = typeof window === 'object' ? window : self;
var globalCount = Object.keys(env).length;
var mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;
var clientId = pad((mimeTypesLength +
  navigator.userAgent.length).toString(36) +
  globalCount.toString(36), 4);

module.exports = function fingerprint () {
  return clientId;
};

},{"./pad.js":47}],47:[function(require,module,exports){
module.exports = function pad (num, size) {
  var s = '000000000' + num;
  return s.substr(s.length - size);
};

},{}],48:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"object-keys":321}],49:[function(require,module,exports){
'use strict';

var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

var isPrimitive = require('./helpers/isPrimitive');
var isCallable = require('is-callable');
var isDate = require('is-date-object');
var isSymbol = require('is-symbol');

var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
	if (typeof O === 'undefined' || O === null) {
		throw new TypeError('Cannot call method on ' + O);
	}
	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
		throw new TypeError('hint must be "string" or "number"');
	}
	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
	var method, result, i;
	for (i = 0; i < methodNames.length; ++i) {
		method = O[methodNames[i]];
		if (isCallable(method)) {
			result = method.call(O);
			if (isPrimitive(result)) {
				return result;
			}
		}
	}
	throw new TypeError('No default value');
};

var GetMethod = function GetMethod(O, P) {
	var func = O[P];
	if (func !== null && typeof func !== 'undefined') {
		if (!isCallable(func)) {
			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
		}
		return func;
	}
	return void 0;
};

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	var hint = 'default';
	if (arguments.length > 1) {
		if (arguments[1] === String) {
			hint = 'string';
		} else if (arguments[1] === Number) {
			hint = 'number';
		}
	}

	var exoticToPrim;
	if (hasSymbols) {
		if (Symbol.toPrimitive) {
			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
		} else if (isSymbol(input)) {
			exoticToPrim = Symbol.prototype.valueOf;
		}
	}
	if (typeof exoticToPrim !== 'undefined') {
		var result = exoticToPrim.call(input, hint);
		if (isPrimitive(result)) {
			return result;
		}
		throw new TypeError('unable to convert exotic object to primitive');
	}
	if (hint === 'default' && (isDate(input) || isSymbol(input))) {
		hint = 'string';
	}
	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};

},{"./helpers/isPrimitive":51,"is-callable":104,"is-date-object":106,"is-symbol":136}],50:[function(require,module,exports){
'use strict';

module.exports = require('./es2015');

},{"./es2015":49}],51:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],52:[function(require,module,exports){
module.exports = stringify
stringify.default = stringify
stringify.stable = deterministicStringify
stringify.stableStringify = deterministicStringify

var arr = []

// Regular stringify
function stringify (obj, replacer, spacer) {
  decirc(obj, '', [], undefined)
  var res = JSON.stringify(obj, replacer, spacer)
  while (arr.length !== 0) {
    var part = arr.pop()
    part[0][part[1]] = part[2]
  }
  return res
}
function decirc (val, k, stack, parent) {
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        parent[k] = '[Circular]'
        arr.push([parent, k, val])
        return
      }
    }
    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        decirc(val[i], i, stack, val)
      }
    } else {
      var keys = Object.keys(val)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        decirc(val[key], key, stack, val)
      }
    }
    stack.pop()
  }
}

// Stable-stringify
function compareFunction (a, b) {
  if (a < b) {
    return -1
  }
  if (a > b) {
    return 1
  }
  return 0
}

function deterministicStringify (obj, replacer, spacer) {
  var tmp = deterministicDecirc(obj, '', [], undefined) || obj
  var res = JSON.stringify(tmp, replacer, spacer)
  while (arr.length !== 0) {
    var part = arr.pop()
    part[0][part[1]] = part[2]
  }
  return res
}

function deterministicDecirc (val, k, stack, parent) {
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        parent[k] = '[Circular]'
        arr.push([parent, k, val])
        return
      }
    }
    if (typeof val.toJSON === 'function') {
      return
    }
    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        deterministicDecirc(val[i], i, stack, val)
      }
    } else {
      // Create a temporary object in the required way
      var tmp = {}
      var keys = Object.keys(val).sort(compareFunction)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        deterministicDecirc(val[key], key, stack, val)
        tmp[key] = val[key]
      }
      if (parent !== undefined) {
        arr.push([parent, k, val])
        parent[k] = tmp
      } else {
        return tmp
      }
    }
    stack.pop()
  }
}

},{}],53:[function(require,module,exports){
/**
 * @file This method returns the index of the first element in the array that satisfies the provided testing function.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module find-index-x
 */

'use strict';

var pFindIndex = Array.prototype.findIndex;

// eslint-disable-next-line no-sparse-arrays
var implemented = pFindIndex && ([, 1].findIndex(function (item, idx) {
  return idx === 0;
}) === 0);

var findIdx;
if (implemented) {
  findIdx = function findIndex(array, callback) {
    var args = [callback];
    if (arguments.length > 2) {
      args[1] = arguments[2];
    }

    return pFindIndex.apply(array, args);
  };
} else {
  var toLength = require('to-length-x');
  var toObject = require('to-object-x');
  var isString = require('is-string');
  var assertIsFunction = require('assert-is-function-x');
  var splitString = require('has-boxed-string-x') === false;

  findIdx = function findIndex(array, callback) {
    var object = toObject(array);
    assertIsFunction(callback);
    var iterable = splitString && isString(object) ? object.split('') : object;
    var length = toLength(iterable.length);
    if (length < 1) {
      return -1;
    }

    var thisArg;
    if (arguments.length > 2) {
      thisArg = arguments[2];
    }

    var index = 0;
    while (index < length) {
      if (callback.call(thisArg, iterable[index], index, object)) {
        return index;
      }

      index += 1;
    }

    return -1;
  };
}

/**
 * Like `findIndex`, this method returns an index in the array, if an element
 * in the array satisfies the provided testing function. Otherwise -1 is returned.
 *
 * @param {Array} array - The array to search.
 * @throws {TypeError} If array is `null` or `undefined`-
 * @param {Function} callback - Function to execute on each value in the array,
 *  taking three arguments: `element`, `index` and `array`.
 * @throws {TypeError} If `callback` is not a function.
 * @param {*} [thisArg] - Object to use as `this` when executing `callback`.
 * @returns {number} Returns index of positively tested element, otherwise -1.
 * @example
 * var findIndex = require('find-index-x');
 *
 * function isPrime(element, index, array) {
 *   var start = 2;
 *   while (start <= Math.sqrt(element)) {
 *     if (element % start++ < 1) {
 *       return false;
 *     }
 *   }
 *   return element > 1;
 * }
 *
 * console.log(findIndex([4, 6, 8, 12, 14], isPrime)); // -1, not found
 * console.log(findIndex([4, 6, 7, 12, 13], isPrime)); // 2
 */
module.exports = findIdx;

},{"assert-is-function-x":30,"has-boxed-string-x":69,"is-string":134,"to-length-x":57,"to-object-x":344}],54:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10,"is-nan":118,"max-safe-integer":300}],55:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"dup":11,"is-nan":118}],56:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"dup":12,"is-finite-x":54,"is-nan":118,"math-sign-x":55}],57:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"dup":13,"max-safe-integer":300,"to-integer-x":56}],58:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],59:[function(require,module,exports){
// these are known as "placeholder tokens", see this link for more info:
// <https://nodejs.org/api/util.html#util_util_format_format_args>
//
// since they aren't exposed (or don't seem to be) by node (at least not yet)
// we just define an array that contains them for now
// <https://github.com/nodejs/node/issues/17601>
// <https://github.com/nodejs/node/blob/7af1ad0ec15546761233c2e90008316551db2bbd/doc/api/util.md#utilformatformat-args>
module.exports = ['%s', '%d', '%i', '%f', '%j', '%o', '%O', '%%'];

},{}],60:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],61:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":60}],62:[function(require,module,exports){
/**
 * @file Get the name of the function.
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module get-function-name-x
 */

'use strict';

var isFunction = require('is-function-x');
var functionCtr = function () {}.constructor;

var getName;
var t = function test1() {};
if (t.name === 'test1') {
  var createsAnonymous = functionCtr().name === 'anonymous';
  getName = function _getName(fn) {
    return createsAnonymous && fn.name === 'anonymous' ? '' : fn.name;
  };
} else {
  var replaceComments = require('replace-comments-x');
  var fToString = functionCtr.prototype.toString;
  var normalise = require('normalize-space-x').normalizeSpace2018;
  var reName = /^(?:async )?(?:function|class) ?(?:\* )?([\w$]+)/i;
  var stringMatch = require('cached-constructors-x').String.prototype.match;
  getName = function _getName(fn) {
    var match;
    try {
      match = stringMatch.call(normalise(replaceComments(fToString.call(fn), ' ')), reName);
      if (match) {
        var name = match[1];
        return name === 'anonymous' ? '' : name;
      }
    } catch (ignore) {}

    return '';
  };
}

/**
 * This method returns the name of the function, or `undefined` if not
 * a function.
 *
 * @param {Function} fn - The function to get the name of.
 * @returns {undefined|string} The name of the function,  or `undefined` if
 *  not a function.
 * @example
 * var getFunctionName = require('get-function-name-x');
 *
 * getFunctionName(); // undefined
 * getFunctionName(Number.MIN_VALUE); // undefined
 * getFunctionName('abc'); // undefined
 * getFunctionName(true); // undefined
 * getFunctionName({ name: 'abc' }); // undefined
 * getFunctionName(function () {}); // ''
 * getFunctionName(new Function ()); // ''
 * getFunctionName(function test1() {}); // 'test1'
 * getFunctionName(function* test2() {}); // 'test2'
 * getFunctionName(class Test {}); // 'Test'
 */
module.exports = function getFunctionName(fn) {
  return isFunction(fn, true) ? getName(fn) : void 0;
};

},{"cached-constructors-x":35,"is-function-x":110,"normalize-space-x":308,"replace-comments-x":328}],63:[function(require,module,exports){
/**
 * @file Like Object.getOwnPropertySymbols but gets only enumerable properties.
 * @version 1.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module get-own-enumerable-property-symbols-x
 */

'use strict';

var toObject = require('to-object-x');
var filter = require('array-filter-x');
var getOPS = require('get-own-property-symbols-x');
var propertyIsEnumerable = require('property-is-enumerable-x');

/**
 * This method returns only the enumerable own property symbols of an object.
 *
 * @param {Object} target - The target.
 * @throws {typeError} - If target is null or undefined.
 * @returns {Array} The enumerable own property symbols.
 * @example
 * var getOwnEnumerablePropertySymbols = require('get-own-enumerable-property-symbols-x');
 *
 * var obj = { bar: 1, foo: 2 };
 *
 * var symbol1 = Symbol('first');
 * Object.defineProperty(obj, symbo1l, {
 *   enumerable: false,
 *   value: 'first'
 * });
 *
 * var symbol2 = Symbol('second');
 * Object.defineProperty(obj, symbol2, {
 *   enumerable: true,
 *   value: 'second'
 * });
 *
 * getOwnEnumerablePropertySymbols(obj); // [symbol2]
 */
// eslint-disable-next-line id-length
module.exports = function getOwnEnumerablePropertySymbols(target) {
  var object = toObject(target);
  return filter(getOPS(object), function (symbol) {
    return propertyIsEnumerable(object, symbol);
  });
};

},{"array-filter-x":64,"get-own-property-symbols-x":67,"property-is-enumerable-x":326,"to-object-x":344}],64:[function(require,module,exports){
/**
 * @file Creates an array with all elements that pass the test by the provided function.
 * @version 2.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-filter-x
 */

'use strict';

var cachedCtrs = require('cached-constructors-x');
var ArrayCtr = cachedCtrs.Array;
var castObject = cachedCtrs.Object;
var nativFilter = typeof ArrayCtr.prototype.filter === 'function' && ArrayCtr.prototype.filter;

var isWorking;
if (nativFilter) {
  var attempt = require('attempt-x');
  var spy = 0;
  var res = attempt.call([1, 2], nativFilter, function (item) {
    spy += item;
    return false;
  });

  isWorking = res.threw === false && res.value && res.value.length === 0 && spy === 3;

  if (isWorking) {
    spy = '';
    res = attempt.call(castObject('abc'), nativFilter, function (item, index) {
      spy += item;
      return index === 1;
    });

    isWorking = res.threw === false && res.value && res.value.length === 1 && res.value[0] === 'b' && spy === 'abc';
  }

  if (isWorking) {
    spy = 0;
    res = attempt.call((function () {
      return arguments;
    }(1, 2, 3)), nativFilter, function (item, index) {
      spy += item;
      return index === 2;
    });

    isWorking = res.threw === false && res.value && res.value.length === 1 && res.value[0] === 3 && spy === 6;
  }

  if (isWorking) {
    spy = 0;
    res = attempt.call({
      0: 1,
      1: 2,
      3: 3,
      4: 4,
      length: 4
    }, nativFilter, function (item) {
      spy += item;
      return false;
    });

    isWorking = res.threw === false && res.value && res.value.length === 0 && spy === 6;
  }

  if (isWorking) {
    var doc = typeof document !== 'undefined' && document;
    if (doc) {
      spy = null;
      var fragment = doc.createDocumentFragment();
      var div = doc.createElement('div');
      fragment.appendChild(div);
      res = attempt.call(fragment.childNodes, nativFilter, function (item) {
        spy = item;
        return item;
      });

      isWorking = res.threw === false && res.value && res.value.length === 1 && res.value[0] === div && spy === div;
    }
  }

  if (isWorking) {
    var isStrict = (function () {
      // eslint-disable-next-line no-invalid-this
      return Boolean(this) === false;
    }());

    if (isStrict) {
      spy = null;
      res = attempt.call([1], nativFilter, function () {
        // eslint-disable-next-line no-invalid-this
        spy = typeof this === 'string';
      }, 'x');

      isWorking = res.threw === false && res.value && res.value.length === 0 && spy === true;
    }
  }

  if (isWorking) {
    spy = {};
    var fn = [
      'return nativFilter.call("foo", function (_, __, context) {',
      'if (Boolean(context) === false || typeof context !== "object") {',
      'spy.value = true;}});'
    ].join('');

    // eslint-disable-next-line no-new-func
    res = attempt(Function('nativFilter', 'spy', fn), nativFilter, spy);

    isWorking = res.threw === false && res.value && res.value.length === 0 && spy.value !== true;
  }
}

var $filter;
if (nativFilter) {
  $filter = function filter(array, callBack /* , thisArg */) {
    var args = [callBack];
    if (arguments.length > 2) {
      args[1] = arguments[2];
    }

    return nativFilter.apply(array, args);
  };
} else {
  var splitIfBoxedBug = require('split-if-boxed-bug-x');
  var toLength = require('to-length-x').toLength2018;
  var isUndefined = require('validate.io-undefined');
  var toObject = require('to-object-x');
  var assertIsFunction = require('assert-is-function-x');

  $filter = function filter(array, callBack /* , thisArg */) {
    var object = toObject(array);
    // If no callback function or if callback is not a callable function
    assertIsFunction(callBack);
    var iterable = splitIfBoxedBug(object);
    var length = toLength(iterable.length);
    var thisArg;
    if (arguments.length > 2) {
      thisArg = arguments[2];
    }

    var noThis = isUndefined(thisArg);
    var result = [];
    for (var i = 0; i < length; i += 1) {
      if (i in iterable) {
        var item = iterable[i];
        if (noThis ? callBack(item, i, object) : callBack.call(thisArg, item, i, object)) {
          result[result.length] = item;
        }
      }
    }

    return result;
  };
}

/**
 * This method creates a new array with all elements that pass the test
 * implemented by the provided function.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function is a predicate, to test each element.
 * @param {*} [thisArg] - Value to use as this when executing callback.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @returns {array} A new array with the elements that pass the test.
 * @example
 * var filter = require('array-filter-x');
 *
 * function isBigEnough(value) {
 *   return value >= 10;
 * }
 *
 * var filtered = filter([12, 5, 8, 130, 44], isBigEnough);
 * // filtered is [12, 130, 44]
 */
module.exports = $filter;

},{"assert-is-function-x":65,"attempt-x":32,"cached-constructors-x":35,"split-if-boxed-bug-x":334,"to-length-x":339,"to-object-x":344,"validate.io-undefined":356}],65:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"dup":16,"is-function-x":110,"is-primitive":126,"to-string-symbols-supported-x":347}],66:[function(require,module,exports){
/**
 * @file Creates an array of all properties (enumerable or not) found directly upon a given object.
 * @version 1.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module get-own-property-names-x
 */

'use strict';

var toObject = require('to-object-x');
var nativeGOPN = Object.getOwnPropertyNames;

var $gopn;
if (typeof nativeGOPN === 'function') {
  // eslint-disable-next-line id-length
  var objectGOPNAcceptsPrimitives;
  try {
    nativeGOPN('foo');
    objectGOPNAcceptsPrimitives = true;
  } catch (ignore) {}

  if (objectGOPNAcceptsPrimitives) {
    $gopn = nativeGOPN;
  } else {
    var toStringTag = require('to-string-tag-x');
    var concat = Array.prototype.concat;
    var cachedWindowNames = typeof window === 'object' ? nativeGOPN(window) : [];

    $gopn = function getOwnPropertyNames(obj) {
      var val = toObject(obj);
      if (toStringTag(val) === '[object Window]') {
        try {
          return nativeGOPN(val);
        } catch (ignore) {
          // IE bug where layout engine calls userland gOPN for cross-domain `window` objects
          return concat.call([], cachedWindowNames);
        }
      }

      return nativeGOPN(val);
    };
  }
} else {
  var objectKeys = require('object-keys-x');
  $gopn = function getOwnPropertyNames(obj) {
    return objectKeys(obj);
  };
}

/**
 * This method creates an array of all properties (enumerable or not) found
 * directly upon a given object.
 *
 * @param {object} obj - The object whose enumerable and non-enumerable own
 *  properties are to be returned.
 * @throws {TypeError} If target is null or undefined.
 * @returns {array} An array of strings that correspond to the properties found
 *  directly upon the given object.
 * @example
 * var getOwnPropertyName = require('get-own-property-name-x');
 *
 * getOwnPropertyNames('foo'); // ["0", "1", "2", "length"]
 */
module.exports = $gopn;

},{"object-keys-x":320,"to-object-x":344,"to-string-tag-x":348}],67:[function(require,module,exports){
/**
 * @file Creates an array of all symbol properties found directly upon a given object.
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module get-own-property-symbols-x
 */

'use strict';

var toObject = require('to-object-x');
var nativeGOPS = Object.getOwnPropertySymbols;
var isWorking;
if (require('has-symbol-support-x') && nativeGOPS && typeof nativeGOPS === 'function') {
  var symbol = Symbol('');
  var testObj = { a: 1 };
  testObj[symbol] = 2;
  var r = require('attempt-x')(nativeGOPS, testObj);
  isWorking = r.threw === false && r.value && r.value.length === 1 && r.value[0] === symbol;
}

/**
 * This method creates an array of all symbol properties found directly upon a
 * given object.
 *
 * @param {object} obj - The object whose symbol properties are to be returned.
 * @throws {TypeError} If target is null or undefined.
 * @returns {array} An array of all symbol properties found directly upon the
 *  given object.
 * @example
 * var getOwnPropertySymbols = require('get-own-property-isWorking-x');
 *
 * var symbol = Symbol('');
 * var testObj = { a: 1 };
 * testObj[symbol] = 2;
 * getOwnPropertySymbols(testObj); // [symbol]
 */
module.exports = function getOwnPropertySymbols(obj) {
  var object = toObject(obj);
  return isWorking ? nativeGOPS(object) : [];
};

},{"attempt-x":32,"has-symbol-support-x":72,"to-object-x":344}],68:[function(require,module,exports){
/**
 * @file Sham for Object.getPrototypeOf
 * @version 1.4.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module get-prototype-of-x
 */

'use strict';

var isFunction = require('is-function-x');
var isNull = require('lodash.isnull');
var toObject = require('to-object-x');
var gpo = require('cached-constructors-x').Object.getPrototypeOf;

if (gpo) {
  try {
    gpo = gpo(Object) === Object.prototype && gpo;
  } catch (ignore) {
    gpo = null;
  }
}

if (gpo) {
  try {
    gpo(1);
  } catch (ignore) {
    var $getPrototypeOf = gpo;
    gpo = function getPrototypeOf(obj) {
      return $getPrototypeOf(toObject(obj));
    };
  }
} else {
  gpo = function getPrototypeOf(obj) {
    var object = toObject(obj);
    // eslint-disable-next-line no-proto
    var proto = object.__proto__;
    if (proto || isNull(proto)) {
      return proto;
    }

    if (isFunction(object.constructor)) {
      return object.constructor.prototype;
    }

    if (object instanceof Object) {
      return Object.prototype;
    }

    return null;
  };
}

/**
 * This method returns the prototype (i.e. the value of the internal [[Prototype]] property)
 * of the specified object.
 *
 * @param {*} obj - The object whose prototype is to be returned.
 * @returns {Object} The prototype of the given object. If there are no inherited properties, null is returned.
 * @example
 * var getPrototypeOf = require('get-prototype-of-x');
 * getPrototypeOf('foo'); // String.prototype
 */
module.exports = gpo;

},{"cached-constructors-x":35,"is-function-x":110,"lodash.isnull":139,"to-object-x":344}],69:[function(require,module,exports){
/**
 * @file Check support of by-index access of string characters.
 * @version 1.1.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-boxed-string-x
 */

'use strict';

var boxedString = require('cached-constructors-x').Object('a');

/**
 * Check failure of by-index access of string characters (IE < 9)
 * and failure of `0 in boxedString` (Rhino).
 *
 * `true` if no failure; otherwise `false`.
 *
 * @type boolean
 */
module.exports = boxedString[0] === 'a' && (0 in boxedString);

},{"cached-constructors-x":35}],70:[function(require,module,exports){
/**
 * @file Used to determine whether an object has an own property with the specified property key.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-hasownproperty|7.3.11 HasOwnProperty (O, P)}
 * @version 3.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-own-property-x
 */

'use strict';

var toObject = require('to-object-x');
var toPropertyKey = require('to-property-key-x');
var hop = require('cached-constructors-x').Object.prototype.hasOwnProperty;

/**
 * The `hasOwnProperty` method returns a boolean indicating whether
 * the `object` has the specified `property`. Does not attempt to fix known
 * issues in older browsers, but does ES6ify the method.
 *
 * @param {!Object} object - The object to test.
 * @throws {TypeError} If object is null or undefined.
 * @param {string|Symbol} property - The name or Symbol of the property to test.
 * @returns {boolean} `true` if the property is set on `object`, else `false`.
 * @example
 * var hasOwnProperty = require('has-own-property-x');
 * var o = {
 *   foo: 'bar'
 * };
 *
 *
 * hasOwnProperty(o, 'bar'); // false
 * hasOwnProperty(o, 'foo'); // true
 * hasOwnProperty(undefined, 'foo');
 *                   // TypeError: Cannot convert undefined or null to object
 */
module.exports = function hasOwnProperty(object, property) {
  return hop.call(toObject(object), toPropertyKey(property));
};

},{"cached-constructors-x":35,"to-object-x":344,"to-property-key-x":346}],71:[function(require,module,exports){
/**
 * @file Tests if ES6 Reflect is supported.
 * @version 1.1.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-reflect-support-x
 */

'use strict';

/**
 * Indicates if `Reflect`exists.
 * `true`, if it exists and creates the correct type, otherwise `false`.
 *
 * @type boolean
 */
module.exports = typeof Reflect === 'object' && Reflect !== null;

},{}],72:[function(require,module,exports){
/**
 * @file Tests if ES6 Symbol is supported.
 * @version 1.4.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-symbol-support-x
 */

'use strict';

/**
 * Indicates if `Symbol`exists and creates the correct type.
 * `true`, if it exists and creates the correct type, otherwise `false`.
 *
 * @type boolean
 */
module.exports = typeof Symbol === 'function' && typeof Symbol('') === 'symbol';

},{}],73:[function(require,module,exports){
(function (global){
'use strict';

var origSymbol = global.Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./shams":74}],74:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 17], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],75:[function(require,module,exports){
/**
 * @file Tests if ES6 @@toStringTag is supported.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-@@tostringtag|26.3.1 @@toStringTag}
 * @version 1.4.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module has-to-string-tag-x
 */

'use strict';

/**
 * Indicates if `Symbol.toStringTag`exists and is the correct type.
 * `true`, if it exists and is the correct type, otherwise `false`.
 *
 * @type boolean
 */
module.exports = require('has-symbol-support-x') && typeof Symbol.toStringTag === 'symbol';

},{"has-symbol-support-x":72}],76:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":61}],77:[function(require,module,exports){
/**
 * @file An extended ES6 indexOf.
 * @version 2.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module index-of-x
 */

'use strict';

var numberIsNaN = require('is-nan-x');
var isString = require('is-string');
var isFalsey = require('is-falsey-x');
var toObject = require('to-object-x');
var toLength = require('to-length-x');
var sameValueZero = require('same-value-zero-x');
var sameValue = require('same-value-x');
var findIndex = require('find-index-x');
var calcFromIndex = require('calculate-from-index-x');
var splitIfBoxedBug = require('split-if-boxed-bug-x');
var pIndexOf = typeof Array.prototype.indexOf === 'function' && Array.prototype.indexOf;

var isWorking;
if (pIndexOf) {
  var attempt = require('attempt-x');
  var res = attempt.call([0, 1], pIndexOf, 1, 2);
  isWorking = res.threw === false && res.value === -1;

  if (isWorking) {
    res = attempt.call([0, 1], pIndexOf, 1);
    isWorking = res.threw === false && res.value === 1;
  }

  if (isWorking) {
    res = attempt.call([0, -0], pIndexOf, -0);
    isWorking = res.threw === false && res.value === 0;
  }

  if (isWorking) {
    var testArr = [];
    testArr.length = 2;
    testArr[1] = void 0;
    res = attempt.call(testArr, pIndexOf, void 0);
    isWorking = res.threw === false && res.value === 1;
  }

  if (isWorking) {
    res = attempt.call('abc', pIndexOf, 'c');
    isWorking = res.threw === false && res.value === 2;
  }

  if (isWorking) {
    res = attempt.call((function () {
      return arguments;
    }('a', 'b', 'c')), pIndexOf, 'c');
    isWorking = res.threw === false && res.value === 2;
  }
}

if (isWorking !== true) {
  pIndexOf = function indexOf(searchElement) {
    // eslint-disable-next-line no-invalid-this
    var length = toLength(this.length);
    if (length < 1) {
      return -1;
    }

    var i = arguments[1];
    while (i < length) {
      // eslint-disable-next-line no-invalid-this
      if (i in this && this[i] === searchElement) {
        return i;
      }

      i += 1;
    }

    return -1;
  };
}

/**
 * This method returns an index in the array, if an element in the array
 * satisfies the provided testing function. Otherwise -1 is returned.
 *
 * @private
 * @param {Array} array - The array to search.
 * @param {*} searchElement - Element to locate in the array.
 * @param {number} fromIndex - The index to start the search at.
 * @param {Function} extendFn - The comparison function to use.
 * @returns {number} Returns index of found element, otherwise -1.
 */
// eslint-disable-next-line max-params
var findIdxFrom = function findIndexFrom(array, searchElement, fromIndex, extendFn) {
  var fIdx = fromIndex;
  var length = toLength(array.length);
  while (fIdx < length) {
    if (fIdx in array && extendFn(array[fIdx], searchElement)) {
      return fIdx;
    }

    fIdx += 1;
  }

  return -1;
};

/**
 * This method returns the first index at which a given element can be found
 * in the array, or -1 if it is not present.
 *
 * @param {Array} array - The array to search.
 * @throws {TypeError} If `array` is `null` or `undefined`.
 * @param {*} searchElement - Element to locate in the `array`.
 * @param {number} [fromIndex] - The index to start the search at. If the
 *  index is greater than or equal to the array's length, -1 is returned,
 *  which means the array will not be searched. If the provided index value is
 *  a negative number, it is taken as the offset from the end of the array.
 *  Note: if the provided index is negative, the array is still searched from
 *  front to back. If the calculated index is less than 0, then the whole
 *  array will be searched. Default: 0 (entire array is searched).
 * @param {string} [extend] - Extension type: `SameValue` or `SameValueZero`.
 * @returns {number} Returns index of found element, otherwise -1.
 * @example
 * var indexOf = require('index-of-x');
 * var subject = [2, 3, undefined, true, 'hej', null, 2, false, 0, -0, NaN];
 *
 * // Standard mode, operates just like `Array.prototype.indexOf`.
 * indexOf(subject, null); // 5
 * indexOf(testSubject, '2'); // -1
 * indexOf(testSubject, NaN); // -1
 * indexOf(testSubject, -0); // 8
 * indexOf(testSubject, 2, 2); //6
 *
 * // `SameValueZero` mode extends `indexOf` to match `NaN`.
 * indexOf(subject, null, 'SameValueZero'); // 5
 * indexOf(testSubject, '2', 'SameValueZero'); // -1
 * indexOf(testSubject, NaN, 'SameValueZero'); // 10
 * indexOf(testSubject, -0, 'SameValueZero'); // 8
 * indexOf(testSubject, 2, 2, 'SameValueZero'); //6
 *
 * // `SameValue` mode extends `indexOf` to match `NaN` and signed `0`.
 * indexOf(subject, null, 'SameValue'); // 5
 * indexOf(testSubject, '2', 'SameValue'); // -1
 * indexOf(testSubject, NaN, 'SameValue'); // 10
 * indexOf(testSubject, -0, 'SameValue'); // 9
 * indexOf(testSubject, 2, 2, 'SameValue'); //6
 */
module.exports = function indexOf(array, searchElement) {
  var object = toObject(array);
  var iterable = splitIfBoxedBug(object);
  var length = toLength(iterable.length);
  if (length < 1) {
    return -1;
  }

  var argLength = arguments.length;
  var extend = argLength > 2 && argLength > 3 ? arguments[3] : arguments[2];
  var extendFn;
  if (isString(extend)) {
    extend = extend.toLowerCase();
    if (extend === 'samevalue') {
      extendFn = sameValue;
    } else if (extend === 'samevaluezero') {
      extendFn = sameValueZero;
    }
  }

  var fromIndex = 0;
  if (extendFn && (searchElement === 0 || numberIsNaN(searchElement))) {
    if (argLength > 3) {
      fromIndex = calcFromIndex(iterable, arguments[2]);
      if (fromIndex >= length) {
        return -1;
      }

      if (fromIndex < 0) {
        fromIndex = 0;
      }
    }

    if (fromIndex > 0) {
      return findIdxFrom(iterable, searchElement, fromIndex, extendFn);
    }

    return findIndex(iterable, function (element, index) {
      return index in iterable && extendFn(searchElement, element);
    });
  }

  if (argLength > 3 || (argLength > 2 && isFalsey(extendFn))) {
    fromIndex = calcFromIndex(iterable, arguments[2]);
    if (fromIndex >= length) {
      return -1;
    }

    if (fromIndex < 0) {
      fromIndex = 0;
    }
  }

  return pIndexOf.call(iterable, searchElement, fromIndex);
};

},{"attempt-x":32,"calculate-from-index-x":79,"find-index-x":86,"is-falsey-x":108,"is-nan-x":116,"is-string":134,"same-value-x":332,"same-value-zero-x":333,"split-if-boxed-bug-x":334,"to-length-x":90,"to-object-x":344}],78:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"dup":16,"is-function-x":110,"is-primitive":126,"to-string-symbols-supported-x":347}],79:[function(require,module,exports){
/**
 * @file Calculates a fromIndex of a given value for an array.
 * @version 2.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module calculate-from-index-x
 */

'use strict';

var toObject = require('to-object-x');
var toLength = require('to-length-x').toLength2018;
var toInteger = require('to-integer-x').toInteger2018;
var isArrayLike = require('is-array-like-x');

var getMax = function _getMax(a, b) {
  return a >= b ? a : b;
};

/**
 * This method calculates a fromIndex of a given value for an array.
 *
 * @param {array} array * The array on which to calculate the starting index.
 * @throws {TypeError} If array is null or undefined.
 * @param {number} fromIndex * The position in this array at which to begin. A
 *  negative value gives the index of array.length + fromIndex by asc.
 * @returns {number} The calculated fromIndex. Default is 0.
 * @example
 * var calcFromIndex = require('calculate-from-index-x');
 *
 * calcFromIndex([1, 2, 3], 1); // 1
 * calcFromIndex([1, 2, 3], Infinity); // Infinity
 * calcFromIndex([1, 2, 3], -Infinity); // 0
 * calcFromIndex([1, 2, 3], -1); // 2
 */
module.exports = function calcFromIndex(array, fromIndex) {
  var object = toObject(array);
  if (isArrayLike(object) === false) {
    return 0;
  }

  var index = toInteger(fromIndex);

  return index >= 0 ? index : getMax(0, toLength(object.length) + index);
};

},{"is-array-like-x":100,"to-integer-x":82,"to-length-x":83,"to-object-x":344}],80:[function(require,module,exports){
/**
 * @file Shim for Math.sign.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-math.sign|20.2.2.29 Math.sign(x)}
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module math-sign-x
 */

'use strict';

var libToNumber = require('to-number-x');
var toNumber2016 = libToNumber.toNumber2016;
var toNumber2018 = libToNumber.toNumber2018;
var numberIsNaN = require('is-nan-x');

var $sign2016 = function sign2016(x) {
  var n = toNumber2016(x);
  if (n === 0 || numberIsNaN(n)) {
    return n;
  }

  return n > 0 ? 1 : -1;
};

var $sign2018 = function sign2018(x) {
  var n = toNumber2018(x);
  if (n === 0 || numberIsNaN(n)) {
    return n;
  }

  return n > 0 ? 1 : -1;
};

module.exports = {
  /**
   * Reference to sign2018.
   */
  sign: $sign2018,

  /**
   * This method returns the sign of a number, indicating whether the number is positive,
   * negative or zero. (ES2016)
   *
   * @param {*} x - A number.
   * @returns {number} A number representing the sign of the given argument. If the argument
   * is a positive number, negative number, positive zero or negative zero, the function will
   * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.
   * @example
   * var mathSign = require('math-sign-x').sign2016;
   *
   * mathSign(3);     //  1
   * mathSign(-3);    // -1
   * mathSign('-3');  // -1
   * mathSign(0);     //  0
   * mathSign(-0);    // -0
   * mathSign(NaN);   // NaN
   * mathSign('foo'); // NaN
   * mathSign();      // NaN
   */
  sign2016: $sign2016,

  /**
   * This method returns the sign of a number, indicating whether the number is positive,
   * negative or zero. (ES2018)
   *
   * @param {*} x - A number.
   * @returns {number} A number representing the sign of the given argument. If the argument
   * is a positive number, negative number, positive zero or negative zero, the function will
   * return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned.
   * @example
   * var mathSign = require('math-sign-x').sign2018;
   *
   * mathSign(3);     //  1
   * mathSign(-3);    // -1
   * mathSign('-3');  // -1
   * mathSign(0);     //  0
   * mathSign(-0);    // -0
   * mathSign(NaN);   // NaN
   * mathSign('foo'); // NaN
   * mathSign();      // NaN
   */
  sign2018: $sign2018
};

},{"is-nan-x":116,"to-number-x":84}],81:[function(require,module,exports){
/**
 * @file Parses a string argument and returns an integer of the specified radix.
 * @version 2.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module parse-int-x
 */

'use strict';

var nativeParseInt = parseInt;
var NAN = require('nan-x');
var toStr = require('to-string-x');
var trimLeft2016 = require('trim-left-x').trimLeft2016;
var trimLeft2018 = require('trim-left-x').trimLeft2018;
var chachedCtrs = require('cached-constructors-x');
var castNumber = chachedCtrs.Number;
var charAt = chachedCtrs.String.prototype.charAt;
var hexRegex = /^[-+]?0[xX]/;
var test = hexRegex.test;

var $parseInt2016 = function parseInt2016(string, radix) {
  var str = trimLeft2016(toStr(string));

  return nativeParseInt(str, castNumber(radix) || (test.call(hexRegex, str) ? 16 : 10));
};

var $parseInt2018 = function parseInt2018(string, radix) {
  var str = trimLeft2018(toStr(string));
  if (charAt.call(str, 0) === '\u180E') {
    return NAN;
  }

  return nativeParseInt(str, castNumber(radix) || (test.call(hexRegex, str) ? 16 : 10));
};

module.exports = {
  /**
   * Reference to parseInt2018.
   */
  parseInt: $parseInt2018,

  /**
   * This method parses a string argument and returns an integer of the specified
   * radix (the base in mathematical numeral systems). (ES2016)
   *
   * @param {string} string - The value to parse. If the string argument is not a
   *  string, then it is converted to a string (using the ToString abstract
   *  operation). Leading whitespace in the string argument is ignored.
   * @param {number} radix - An integer between 2 and 36 that represents the radix
   *  (the base in mathematical numeral systems) of the above mentioned string.
   *  Specify 10 for the decimal numeral system commonly used by humans. Always
   *  specify this parameter to eliminate reader confusion and to guarantee
   *  predictable behavior. Different implementations produce different results
   *  when a radix is not specified, usually defaulting the value to 10.
   * @throws {TypeError} If target is a Symbol or is not coercible.
   * @returns {number} An integer number parsed from the given string. If the first
   *  character cannot be converted to a number, NaN is returned.
   * @example
   * var $parseInt = require('parse-int-x').parseInt2016;
   *
   * // The following examples all return 15
   * $parseInt(' 0xF', 16);
   * $parseInt(' F', 16);
   * $parseInt('17', 8);
   * $parseInt(021, 8);
   * $parseInt('015', 10);   // $parseInt(015, 10); will return 15
   * $parseInt(15.99, 10);
   * $parseInt('15,123', 10);
   * $parseInt('FXX123', 16);
   * $parseInt('1111', 2);
   * $parseInt('15 * 3', 10);
   * $parseInt('15e2', 10);
   * $parseInt('15px', 10);
   * $parseInt('12', 13);
   *
   * //The following examples all return NaN:
   * $parseInt('Hello', 8); // Not a number at all
   * $parseInt('546', 2);   // Digits are not valid for binary representations
   */
  parseInt2016: $parseInt2016,

  /**
   * This method parses a string argument and returns an integer of the specified
   * radix (the base in mathematical numeral systems). (ES2018)
   *
   * @param {string} string - The value to parse. If the string argument is not a
   *  string, then it is converted to a string (using the ToString abstract
   *  operation). Leading whitespace in the string argument is ignored.
   * @param {number} radix - An integer between 2 and 36 that represents the radix
   *  (the base in mathematical numeral systems) of the above mentioned string.
   *  Specify 10 for the decimal numeral system commonly used by humans. Always
   *  specify this parameter to eliminate reader confusion and to guarantee
   *  predictable behavior. Different implementations produce different results
   *  when a radix is not specified, usually defaulting the value to 10.
   * @throws {TypeError} If target is a Symbol or is not coercible.
   * @returns {number} An integer number parsed from the given string. If the first
   *  character cannot be converted to a number, NaN is returned.
   * @example
   * var $parseInt = require('parse-int-x').parseInt2018;
   *
   * // The following examples all return 15
   * $parseInt(' 0xF', 16);
   * $parseInt(' F', 16);
   * $parseInt('17', 8);
   * $parseInt(021, 8);
   * $parseInt('015', 10);   // $parseInt(015, 10); will return 15
   * $parseInt(15.99, 10);
   * $parseInt('15,123', 10);
   * $parseInt('FXX123', 16);
   * $parseInt('1111', 2);
   * $parseInt('15 * 3', 10);
   * $parseInt('15e2', 10);
   * $parseInt('15px', 10);
   * $parseInt('12', 13);
   *
   * //The following examples all return NaN:
   * $parseInt('Hello', 8); // Not a number at all
   * $parseInt('546', 2);   // Digits are not valid for binary representations
   */
  parseInt2018: $parseInt2018
};

},{"cached-constructors-x":35,"nan-x":307,"to-string-x":349,"trim-left-x":350}],82:[function(require,module,exports){
/**
 * @file ToInteger converts 'argument' to an integral numeric value.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger|7.1.4 ToInteger ( argument )}
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-integer-x
 */

'use strict';

var libToNumber = require('to-number-x');
var toNumber2016 = libToNumber.toNumber2016;
var toNumber2018 = libToNumber.toNumber2018;
var numberIsNaN = require('is-nan-x');
var numberIsFinite = require('is-finite-x');
var libMathSign = require('math-sign-x');
var mathSign2016 = libMathSign.sign2016;
var mathSign2018 = libMathSign.sign2018;
var mathFloor = Math.floor;
var mathAbs = Math.abs;

var $toInteger2016 = function toInteger2016(value) {
  var number = toNumber2016(value);
  if (numberIsNaN(number)) {
    return 0;
  }

  if (number === 0 || numberIsFinite(number) === false) {
    return number;
  }

  return mathSign2016(number) * mathFloor(mathAbs(number));
};

var $toInteger2018 = function toInteger2018(value) {
  var number = toNumber2018(value);
  if (numberIsNaN(number)) {
    return 0;
  }

  if (number === 0 || numberIsFinite(number) === false) {
    return number;
  }

  return mathSign2018(number) * mathFloor(mathAbs(number));
};

module.exports = {
  /**
   * Reference to toInteger2018.
   */
  toInteger: $toInteger2018,

  /**
   * Converts `value` to an integer. (ES2016)
   *
   * @param {*} value - The value to convert.
   * @returns {number} Returns the converted integer.
   *
   * @example
   * var toInteger = require('to-integer-x').toInteger2016;
   * toInteger(3); // 3
   * toInteger(Number.MIN_VALUE); // 0
   * toInteger(Infinity); // 1.7976931348623157e+308
   * toInteger('3'); // 3
   */
  toInteger2016: $toInteger2016,

  /**
   * Converts `value` to an integer. (ES2018)
   *
   * @param {*} value - The value to convert.
   * @returns {number} Returns the converted integer.
   *
   * @example
   * var toInteger = require('to-integer-x').toInteger2018;
   * toInteger(3); // 3
   * toInteger(Number.MIN_VALUE); // 0
   * toInteger(Infinity); // 1.7976931348623157e+308
   * toInteger('3'); // 3
   */
  toInteger2018: $toInteger2018
};

},{"is-finite-x":109,"is-nan-x":116,"math-sign-x":80,"to-number-x":84}],83:[function(require,module,exports){
/**
 * @file Shim for ToLength.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tolength|7.1.15 ToLength ( argument )}
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-length-x
 */

'use strict';

var libToInteger = require('to-integer-x');
var toInteger2016 = libToInteger.toInteger2016;
var toInteger2018 = libToInteger.toInteger2018;
var MAX_SAFE_INTEGER = require('max-safe-integer');

var $toLength2016 = function toLength2016(value) {
  var len = toInteger2016(value);
  // includes converting -0 to +0
  if (len <= 0) {
    return 0;
  }

  if (len > MAX_SAFE_INTEGER) {
    return MAX_SAFE_INTEGER;
  }

  return len;
};

var $toLength2018 = function toLength2018(value) {
  var len = toInteger2018(value);
  // includes converting -0 to +0
  if (len <= 0) {
    return 0;
  }

  if (len > MAX_SAFE_INTEGER) {
    return MAX_SAFE_INTEGER;
  }

  return len;
};

module.exports = {
  /**
   * Reference to toLength2018.
   */
  toLength: $toLength2018,

  /**
   * Converts `value` to an integer suitable for use as the length of an
   * array-like object. (ES2016)
   *
   * @param {*} value - The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   * var toLength = require('to-length-x').toLength2016;
   * toLength(3); // 3
   * toLength(Number.MIN_VALUE); // 0
   * toLength(Infinity); // Number.MAX_SAFE_INTEGER
   * toLength('3'); // 3
   */
  toLength2016: $toLength2016,

  /**
   * Converts `value` to an integer suitable for use as the length of an
   * array-like object. (ES2018)
   *
   * @param {*} value - The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   * var toLength = require('to-length-x').toLength2018;
   * toLength(3); // 3
   * toLength(Number.MIN_VALUE); // 0
   * toLength(Infinity); // Number.MAX_SAFE_INTEGER
   * toLength('3'); // 3
   */
  toLength2018: $toLength2018
};

},{"max-safe-integer":300,"to-integer-x":82}],84:[function(require,module,exports){
/**
 * @file Converts argument to a value of type Number.
 * @version 2.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-number-x
 */

'use strict';

var cachedCtrs = require('cached-constructors-x');
var castNumber = cachedCtrs.Number;
var Rx = cachedCtrs.RegExp;
var toPrimitive = require('to-primitive-x');
var libTrim = require('trim-x');
var trim2016 = libTrim.trim2016;
var trim2018 = libTrim.trim2018;
var libParseInt = require('parse-int-x');
var $parseInt2016 = libParseInt.parseInt2016;
var $parseInt2018 = libParseInt.parseInt2018;
var pStrSlice = cachedCtrs.String.prototype.slice;
var NAN = require('nan-x');

var binaryRegex = /^0b[01]+$/i;
// Note that in IE 8, RegExp.prototype.test doesn't seem to exist: ie, "test" is
// an own property of regexes. wtf.
var test = binaryRegex.test;
var isBinary = function _isBinary(value) {
  return test.call(binaryRegex, value);
};

var octalRegex = /^0o[0-7]+$/i;
var isOctal = function _isOctal(value) {
  return test.call(octalRegex, value);
};

var nonWSregex2016 = new Rx('[\u0085\u200b\ufffe]', 'g');
var hasNonWS2016 = function _hasNonWS(value) {
  return test.call(nonWSregex2016, value);
};

var nonWSregex2018 = new Rx('[\u0085\u180e\u200b\ufffe]', 'g');
var hasNonWS2018 = function _hasNonWS(value) {
  return test.call(nonWSregex2018, value);
};

var invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;
var isInvalidHexLiteral = function _isInvalidHexLiteral(value) {
  return test.call(invalidHexLiteral, value);
};

var $toNumber2016 = function toNumber2016(argument) {
  var value = toPrimitive(argument, Number);
  if (typeof value === 'symbol') {
    throw new TypeError('Cannot convert a Symbol value to a number');
  }

  if (typeof value === 'string') {
    if (isBinary(value)) {
      return toNumber2016($parseInt2016(pStrSlice.call(value, 2), 2));
    }

    if (isOctal(value)) {
      return toNumber2016($parseInt2016(pStrSlice.call(value, 2), 8));
    }

    if (hasNonWS2016(value) || isInvalidHexLiteral(value)) {
      return NAN;
    }

    var trimmed = trim2016(value);
    if (trimmed !== value) {
      return toNumber2016(trimmed);
    }
  }

  return castNumber(value);
};

var $toNumber2018 = function toNumber2018(argument) {
  var value = toPrimitive(argument, Number);
  if (typeof value === 'symbol') {
    throw new TypeError('Cannot convert a Symbol value to a number');
  }

  if (typeof value === 'string') {
    if (isBinary(value)) {
      return toNumber2018($parseInt2018(pStrSlice.call(value, 2), 2));
    }

    if (isOctal(value)) {
      return toNumber2018($parseInt2018(pStrSlice.call(value, 2), 8));
    }

    if (hasNonWS2018(value) || isInvalidHexLiteral(value)) {
      return NAN;
    }

    var trimmed = trim2018(value);
    if (trimmed !== value) {
      return toNumber2018(trimmed);
    }
  }

  return castNumber(value);
};

module.exports = {
  /**
   * reference to toNumber2018.
   */
  toNumber: $toNumber2018,

  /**
   * This method converts argument to a value of type Number. (ES2016)

   * @param {*} argument - The argument to convert to a number.
   * @throws {TypeError} - If argument is a Symbol or not coercible.
   * @returns {*} The argument converted to a number.
   * @example
   * var toNumber = require('to-number-x').toNumber2016;
   *
   * toNumber('1'); // 1
   * toNumber(null); // 0
   * toNumber(true); // 1
   * toNumber('0o10'); // 8
   * toNumber('0b10'); // 2
   * toNumber('0xF'); // 16
   *
   * toNumber(' 1 '); // 1
   *
   * toNumber(Symbol('')) // TypeError
   * toNumber(Object.create(null)) // TypeError
   */
  toNumber2016: $toNumber2016,

  /**
   * This method converts argument to a value of type Number. (ES2018)

   * @param {*} argument - The argument to convert to a number.
   * @throws {TypeError} - If argument is a Symbol or not coercible.
   * @returns {*} The argument converted to a number.
   * @example
   * var toNumber = require('to-number-x').toNumber2018;
   *
   * toNumber('1'); // 1
   * toNumber(null); // 0
   * toNumber(true); // 1
   * toNumber('0o10'); // 8
   * toNumber('0b10'); // 2
   * toNumber('0xF'); // 16
   *
   * toNumber(' 1 '); // 1
   *
   * toNumber(Symbol('')) // TypeError
   * toNumber(Object.create(null)) // TypeError
   */
  toNumber2018: $toNumber2018
};

},{"cached-constructors-x":35,"nan-x":307,"parse-int-x":81,"to-primitive-x":345,"trim-x":85}],85:[function(require,module,exports){
/**
 * @file This method removes whitespace from the left and right end of a string.
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module trim-x
 */

'use strict';

var libTrimLeft = require('trim-left-x');
var trimLeft2016 = libTrimLeft.trimLeft2016;
var trimLeft2018 = libTrimLeft.trimLeft2018;
var libTrimRight = require('trim-right-x');
var trimRight2016 = libTrimRight.trimRight2016;
var trimRight2018 = libTrimRight.trimRight2016;

var $trim2016 = function trim2016(string) {
  return trimLeft2016(trimRight2016(string));
};

var $trim2018 = function trim2018(string) {
  return trimLeft2018(trimRight2018(string));
};

module.exports = {
  /**
   * A reference to trim2018.
   */
  trim: $trim2018,

  /**
   * This method removes whitespace from the left and right end of a string.
   * (ES2016)
   * @param {string} string - The string to trim the whitespace from.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The trimmed string.
   * @example
   * var trim = require('trim-x');
   *
   * trim(' \t\na \t\n') === 'a'; // true
   */
  trim2016: $trim2016,

  /**
   * This method removes whitespace from the left and right end of a string.
   * (ES2018)
   *
   * @param {string} string - The string to trim the whitespace from.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The trimmed string.
   * @example
   * var trim = require('trim-x');
   *
   * trim(' \t\na \t\n') === 'a'; // true
   */
  trim2018: $trim2018
};

},{"trim-left-x":350,"trim-right-x":92}],86:[function(require,module,exports){
/**
 * @file This method returns the index of the first element in the array that satisfies the provided testing function.
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module find-index-x
 */

'use strict';

var pFindIndex = typeof Array.prototype.findIndex === 'function' && Array.prototype.findIndex;

var isWorking;
if (pFindIndex) {
  var attempt = require('attempt-x');
  var testArr = [];
  testArr.length = 2;
  testArr[1] = 1;
  var res = attempt.call(testArr, pFindIndex, function (item, idx) {
    return idx === 0;
  });

  isWorking = res.threw === false && res.value === 0;

  if (isWorking) {
    res = attempt.call(1, pFindIndex, function (item, idx) {
      return idx === 0;
    });

    isWorking = res.threw === false && res.value === -1;
  }

  if (isWorking) {
    isWorking = attempt.call([], pFindIndex).threw;
  }

  if (isWorking) {
    res = attempt.call('abc', pFindIndex, function (item) {
      return item === 'c';
    });

    isWorking = res.threw === false && res.value === 2;
  }

  if (isWorking) {
    res = attempt.call((function () {
      return arguments;
    }('a', 'b', 'c')), pFindIndex, function (item) {
      return item === 'c';
    });

    isWorking = res.threw === false && res.value === 2;
  }
}

var findIdx;
if (isWorking) {
  findIdx = function findIndex(array, callback) {
    var args = [callback];
    if (arguments.length > 2) {
      args[1] = arguments[2];
    }

    return pFindIndex.apply(array, args);
  };
} else {
  var toLength = require('to-length-x');
  var toObject = require('to-object-x');
  var assertIsFunction = require('assert-is-function-x');
  var splitIfBoxedBug = require('split-if-boxed-bug-x');

  findIdx = function findIndex(array, callback) {
    var object = toObject(array);
    assertIsFunction(callback);
    var iterable = splitIfBoxedBug(object);
    var length = toLength(iterable.length);
    if (length < 1) {
      return -1;
    }

    var thisArg;
    if (arguments.length > 2) {
      thisArg = arguments[2];
    }

    var index = 0;
    while (index < length) {
      if (callback.call(thisArg, iterable[index], index, object)) {
        return index;
      }

      index += 1;
    }

    return -1;
  };
}

/**
 * Like `findIndex`, this method returns an index in the array, if an element
 * in the array satisfies the provided testing function. Otherwise -1 is returned.
 *
 * @param {Array} array - The array to search.
 * @throws {TypeError} If array is `null` or `undefined`-
 * @param {Function} callback - Function to execute on each value in the array,
 *  taking three arguments: `element`, `index` and `array`.
 * @throws {TypeError} If `callback` is not a function.
 * @param {*} [thisArg] - Object to use as `this` when executing `callback`.
 * @returns {number} Returns index of positively tested element, otherwise -1.
 * @example
 * var findIndex = require('find-index-x');
 *
 * function isPrime(element, index, array) {
 *   var start = 2;
 *   while (start <= Math.sqrt(element)) {
 *     if (element % start++ < 1) {
 *       return false;
 *     }
 *   }
 *   return element > 1;
 * }
 *
 * console.log(findIndex([4, 6, 8, 12, 14], isPrime)); // -1, not found
 * console.log(findIndex([4, 6, 7, 12, 13], isPrime)); // 2
 */
module.exports = findIdx;

},{"assert-is-function-x":78,"attempt-x":32,"split-if-boxed-bug-x":334,"to-length-x":90,"to-object-x":344}],87:[function(require,module,exports){
arguments[4][19][0].apply(exports,arguments)
},{"dup":19,"is-nan-x":116,"to-number-x":91}],88:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"cached-constructors-x":35,"dup":20,"to-string-x":349,"trim-x":353,"white-space-x":357}],89:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"dup":21,"is-finite-x":109,"is-nan-x":116,"math-sign-x":87,"to-number-x":91}],90:[function(require,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"dup":22,"max-safe-integer":300,"to-integer-x":89}],91:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"cached-constructors-x":35,"dup":23,"nan-x":307,"parse-int-x":88,"to-primitive-x":345,"trim-x":353}],92:[function(require,module,exports){
/**
 * @file This method removes whitespace from the right end of a string.
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module trim-right-x
 */

'use strict';

var requireCoercibleToString = require('require-coercible-to-string-x');
var Rx = require('cached-constructors-x').RegExp;
var reRight2016 = new Rx('[' + require('white-space-x').string2016 + ']+$');
var reRight2018 = new Rx('[' + require('white-space-x').string2018 + ']+$');
var replace = ''.replace;

var $trimRight2016 = function trimRight2016(string) {
  return replace.call(requireCoercibleToString(string), reRight2016, '');
};

var $trimRight2018 = function trimRight2018(string) {
  return replace.call(requireCoercibleToString(string), reRight2018, '');
};

module.exports = {
  /**
   * A reference to trimRight2018.
   */
  trimRight: $trimRight2018,

  /**
   * This method removes whitespace from the right end of a string. (ES2016)
   *
   * @param {string} string - The string to trim the right end whitespace from.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The right trimmed string.
   * @example
   * var trimRight = require('trim-right-x');
   *
   * trimRight(' \t\na \t\n') === ' \t\na'; // true
   */
  trimRight2016: $trimRight2016,

  /**
   * This method removes whitespace from the right end of a string. (ES2018)
   *
   * @param {string} string - The string to trim the right end whitespace from.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The right trimmed string.
   * @example
   * var trimRight = require('trim-right-x');
   *
   * trimRight(' \t\na \t\n') === ' \t\na'; // true
   */
  trimRight2018: $trimRight2018
};

},{"cached-constructors-x":35,"require-coercible-to-string-x":329,"white-space-x":93}],93:[function(require,module,exports){
/**
 * @file List of ECMAScript white space characters.
 * @version 3.0.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module white-space-x
 */

'use strict';

/**
 * A record of a white space character.
 *
 * @typedef {Object} CharRecord
 * @property {number} code - The character code.
 * @property {string} description - A description of the character.
 * @property {boolean} es5 - Whether the spec lists this as a white space.
 * @property {boolean} es2015 - Whether the spec lists this as a white space.
 * @property {boolean} es2016 - Whether the spec lists this as a white space.
 * @property {boolean} es2017 - Whether the spec lists this as a white space.
 * @property {boolean} es2018 - Whether the spec lists this as a white space.
 * @property {string} string - The character string.
 */

/**
 * An array of the whitespace char codes, string, descriptions and language
 * presence in the specifications.
 *
 * @private
 * @type Array.<CharRecord>
 */
var list = [
  {
    code: 0x0009,
    description: 'Tab',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u0009'
  },
  {
    code: 0x000a,
    description: 'Line Feed',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u000a'
  },
  {
    code: 0x000b,
    description: 'Vertical Tab',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u000b'
  },
  {
    code: 0x000c,
    description: 'Form Feed',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u000c'
  },
  {
    code: 0x000d,
    description: 'Carriage Return',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u000d'
  },
  {
    code: 0x0020,
    description: 'Space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u0020'
  },
  /*
  {
    code: 0x0085,
    description: 'Next line',
    es5: false,
    es2015: false,
    es2016: false,
    es2017: false,
    es2018: false,
    string: '\u0085'
  }
  */
  {
    code: 0x00a0,
    description: 'No-break space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u00a0'
  },
  {
    code: 0x1680,
    description: 'Ogham space mark',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u1680'
  },
  {
    code: 0x180e,
    description: 'Mongolian vowel separator',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: false,
    es2018: false,
    string: '\u180e'
  },
  {
    code: 0x2000,
    description: 'En quad',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2000'
  },
  {
    code: 0x2001,
    description: 'Em quad',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2001'
  },
  {
    code: 0x2002,
    description: 'En space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2002'
  },
  {
    code: 0x2003,
    description: 'Em space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2003'
  },
  {
    code: 0x2004,
    description: 'Three-per-em space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2004'
  },
  {
    code: 0x2005,
    description: 'Four-per-em space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2005'
  },
  {
    code: 0x2006,
    description: 'Six-per-em space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2006'
  },
  {
    code: 0x2007,
    description: 'Figure space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2007'
  },
  {
    code: 0x2008,
    description: 'Punctuation space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2008'
  },
  {
    code: 0x2009,
    description: 'Thin space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2009'
  },
  {
    code: 0x200a,
    description: 'Hair space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u200a'
  },
  /*
  {
    code: 0x200b,
    description: 'Zero width space',
    es5: false,
    es2015: false,
    es2016: false,
    es2017: false,
    es2018: false,
    string: '\u200b'
  },
  */
  {
    code: 0x2028,
    description: 'Line separator',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2028'
  },
  {
    code: 0x2029,
    description: 'Paragraph separator',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u2029'
  },
  {
    code: 0x202f,
    description: 'Narrow no-break space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u202f'
  },
  {
    code: 0x205f,
    description: 'Medium mathematical space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u205f'
  },
  {
    code: 0x3000,
    description: 'Ideographic space',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\u3000'
  },
  {
    code: 0xfeff,
    description: 'Byte Order Mark',
    es5: true,
    es2015: true,
    es2016: true,
    es2017: true,
    es2018: true,
    string: '\ufeff'
  }
];

var stringES2016 = '';
var stringES2018 = '';
var length = list.length;
for (var i = 0; i < length; i += 1) {
  if (list[i].es2016) {
    stringES2016 += list[i].string;
  }

  if (list[i].es2018) {
    stringES2018 += list[i].string;
  }
}

module.exports = {
  /**
   * An array of the whitespace char codes, string, descriptions and language
   * presence in the specifications.
   *
   * @type Array.<CharRecord>
   * @example
   * var whiteSpace = require('white-space-x');
   * whiteSpaces.list.foreach(function (item) {
   *   console.log(lib.description, item.code, item.string);
   * });
   */
  list: list,
  /**
   * A string of the ES2017 to ES2018 whitespace characters.
   *
   * @type string
   */
  string: stringES2018,

  /**
   * A string of the ES5 to ES2016 whitespace characters.
   *
   * @type string
   */
  string5: stringES2016,

  /**
   * A string of the ES5 to ES2016 whitespace characters.
   *
   * @type string
   */
  string2015: stringES2016,

  /**
   * A string of the ES5 to ES2016 whitespace characters.
   *
   * @type string
   * @example
   * var whiteSpace = require('white-space-x');
   * var characters = [
   *   '\u0009',
   *   '\u000a',
   *   '\u000b',
   *   '\u000c',
   *   '\u000d',
   *   '\u0020',
   *   '\u00a0',
   *   '\u1680',
   *   '\u180e',
   *   '\u2000',
   *   '\u2001',
   *   '\u2002',
   *   '\u2003',
   *   '\u2004',
   *   '\u2005',
   *   '\u2006',
   *   '\u2007',
   *   '\u2008',
   *   '\u2009',
   *   '\u200a',
   *   '\u2028',
   *   '\u2029',
   *   '\u202f',
   *   '\u205f',
   *   '\u3000',
   *   '\ufeff'
   * ];
   * var ws = characters.join('');
   * var re1 = new RegExp('^[' + whiteSpace.string2016 + ']+$)');
   * re1.test(ws); // true
   */
  string2016: stringES2016,

  /**
   * A string of the ES2017 to ES2018 whitespace characters.
   *
   * @type string
   */
  string2017: stringES2018,

  /**
   * A string of the ES2017 to ES2018 whitespace characters.
   *
   * @type string
   * @example
   * var whiteSpace = require('white-space-x');
   * var characters = [
   *   '\u0009',
   *   '\u000a',
   *   '\u000b',
   *   '\u000c',
   *   '\u000d',
   *   '\u0020',
   *   '\u00a0',
   *   '\u1680',
   *   '\u2000',
   *   '\u2001',
   *   '\u2002',
   *   '\u2003',
   *   '\u2004',
   *   '\u2005',
   *   '\u2006',
   *   '\u2007',
   *   '\u2008',
   *   '\u2009',
   *   '\u200a',
   *   '\u2028',
   *   '\u2029',
   *   '\u202f',
   *   '\u205f',
   *   '\u3000',
   *   '\ufeff'
   * ];
   * var ws = characters.join('');
   * var re1 = new RegExp('^[' + whiteSpace.string2018 + ']+$)');
   * re1.test(ws); // true
   */
  string2018: stringES2018
};

},{}],94:[function(require,module,exports){
/**
 * @file The constant value Infinity.
 * @version 1.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module infinity-x
 */

'use strict';

/**
 * The constant value Infinity derived mathematically by 1 / 0.
 *
 * @type number
 * @example
 * var INFINITY = require('infinity-x');
 *
 * INFINITY === Infinity; // true
 * -INFINITY === -Infinity; // true
 * INFINITY === -Infinity; // false
 */
module.exports = 1 / 0;

},{}],95:[function(require,module,exports){
/**
 * @file An implementation of node's ES6 inspect module.
 * @version 1.9.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @see https://nodejs.org/api/util.html#util_util_inspect_object_options
 * @module inspect-x
 */

'use strict';

var isFunction = require('is-function-x');
var isGeneratorFunction = require('is-generator-function');
var isAsyncFunction = require('is-async-function-x');
var isRegExp = require('is-regex');
var defineProperties = require('object-define-properties-x');
var isDate = require('is-date-object');
var isArrayBuffer = require('is-array-buffer-x');
var isSet = require('is-set-x');
var isMap = require('is-map-x');
var isTypedArray = require('is-typed-array');
var isDataView = require('is-data-view-x');
var isUndefined = require('validate.io-undefined');
var isNil = require('is-nil-x');
var isNull = require('lodash.isnull');
var isError = require('is-error-x');
var isObjectLike = require('is-object-like-x');
var isPromise = require('is-promise');
var isString = require('is-string');
var isNumber = require('is-number-object');
var isBoolean = require('is-boolean-object');
var isNegZero = require('is-negative-zero');
var isSymbol = require('is-symbol');
var isPrimitive = require('is-primitive');
var getFunctionName = require('get-function-name-x');
var hasSymbolSupport = require('has-symbol-support-x');
var hasOwn = require('has-own-property-x');
var whiteSpace = require('white-space-x');
var reSingle = new RegExp('\\{[' + whiteSpace.string + ']+\\}');
var hasSet = typeof Set === 'function' && isSet(new Set());
var testSet = hasSet && new Set(['SetSentinel']);
var sForEach = hasSet && Set.prototype.forEach;
var sValues = hasSet && Set.prototype.values;
var hasMap = typeof Map === 'function' && isMap(new Map());
var testMap = hasMap && new Map([[1, 'MapSentinel']]);
var mForEach = hasMap && Map.prototype.forEach;
var mValues = hasMap && Map.prototype.values;
var pSymToStr = hasSymbolSupport && Symbol.prototype.toString;
var pSymValOf = hasSymbolSupport && Symbol.prototype.valueOf;
var indexOf = require('index-of-x');
var reduce = require('array-reduce-x');
var forEach = require('array-for-each-x');
var filter = require('array-filter-x');
var reflectOwnKeys = require('reflect-own-keys-x');
var $stringify = require('json3').stringify;
var $keys = require('object-keys-x');
var getOwnPropertyDescriptor = require('object-get-own-property-descriptor-x');
var $getPrototypeOf = require('get-prototype-of-x');
var $propertyIsEnumerable = Object.prototype.propertyIsEnumerable;
var $isArray = require('is-array-x');
var $includes = require('array-includes-x');
var $assign = require('object-assign-x');
var $isNaN = require('is-nan');
var pRegExpToString = RegExp.prototype.toString;
var pErrorToString = Error.prototype.toString;
var pNumberToString = Number.prototype.toString;
var pBooleanToString = Boolean.prototype.toString;
var toISOString = require('to-iso-string-x');
var collections = require('collections-x');
var defineProperty = require('object-define-property-x');
// var hasToStringTag = hasSymbolSupport && typeof Symbol.toStringTag === 'symbol';
var bpe = 'BYTES_PER_ELEMENT';
var inspect;
var fmtValue;

var customInspectSymbol = hasSymbolSupport ? Symbol('inspect.custom') : '_inspect.custom_';

var supportsClasses;
try {
  // eslint-disable-next-line no-new-func
  new Function('return class My {}')();
  supportsClasses = true;
} catch (e) {}

var supportsGetSet;
try {
  var testVar;
  var testObject = defineProperty({}, 'defaultOptions', {
    get: function _get() {
      return testVar;
    },
    set: function _set(val) {
      testVar = val;
      return testVar;
    }
  });

  testObject.defaultOptions = 'test';
  supportsGetSet = testVar === 'test' && testObject.defaultOptions === 'test';
} catch (ignore) {}

var $seal = isFunction(Object.seal) ? Object.seal : function seal(obj) {
  return obj;
};

var $getOwnPropertySymbols = isFunction(Object.getOwnPropertySymbols) && Object.getOwnPropertySymbols;
if ($getOwnPropertySymbols) {
  try {
    var gOPSymbol = hasSymbolSupport && Symbol('');
    var gOPSObj = { a: 1 };
    gOPSObj[gOPSymbol] = 2;

    var gOPSymbols = $getOwnPropertySymbols(gOPSObj);
    if (gOPSymbol) {
      if (gOPSymbols.length !== 1 || gOPSymbols[0] !== gOPSymbol) {
        throw new Error('Inavlid result');
      }
    } else if (gOPSymbols.length !== 0) {
      throw new Error('Inavlid result');
    }
  } catch (ignore) {
    $getOwnPropertySymbols = null;
  }
}

var missingError;
var errProps;
try {
  throw new Error('test');
} catch (e) {
  errProps = $keys(e);
  forEach($keys(new Error()), function _pusher(p) {
    if ($includes(errProps, p) === false) {
      errProps.push(p);
    }
  });

  var errorString = pErrorToString.call(e);
  var errorStack = e.stack;
  if (errorStack) {
    var errorRx = new RegExp('^' + errorString);
    if (errorRx.test(errorStack) === false) {
      missingError = true;
    }
  }
}

if (isDate(Date.prototype)) {
  isDate = function _isDate(value) {
    try {
      value.getTime();
      return true;
    } catch (ignore) {
      return false;
    }
  };
}

var dateProps = $keys(Date);
var shimmedDate;
if (dateProps.length && $includes(dateProps, 'now') && $includes(dateProps, 'UTC') && $includes(dateProps, 'parse')) {
  shimmedDate = $includes($keys(new Date()), 'constructor');
}

var inspectDefaultOptions = $seal({
  breakLength: 60,
  colors: false,
  customInspect: true,
  depth: 2,
  maxArrayLength: 100,
  showHidden: false,
  showProxy: false
});

var isBooleanType = function _isBooleanType(arg) {
  return typeof arg === 'boolean';
};

var isNumberType = function _isNumberType(arg) {
  return typeof arg === 'number';
};

var isStringType = function _isStringType(arg) {
  return typeof arg === 'string';
};

var isSymbolType = function _isSymbolType(arg) {
  return typeof arg === 'symbol';
};

var isMapIterator = function _isMapIterator(value) {
  if (hasMap === false || isObjectLike(value) === false) {
    return false;
  }

  try {
    return value.next.call(mValues.call(testMap)).value === 'MapSentinel';
  } catch (ignore) {}

  return false;
};

var isSetIterator = function _isSetIterator(value) {
  if (hasSet === false || isObjectLike(value) === false) {
    return false;
  }

  try {
    return value.next.call(sValues.call(testSet)).value === 'SetSentinel';
  } catch (ignore) {}

  return false;
};

var filterIndexes = function _filterIndexes(keys, length) {
  var i = keys.length - 1;
  while (i > -1) {
    var key = keys[i];
    if (key > -1 && key % 1 === 0 && key < length && isSymbolType(key) === false) {
      keys.splice(i, 1);
    }

    i -= 1;
  }
};

var pushUniq = function _pushUniq(arr, value) {
  if ($includes(arr, value) === false) {
    arr.push(value);
  }
};

var unshiftUniq = function _unshiftUniq(arr, value) {
  var index = indexOf(arr, value);
  if (index > -1) {
    arr.splice(index, 1);
  }

  arr.unshift(value);
};

var stylizeWithColor = function _stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];
  if (style) {
    var colors = inspect.colors[style];
    return '\u001b[' + colors[0] + 'm' + str + '\u001b[' + colors[1] + 'm';
  }

  return str;
};

var stylizeNoColor = function _stylizeNoColor(str) {
  return str;
};

var getNameSep = function _getNameSep(obj) {
  var name = getFunctionName(obj);
  return name ? ': ' + name : name;
};

var collectionEach = function _collectionEach(collection, callback) {
  if (isMap(collection)) {
    mForEach.call(collection, callback);
  } else if (isSet(collection)) {
    sForEach.call(collection, callback);
  }
};

var getConstructorOf = function _getConstructorOf(obj) {
  var o = obj;
  var maxLoop = 100;
  while (isNil(o) === false && maxLoop > -1) {
    o = Object(o);
    var descriptor = getOwnPropertyDescriptor(o, 'constructor');
    if (descriptor && descriptor.value) {
      return descriptor.value;
    }

    o = $getPrototypeOf(o);
    maxLoop -= 1;
  }

  return null;
};

var isSub = function _isSub(value) {
  if (supportsClasses !== true || isPrimitive(value)) {
    return false;
  }

  var constructor = getConstructorOf(value);
  return isFunction(constructor) === false && isFunction(constructor, true);
};

var getSubName = function _getSubName(value, name) {
  if (isSub(value)) {
    var subName = getFunctionName(getConstructorOf(value));
    if (subName && subName !== name) {
      return subName;
    }
  }

  return name ? name : getFunctionName(getConstructorOf(value));
};

var fmtNumber = function _fmtNumber(ctx, value) {
  // Format -0 as '-0'.
  return ctx.stylize(isNegZero(value) ? '-0' : pNumberToString.call(value), 'number');
};

var fmtPrimitive = function _fmtPrimitive(ctx, value) {
  if (isNil(value)) {
    var str = String(value);
    return ctx.stylize(str, str);
  }

  if (isStringType(value)) {
    var simple = $stringify(value).replace(/^"|"$/g, '').replace(/'/g, '\\\'').replace(/\\"/g, '"');
    return ctx.stylize('\'' + simple + '\'', 'string');
  }

  if (isNumberType(value)) {
    return fmtNumber(ctx, value);
  }

  if (isBooleanType(value)) {
    return ctx.stylize(pBooleanToString.call(value), 'boolean');
  }

  // es6 symbol primitive
  if (isSymbolType(value)) {
    return ctx.stylize(pSymToStr.call(value), 'symbol');
  }

  return void 0;
};

var fmtPrimNoColor = function _fmtPrimNoColor(ctx, value) {
  var stylize = ctx.stylize;
  ctx.stylize = stylizeNoColor;
  var str = fmtPrimitive(ctx, value);
  ctx.stylize = stylize;
  return str;
};

var recurse = function _recurse(depth) {
  return isNull(depth) ? null : depth - 1;
};

/*
var isCollection = function (value) {
  return isSet(value) || isMap(value);
};
*/

var isDigits = function _isDigits(key) {
  return (/^\d+$/).test(key);
};

// eslint-disable-next-line max-params
var fmtProp = function _fmtProp(ctx, value, depth, visibleKeys, key, arr) {
  var desc = getOwnPropertyDescriptor(value, key) || { value: value[key] };

  /*
  // this is a fix for broken FireFox, should not be needed with es6-shim
  if (key === 'size' && isCollection(value) && isFunction(value.size)) {
    desc.value = value.size();
  }
  */

  var name;
  if ($includes(visibleKeys, key) === false) {
    if (key === bpe && Boolean(value[bpe]) === false && isTypedArray(value)) {
      var constructor = getConstructorOf(value);
      if (constructor) {
        desc.value = constructor[bpe];
      }
    } else if (isSymbolType(key)) {
      name = '[' + ctx.stylize(pSymToStr.call(key), 'symbol') + ']';
    } else {
      name = '[' + key + ']';
    }
  }

  var str;
  if (desc.get) {
    str = ctx.stylize(desc.set ? '[Getter/Setter]' : '[Getter]', 'special');
  } else if (desc.set) {
    str = ctx.stylize('[Setter]', 'special');
  } else {
    str = fmtValue(ctx, desc.value, recurse(depth));
    if (str.indexOf('\n') > -1) {
      var rx = arr ? /\n/g : /(^|\n)/g;
      var rStr = arr ? '\n  ' : '\n   ';
      str = str.replace(rx, rStr);
    }
  }

  if (isUndefined(name)) {
    if (arr && isDigits(key)) {
      return str;
    }

    name = $stringify(key);
    if (/^"[\w$]+"$/.test(name)) {
      name = ctx.stylize(name.slice(1, -1), 'name');
    } else {
      name = name.replace(/'/g, '\\\'').replace(/\\"/g, '"').replace(/(^"|"$)/g, '\'').replace(/\\\\/g, '\\');
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
};

// eslint-disable-next-line max-params
var fmtObject = function _fmtObject(ctx, value, depth, visibleKeys, keys) {
  var out = [];
  forEach(keys, function _pusherFmObject(key) {
    out.push(fmtProp(ctx, value, depth, visibleKeys, key, false));
  });

  return out;
};

// eslint-disable-next-line max-params
var fmtArray = function _fmtArray(ctx, value, depth, visibleKeys, keys) {
  var output = [];
  var visibleLength = 0;
  var index = 0;
  while (index < value.length && visibleLength < ctx.maxArrayLength) {
    var emptyItems = 0;
    while (index < value.length && hasOwn(value, pNumberToString.call(index)) === false) {
      emptyItems += 1;
      index += 1;
    }

    if (emptyItems > 0) {
      var ending = emptyItems > 1 ? 's' : '';
      var message = '<' + emptyItems + ' empty item' + ending + '>';
      output.push(ctx.stylize(message, 'undefined'));
    } else {
      output.push(fmtProp(ctx, value, depth, visibleKeys, pNumberToString.call(index), true));
      index += 1;
    }

    visibleLength += 1;
  }

  var remaining = value.length - index;
  if (remaining > 0) {
    output.push('... ' + remaining + ' more item' + (remaining > 1 ? 's' : ''));
  }

  forEach(keys, function _pusherFmtArray(key) {
    if (isSymbolType(key) || isDigits(key) === false) {
      output.push(fmtProp(ctx, value, depth, visibleKeys, key, true));
    }
  });

  return output;
};

// eslint-disable-next-line max-params
var fmtTypedArray = function _fmtTypedArray(ctx, value, depth, visibleKeys, keys) {
  var maxLength = Math.min(Math.max(0, ctx.maxArrayLength), value.length);
  var remaining = value.length - maxLength;
  var output = new Array(maxLength);
  for (var i = 0; i < maxLength; i += 1) {
    output[i] = fmtNumber(ctx, value[i]);
  }

  if (remaining > 0) {
    output.push('... ' + remaining + ' more item' + (remaining > 1 ? 's' : ''));
  }

  forEach(keys, function _pusherFmtTypedArray(key) {
    if (isSymbolType(key) || isDigits(key) === false) {
      output.push(fmtProp(ctx, value, depth, visibleKeys, key, true));
    }
  });

  return output;
};

// eslint-disable-next-line max-params
var fmtSet = function _fmtSet(ctx, value, depth, visibleKeys, keys) {
  var out = [];
  collectionEach(value, function _pusherFmtSet1(v) {
    out.push(fmtValue(ctx, v, recurse(depth)));
  });

  forEach(keys, function _pusherFmtSet2(key) {
    out.push(fmtProp(ctx, value, depth, visibleKeys, key, false));
  });

  return out;
};

// eslint-disable-next-line max-params
var fmtMap = function (ctx, value, depth, visibleKeys, keys) {
  var out = [];
  collectionEach(value, function (v, k) {
    var r = recurse(depth);
    out.push(fmtValue(ctx, k, r) + ' => ' + fmtValue(ctx, v, r));
  });

  forEach(keys, function (key) {
    out.push(fmtProp(ctx, value, depth, visibleKeys, key, false));
  });

  return out;
};

var reduceToSingleString = function _reduceToSingleString(out, base, braces) {
  var length = reduce(out, function _reducer(prev, cur) {
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  var result;
  if (length > 60) {
    // If the opening "brace" is too large, like in the case of "Set {",
    // we need to force the first item to be on the next line or the
    // items will not line up correctly.
    var layoutBase = base === '' && braces[0].length === 1 ? '' : base + '\n ';
    result = braces[0] + layoutBase + ' ' + out.join(',\n  ') + ' ' + braces[1];
  } else {
    result = braces[0] + base + ' ' + out.join(', ') + ' ' + braces[1];
  }

  return result.replace(reSingle, '{}');
};

var fmtDate = function _fmtDate(value) {
  return $isNaN(value.getTime()) ? 'Invalid Date' : toISOString(value);
};

var fmtError = function _fmtError(value) {
  var stack = value.stack;
  if (stack) {
    if (supportsClasses) {
      var subName = getSubName(value);
      if (subName && stack.startsWith(subName) === false) {
        var msg = value.message;
        return stack.replace(pErrorToString.call(value), subName + (msg ? ': ' + msg : ''));
      }
    } else if (missingError) {
      return pErrorToString.call(value) + '\n' + stack;
    }
  }

  return stack || '[' + pErrorToString.call(value) + ']';
};

var filterDateKeys = function _filterDateKeys(key) {
  return key !== 'constructor';
};

var filterErrorKeys = function _filterErrorKeys(key) {
  return $includes(errProps, key) === false;
};

var getVisibleKeys = function _getVisibleKeys(value) {
  var keys = $keys(value);
  if (keys.length > 0) {
    if (shimmedDate && isDate(value)) {
      return filter(keys, filterDateKeys);
    }

    if (errProps.length > 0 && isError(value)) {
      return filter(keys, filterErrorKeys);
    }
  }

  return keys;
};

var getEnumSymbols = function _getEnumSymbols(value) {
  if ($getOwnPropertySymbols) {
    return filter($getOwnPropertySymbols(value), function _filterEnumSymbolKeys(key) {
      return $propertyIsEnumerable.call(value, key);
    });
  }

  return [];
};

// eslint-disable-next-line complexity
fmtValue = function _fmtValue(ctx, value, depth) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value) {
    var maybeCustomInspect = value[customInspectSymbol] || value.inspect;
    if (isFunction(maybeCustomInspect)) {
      // Filter out the util module, its inspect function is special
      if (maybeCustomInspect !== inspect) {
        var constructor = getConstructorOf(value);
        // Also filter out any prototype objects using the circular check.
        var isCircular = constructor && constructor.prototype === value;
        if (isCircular === false) {
          var ret = maybeCustomInspect.call(value, depth, ctx);
          // If the custom inspection method returned `this`, don't go into
          // infinite recursion.
          // eslint-disable-next-line max-depth
          if (ret !== value) {
            return isStringType(ret) ? ret : fmtValue(ctx, ret, depth);
          }
        }
      }
    }
  }

  // Primitive types cannot have properties
  var primitive = fmtPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var visibleKeys = getVisibleKeys(value);
  var keys;
  if (ctx.showHidden) {
    keys = reflectOwnKeys(value);
    if (isError(value)) {
      if ($includes(visibleKeys, 'message') === false && $includes(keys, 'message') === false) {
        unshiftUniq(keys, 'message');
      }

      /*
      if (includes(visibleKeys, 'name') === false && includes(keys, 'name') === false) {
        unshiftUniq(keys, 'name');
      }
      */
    }
  } else {
    keys = visibleKeys.concat(getEnumSymbols(value));
  }

  if (isString(value)) {
    // for boxed Strings, we have to remove the 0-n indexed entries,
    // since they just noisey up the out and are redundant
    filterIndexes(keys, value.length);
    filterIndexes(visibleKeys, value.length);
  } else if (isArrayBuffer(value)) {
    filterIndexes(keys, value.byteLength);
    filterIndexes(visibleKeys, value.byteLength);
  }

  var name;
  var formatted;
  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    // This could be a boxed primitive (new String(), etc.)
    if (isString(value)) {
      return ctx.stylize(
        '[' + getSubName(value, 'String') + ': ' + fmtPrimNoColor(ctx, value.valueOf()) + ']',
        'string'
      );
    }

    if (isNumber(value)) {
      return ctx.stylize(
        '[' + getSubName(value, 'Number') + ': ' + fmtPrimNoColor(ctx, value.valueOf()) + ']',
        'number'
      );
    }

    if (isBoolean(value)) {
      return ctx.stylize(
        '[' + getSubName(value, 'Boolean') + ': ' + fmtPrimNoColor(ctx, value.valueOf()) + ']',
        'boolean'
      );
    }

    if (isSymbol(value)) {
      return ctx.stylize(
        '[Symbol: ' + fmtPrimNoColor(ctx, pSymValOf.call(value)) + ']',
        'symbol'
      );
    }

    if (isAsyncFunction(value)) {
      return ctx.stylize('[AsyncFunction' + getNameSep(value) + ']', 'special');
    }

    if (isGeneratorFunction(value)) {
      return ctx.stylize('[GeneratorFunction' + getNameSep(value) + ']', 'special');
    }

    if (isFunction(value)) {
      return ctx.stylize('[' + getSubName(value, 'Function') + getNameSep(value) + ']', 'special');
    }

    if (supportsClasses && isFunction(value, true)) {
      return ctx.stylize('[Class' + getNameSep(value) + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(pRegExpToString.call(value), 'regexp');
    }

    if (isDate(value)) {
      name = getSubName(value);
      formatted = ctx.stylize(fmtDate(value), 'date');
      if (name === 'Date') {
        return formatted;
      }

      return ctx.stylize('[' + name + ': ' + formatted + ']', 'date');
    }

    if (isError(value)) {
      return fmtError(value);
    }

    // Fast path for ArrayBuffer. Can't do the same for DataView because it
    // has a non-primitive buffer property that we need to recurse for.
    if (isArrayBuffer(value)) {
      return getSubName(value, 'ArrayBuffer') + ' { byteLength: ' + fmtNumber(ctx, value.byteLength) + ' }';
    }

    if (isMapIterator(value)) {
      return getSubName(value, 'MapIterator') + ' {}';
    }

    if (isSetIterator(value)) {
      return getSubName(value, 'SetIterator') + ' {}';
    }

    if (isPromise(value)) {
      return getSubName(value, 'Promise') + ' {}';
    }
  }

  var base = '';
  var empty = false;
  var braces = ['{', '}'];
  var fmtter = fmtObject;
  // We can't compare constructors for various objects using a comparison
  // like `constructor === Array` because the object could have come from a
  // different context and thus the constructor won't match. Instead we check
  // the constructor names (including those up the prototype chain where
  // needed) to determine object types.
  if (isString(value)) {
    // Make boxed primitive Strings look like such
    base = '[' + getSubName(value, 'String') + ': ' + fmtPrimNoColor(ctx, value.valueOf()) + ']';
  } else if (isNumber(value)) {
    // Make boxed primitive Numbers look like such
    base = '[' + getSubName(value, 'Number') + ': ' + fmtPrimNoColor(ctx, value.valueOf()) + ']';
  } else if (isBoolean(value)) {
    // Make boxed primitive Booleans look like such
    base = '[' + getSubName(value, 'Boolean') + ': ' + fmtPrimNoColor(ctx, value.valueOf()) + ']';
  } else if (isFunction(value)) {
    // Make functions say that they are functions
    base = '[' + getSubName(value, 'Function') + getNameSep(value) + ']';
  } else if (supportsClasses && isFunction(value, true)) {
    // Make functions say that they are functions
    base = '[Class' + getNameSep(value) + ']';
  } else if (isRegExp(value)) {
    // Make RegExps say that they are RegExps
    // name = getSubName(value, 'RegExp');
    base = pRegExpToString.call(value);
  } else if (isDate(value)) {
    // Make dates with properties first say the date
    name = getSubName(value);
    formatted = fmtDate(value);
    if (name === 'Date') {
      base = formatted;
    } else {
      base = '[' + name + ': ' + formatted + ']';
    }
  } else if (isError(value)) {
    name = getSubName(value);
    // Make error with message first say the error
    base = fmtError(value);
  } else if ($isArray(value)) {
    name = getSubName(value);
    // Unset the constructor to prevent "Array [...]" for ordinary arrays.
    name = name === 'Array' ? '' : name;
    braces = ['[', ']'];
    if (ctx.showHidden) {
      unshiftUniq(keys, 'length');
    }

    empty = value.length === 0;
    fmtter = fmtArray;
  } else if (isSet(value)) {
    name = getSubName(value, 'Set');
    fmtter = fmtSet;
    // With `showHidden`, `length` will display as a hidden property for
    // arrays. For consistency's sake, do the same for `size`, even though
    // this property isn't selected by Object.getOwnPropertyNames().
    if (ctx.showHidden) {
      unshiftUniq(keys, 'size');
    }

    empty = value.size === 0;
  } else if (isMap(value)) {
    name = getSubName(value, 'Map');
    fmtter = fmtMap;
    // With `showHidden`, `length` will display as a hidden property for
    // arrays. For consistency's sake, do the same for `size`, even though
    // this property isn't selected by Object.getOwnPropertyNames().
    if (ctx.showHidden) {
      unshiftUniq(keys, 'size');
    }

    empty = value.size === 0;
  } else if (isArrayBuffer(value)) {
    name = getSubName(value, 'ArrayBuffer');
    unshiftUniq(keys, 'byteLength');
    pushUniq(visibleKeys, 'byteLength');
  } else if (isDataView(value)) {
    name = getSubName(value, 'DataView');
    unshiftUniq(keys, 'buffer');
    unshiftUniq(keys, 'byteOffset');
    unshiftUniq(keys, 'byteLength');
    pushUniq(visibleKeys, 'byteLength');
    pushUniq(visibleKeys, 'byteOffset');
    pushUniq(visibleKeys, 'buffer');
  } else if (isTypedArray(value)) {
    name = getSubName(value);
    braces = ['[', ']'];
    fmtter = fmtTypedArray;
    if (ctx.showHidden) {
      unshiftUniq(keys, 'buffer');
      unshiftUniq(keys, 'byteOffset');
      unshiftUniq(keys, 'byteLength');
      unshiftUniq(keys, 'length');
      unshiftUniq(keys, bpe);
    }
  } else if (isPromise(value)) {
    name = getSubName(value, 'Promise');
  } else if (isMapIterator(value)) {
    name = getSubName(value, 'MapIterator');
    empty = true;
  } else if (isSetIterator(value)) {
    name = getSubName(value, 'SetIterator');
    empty = true;
  } else {
    name = getSubName(value);
    // Unset the constructor to prevent "Object {...}" for ordinary objects.
    name = name === 'Object' ? '' : name;
    empty = true; // No other data than keys.
  }

  if (base) {
    base = ' ' + base;
  } else if (name) {
    // Add constructor name if available
    braces[0] = name + ' ' + braces[0];
  }

  empty = empty === true && keys.length === 0;
  if (empty) {
    return braces[0] + base + braces[1];
  }

  if (depth < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(pRegExpToString.call(value), 'regexp');
    } else if ($isArray(value)) {
      return ctx.stylize('[Array]', 'special');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  if (ctx.seen.has(value)) {
    return ctx.stylize('[Circular]', 'special');
  }

  ctx.seen.add(value);
  var out = fmtter(ctx, value, depth, visibleKeys, keys);
  ctx.seen['delete'](value);
  return reduceToSingleString(out, base, braces);
};

inspect = function _inspect(obj, opts) {
  // default options
  var ctx = {
    seen: new collections.Set(),
    stylize: stylizeNoColor
  };

  // legacy...
  if (arguments.length >= 3 && isUndefined(arguments[2]) === false) {
    ctx.depth = arguments[2];
  }

  if (arguments.length >= 4 && isUndefined(arguments[3]) === false) {
    ctx.colors = arguments[3];
  }

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  }

  // Set default and user-specified options
  if (supportsGetSet) {
    ctx = $assign({}, inspect.defaultOptions, ctx, opts);
  } else {
    ctx = $assign({}, inspectDefaultOptions, inspect.defaultOptions, ctx, opts);
  }

  if (ctx.colors) {
    ctx.stylize = stylizeWithColor;
  }

  if (isNull(ctx.maxArrayLength)) {
    ctx.maxArrayLength = Infinity;
  }

  return fmtValue(ctx, obj, ctx.depth);
};

if (supportsGetSet) {
  defineProperty(inspect, 'defaultOptions', {
    get: function _get() {
      return inspectDefaultOptions;
    },
    set: function _set(options) {
      if (isObjectLike(options) === false) {
        throw new TypeError('"options" must be an object');
      }

      return $assign(inspectDefaultOptions, options);
    }
  });
} else {
  defineProperties(inspect, {
    defaultOptions: {
      value: $assign({}, inspectDefaultOptions),
      writable: true
    }
  });
}

defineProperties(inspect, {
  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  colors: {
    value: {
      black: [30, 39],
      blue: [34, 39],
      bold: [1, 22],
      cyan: [36, 39],
      green: [32, 39],
      grey: [90, 39],
      inverse: [7, 27],
      italic: [3, 23],
      magenta: [35, 39],
      red: [31, 39],
      underline: [4, 24],
      white: [37, 39],
      yellow: [33, 39]
    }
  },
  custom: {
    value: customInspectSymbol
  },
  // Don't use 'blue' not visible on cmd.exe
  styles: {
    value: {
      'boolean': 'yellow',
      date: 'magenta',
      // name: intentionally not styling
      'null': 'bold',
      number: 'yellow',
      regexp: 'red',
      special: 'cyan',
      string: 'green',
      symbol: 'green',
      undefined: 'grey'
    }
  }
});

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 * Values may supply their own custom `inspect(depth, opts)` functions,
 * when called they receive the current depth in the recursive inspection,
 * as well as the options object passed to `inspect`.
 *
 * @param {Object} obj - The object to print out.
 * @param {Object} [opts] - Options object that alters the out.
 * @returns {string} The string representation.
 * @example
 * var inspect = require('inspect-x');
 *
 * console.log(inspect(inspect, { showHidden: true, depth: null }));
 * //{ [Function: inspect]
 * //  [length]: 2,
 * //  [name]: 'inspect',
 * //  [prototype]: inspect { [constructor]: [Circular] },
 * //  [colors]:
 * //   { [bold]: [ 1, 22, [length]: 2 ],
 * //     [italic]: [ 3, 23, [length]: 2 ],
 * //     [underline]: [ 4, 24, [length]: 2 ],
 * //     [inverse]: [ 7, 27, [length]: 2 ],
 * //     [white]: [ 37, 39, [length]: 2 ],
 * //     [grey]: [ 90, 39, [length]: 2 ],
 * //     [black]: [ 30, 39, [length]: 2 ],
 * //     [blue]: [ 34, 39, [length]: 2 ],
 * //     [cyan]: [ 36, 39, [length]: 2 ],
 * //     [green]: [ 32, 39, [length]: 2 ],
 * //     [magenta]: [ 35, 39, [length]: 2 ],
 * //     [red]: [ 31, 39, [length]: 2 ],
 * //     [yellow]: [ 33, 39, [length]: 2 ] },
 * //  [styles]:
 * //   { [special]: 'cyan',
 * //     [number]: 'yellow',
 * //     [boolean]: 'yellow',
 * //     [undefined]: 'grey',
 * //     [null]: 'bold',
 * //     [string]: 'green',
 * //     [symbol]: 'green',
 * //     [date]: 'magenta',
 * //     [regexp]: 'red' } }
 */
module.exports = inspect;

},{"array-filter-x":7,"array-for-each-x":8,"array-includes-x":9,"array-reduce-x":17,"collections-x":41,"get-function-name-x":62,"get-prototype-of-x":68,"has-own-property-x":96,"has-symbol-support-x":72,"index-of-x":77,"is-array-buffer-x":99,"is-array-x":101,"is-async-function-x":102,"is-boolean-object":103,"is-data-view-x":105,"is-date-object":106,"is-error-x":107,"is-function-x":110,"is-generator-function":111,"is-map-x":115,"is-nan":118,"is-negative-zero":121,"is-nil-x":122,"is-number-object":123,"is-object-like-x":124,"is-primitive":126,"is-promise":127,"is-regex":128,"is-set-x":133,"is-string":134,"is-symbol":136,"is-typed-array":137,"json3":138,"lodash.isnull":139,"object-assign-x":312,"object-define-properties-x":317,"object-define-property-x":318,"object-get-own-property-descriptor-x":97,"object-keys-x":320,"reflect-own-keys-x":327,"to-iso-string-x":338,"validate.io-undefined":356,"white-space-x":357}],96:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42,"es-to-primitive/es6":50,"is-symbol":136,"safe-to-string-x":331,"to-object-x":344}],97:[function(require,module,exports){
/**
 * @file Sham for ES6 Object.getOwnPropertyDescriptor
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-get-own-property-descriptor-x
 */

'use strict';

var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getOPDFallback;

// ES5 15.2.3.3
// http://es5.github.com/#x15.2.3.3

var doesGOPDWork = function (object) {
  try {
    object.sentinel = 0;
    return $getOwnPropertyDescriptor(object, 'sentinel').value === 0;
  } catch (ignore) {
    return false;
  }
};

// check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
if ($getOwnPropertyDescriptor) {
  var getOPDWorksOnObject = doesGOPDWork({});
  var getOPDWorksOnDom = typeof document === 'undefined' || doesGOPDWork(document.createElement('div'));
  if (getOPDWorksOnDom === false || getOPDWorksOnObject === false) {
    getOPDFallback = $getOwnPropertyDescriptor;
  }
}

var toObject;
if ($getOwnPropertyDescriptor && Boolean(getOPDFallback) === false) {
  try {
    $getOwnPropertyDescriptor(42, 'name');
  } catch (err) {
    toObject = require('to-object-x');
    $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
      return $getOwnPropertyDescriptor(toObject(object), property);
    };
  }
} else if (Boolean($getOwnPropertyDescriptor) === false || getOPDFallback) {
  toObject = require('to-object-x');
  var owns = require('has-own-property-x');
  var prototypeOfObject = Object.prototype;

  var propertyIsEnumerable = prototypeOfObject.propertyIsEnumerable;
  var isEnumerable = function (object, property) {
    return propertyIsEnumerable.call(object, property);
  };

  // If JS engine supports accessors creating shortcuts.
  var lookupGetter;
  var lookupSetter;
  var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
  if (supportsAccessors) {
    // eslint-disable-next-line no-underscore-dangle
    var lg = prototypeOfObject.__lookupGetter__;
    // eslint-disable-next-line no-underscore-dangle
    var ls = prototypeOfObject.__lookupSetter__;
    lookupGetter = function (object, property) {
      return lg.call(object, property);
    };

    lookupSetter = function (object, property) {
      return ls.call(object, property);
    };
  }

  $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
    var obj = toObject(object);

    // make a valiant attempt to use the real getOwnPropertyDescriptor
    // for I8's DOM elements.
    if (getOPDFallback) {
      try {
        return getOPDFallback.call(Object, obj, property);
      } catch (ignore) {
        // try the shim if the real one doesn't work
      }
    }

    var descriptor;

    // If object does not owns property return undefined immediately.
    if (owns(obj, property) === false) {
      return descriptor;
    }

    // If object has a property then it's for sure `configurable`, and
    // probably `enumerable`. Detect enumerability though.
    descriptor = {
      configurable: true,
      enumerable: isEnumerable(obj, property)
    };

    // If JS engine supports accessor properties then property may be a
    // getter or setter.
    if (supportsAccessors) {
      // Unfortunately `__lookupGetter__` will return a getter even
      // if object has own non getter property along with a same named
      // inherited getter. To avoid misbehavior we temporary remove
      // `__proto__` so that `__lookupGetter__` will return getter only
      // if it's owned by an object.
      // eslint-disable-next-line no-proto
      var prototype = obj.__proto__;
      var notPrototypeOfObject = obj !== prototypeOfObject;
      // avoid recursion problem, breaking in Opera Mini when
      // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
      // or any other Object.prototype accessor
      if (notPrototypeOfObject) {
        // eslint-disable-next-line no-proto
        object.__proto__ = prototypeOfObject;
      }

      var getter = lookupGetter(obj, property);
      var setter = lookupSetter(obj, property);

      if (notPrototypeOfObject) {
        // Once we have getter and setter we can put values back.
        // eslint-disable-next-line no-proto
        obj.__proto__ = prototype;
      }

      if (getter || setter) {
        if (getter) {
          descriptor.get = getter;
        }

        if (setter) {
          descriptor.set = setter;
        }

        // If it was accessor property we're done and return here
        // in order to avoid adding `value` to the descriptor.
        return descriptor;
      }
    }

    // If we got this far we know that object has an own property that is
    // not an accessor so we set it as a value and return descriptor.
    descriptor.value = obj[property];
    descriptor.writable = true;
    return descriptor;
  };
}

/**
 * This method returns a property descriptor for an own property (that is,
 * one directly present on an object and not in the object's prototype chain)
 * of a given object.
 *
 * @param {*} object - The object in which to look for the property.
 * @param {*} property - The name of the property whose description is to be retrieved.
 * @returns {Object} A property descriptor of the given property if it exists on the object, undefined otherwise.
 * @example
 * var getOwnPropertyDescriptor = require('object-get-own-property-descriptor-x');
 * var obj = { bar: 42 };
 * var d = getOwnPropertyDescriptor(o, 'bar');
 * // d is {
 * //   configurable: true,
 * //   enumerable: true,
 * //   value: 42,
 * //   writable: true
 * // }
 */
module.exports = $getOwnPropertyDescriptor;

},{"has-own-property-x":96,"to-object-x":344}],98:[function(require,module,exports){
'use strict';

var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var toStr = Object.prototype.toString;

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return toStr.call(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		toStr.call(value) !== '[object Array]' &&
		toStr.call(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{}],99:[function(require,module,exports){
/**
 * @file Detect whether or not an object is an ArrayBuffer.
 * @version 1.7.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-array-buffer-x
 */

/* global ArrayBuffer */

'use strict';

var attempt = require('attempt-x');
var isObjectLike = require('is-object-like-x');
var hasABuf = typeof ArrayBuffer === 'function';
var bLength = false;
var toStringTag;
var aBufTag;

if (hasABuf) {
  if (require('has-to-string-tag-x')) {
    var getOwnPropertyDescriptor = require('object-get-own-property-descriptor-x');
    var descriptor = getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength');
    if (descriptor && typeof descriptor.get === 'function') {
      var res = attempt(function () {
        return new ArrayBuffer(4);
      });

      if (res.threw === false && isObjectLike(res.value)) {
        res = attempt.call(res.value, descriptor.get);
        bLength = res.threw === false && typeof res.value === 'number' && descriptor.get;
      }
    }
  }

  if (bLength === false) {
    toStringTag = require('to-string-tag-x');
    aBufTag = '[object ArrayBuffer]';
  }
}

/**
 * Determine if an `object` is an `ArrayBuffer`.
 *
 * @param {*} object - The object to test.
 * @returns {boolean} `true` if the `object` is an `ArrayBuffer`,
 *  else false`.
 * @example
 * var isArrayBuffer = require('is-array-buffer-x');
 *
 * isArrayBuffer(new ArrayBuffer(4)); // true
 * isArrayBuffer(null); // false
 * isArrayBuffer([]); // false
 */
module.exports = function isArrayBuffer(object) {
  if (hasABuf === false || isObjectLike(object) === false) {
    return false;
  }

  if (bLength === false) {
    return toStringTag(object) === aBufTag;
  }

  var result = attempt.call(object, bLength);
  return result.threw === false && typeof result.value === 'number';
};

},{"attempt-x":32,"has-to-string-tag-x":75,"is-object-like-x":124,"object-get-own-property-descriptor-x":319,"to-string-tag-x":348}],100:[function(require,module,exports){
/**
 * @file Determine if a value is array like.
 * @version 1.8.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-array-like-x
 */

'use strict';

var isNil = require('is-nil-x');
var isFunction = require('is-function-x');
var isLength = require('is-length-x');

/**
 * Checks if value is array-like. A value is considered array-like if it's
 * not a function and has a `length` that's an integer greater than or
 * equal to 0 and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @param {*} value - The object to be tested.
 * @returns {boolean} Returns `true` if subject is array-like, else `false`.
 * @example
 * var isArrayLike = require('is-array-like-x');
 *
 * isArrayLike([1, 2, 3]); // true
 * isArrayLike(document.body.children); // true
 * isArrayLike('abc'); // true
 * isArrayLike(_.noop); // false
 */
module.exports = function isArrayLike(value) {
  return isNil(value) === false && isFunction(value, true) === false && isLength(value.length);
};

},{"is-function-x":110,"is-length-x":114,"is-nil-x":122}],101:[function(require,module,exports){
/**
 * @file Determines whether the passed value is an Array.
 * @version 1.2.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-array-x
 */

'use strict';

var nativeIsArray = typeof Array.isArray === 'function' && Array.isArray;

var testRes = nativeIsArray && require('attempt-x')(function () {
  return nativeIsArray([]) === true && nativeIsArray({ length: 0 }) === false;
});

var $isArray;
if (testRes && testRes.threw === false && testRes.value === true) {
  $isArray = nativeIsArray;
} else {
  var toStringTag = require('to-string-tag-x');
  $isArray = function isArray(obj) {
    return toStringTag(obj) === '[object Array]';
  };
}

/**
 * The isArray() function determines whether the passed value is an Array.
 *
 * @param {*} obj - The object to be checked..
 * @returns {boolean} `true` if the object is an Array; otherwise, `false`.
 * @example
 * var isArray = require('is-array-x');
 *
 * isArray([]); // true
 * isArray({}); // false
 */
module.exports = $isArray;

},{"attempt-x":32,"to-string-tag-x":348}],102:[function(require,module,exports){
/**
 * @file Determine if a function is a native aync function.
 * @see {@link https://tc39.github.io/ecma262/#sec-async-function-definitions|14.6 Async Function Definitions}
 * @version 1.7.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-async-function-x
 */

'use strict';

var toStringTag = require('to-string-tag-x');
var hasToStringTag = require('has-to-string-tag-x');
var normalise = require('normalize-space-x').normalizeSpace2018;
var isFnRegex = /^async function/;
var test = isFnRegex.test;
var replaceComments = require('replace-comments-x');
var functionCtr = function () {}.constructor;
var fToString = functionCtr.prototype.toString;
var $getPrototypeOf = require('get-prototype-of-x');
var attempt = require('attempt-x');

var testRes = attempt(function () {
  return $getPrototypeOf(functionCtr('return async function() {}')());
});

var supportsAsync = testRes.threw === false;
var asyncProto = testRes.value;

/**
 * Checks if `value` is classified as an `Async Function` object.
 *
 * @param {*} fn - The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 * else `false`.
 * @example
 * var isAsyncFunction = require('is--async-function-x');
 *
 * isAsyncFunction(); // false
 * isAsyncFunction(Number.MIN_VALUE); // false
 * isAsyncFunction('abc'); // false
 * isAsyncFunction(true); // false
 * isAsyncFunction({ name: 'abc' }); // false
 * isAsyncFunction(function () {}); // false
 * isAsyncFunction(new Function ()); // false
 * isAsyncFunction(function* test1() {}); // false
 * isAsyncFunction(function test2(a, b) {}); // false
 * isAsyncFunction(class Test {}); // false
 * isAsyncFunction((x, y) => {return this;}); // false
 * isAsyncFunction(async functin() {}); // true
 */
module.exports = function isAsyncFunction(fn) {
  if (supportsAsync === false || typeof fn !== 'function') {
    return false;
  }

  var str;
  try {
    str = normalise(replaceComments(fToString.call(fn), ' '));
  } catch (ignore) {
    return false;
  }

  if (test.call(isFnRegex, str)) {
    return true;
  }

  if (hasToStringTag === false) {
    return toStringTag(fn) === '[object AsyncFunction]';
  }

  return $getPrototypeOf(fn) === asyncProto;
};

},{"attempt-x":32,"get-prototype-of-x":68,"has-to-string-tag-x":75,"normalize-space-x":308,"replace-comments-x":328,"to-string-tag-x":348}],103:[function(require,module,exports){
'use strict';

var boolToStr = Boolean.prototype.toString;

var tryBooleanObject = function tryBooleanObject(value) {
	try {
		boolToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var boolClass = '[object Boolean]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isBoolean(value) {
	if (typeof value === 'boolean') { return true; }
	if (typeof value !== 'object') { return false; }
	return hasToStringTag ? tryBooleanObject(value) : toStr.call(value) === boolClass;
};

},{}],104:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (typeof value === 'function' && !value.prototype) { return true; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],105:[function(require,module,exports){
/**
 * @file Detect whether or not an object is a DataView.
 * @version 1.6.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-data-view-x
 */

/* global ArrayBuffer, DataView */

'use strict';

var attempt = require('attempt-x');
var isObjectLike = require('is-object-like-x');
var hasDView = typeof DataView === 'function';
var getByteLength = false;
var legacyCheck;

if (hasDView) {
  var res = attempt(function () {
    return new DataView(new ArrayBuffer(4));
  });

  var dataView = res.threw === false && isObjectLike(res.value) && res.value;

  if (dataView && require('has-to-string-tag-x')) {
    var getOwnPropertyDescriptor = require('object-get-own-property-descriptor-x');
    var descriptor = getOwnPropertyDescriptor(DataView.prototype, 'byteLength');
    if (descriptor && typeof descriptor.get === 'function') {
      res = attempt.call(dataView, descriptor.get);
      getByteLength = res.threw === false && typeof res.value === 'number' && descriptor.get;
    }
  }

  if (getByteLength === false) {
    var toStringTag = require('to-string-tag-x');
    var dViewTag = '[object DataView]';
    if (toStringTag(dataView) === dViewTag) {
      legacyCheck = function _legacyCheck(object) {
        return toStringTag(object) === dViewTag;
      };
    } else {
      var isArrayBuffer = require('is-array-buffer-x');
      legacyCheck = function _legacyCheck(object) {
        var isByteLength = typeof object.byteLength === 'number';
        var isByteOffset = typeof object.byteOffset === 'number';
        var isGetFloat32 = typeof object.getFloat32 === 'function';
        var isSetFloat64 = typeof object.setFloat64 === 'function';
        return isByteLength && isByteOffset && isGetFloat32 && isSetFloat64 && isArrayBuffer(object.buffer);
      };
    }
  }
}

/**
 * Determine if an `object` is an `DataView`.
 *
 * @param {*} object - The object to test.
 * @returns {boolean} `true` if the `object` is a `DataView`, else `false`.
 * @example
 * var isDataView = require('is-data-view-x');
 * var ab = new ArrayBuffer(4);
 * var dv = new DataView(ab);
 *
 * isDataView(ab); // false
 * isDataView(true); // false
 * isDataView(dv); // true
 */
module.exports = function isDataView(object) {
  if (hasDView === false || isObjectLike(object) === false) {
    return false;
  }

  if (legacyCheck) {
    return legacyCheck(object);
  }

  var result = attempt.call(object, getByteLength);
  return result.threw === false && typeof result.value === 'number';
};

},{"attempt-x":32,"has-to-string-tag-x":75,"is-array-buffer-x":99,"is-object-like-x":124,"object-get-own-property-descriptor-x":319,"to-string-tag-x":348}],106:[function(require,module,exports){
'use strict';

var getDay = Date.prototype.getDay;
var tryDateObject = function tryDateObject(value) {
	try {
		getDay.call(value);
		return true;
	} catch (e) {
		return false;
	}
};

var toStr = Object.prototype.toString;
var dateClass = '[object Date]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isDateObject(value) {
	if (typeof value !== 'object' || value === null) { return false; }
	return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
};

},{}],107:[function(require,module,exports){
/**
 * @file  Detect whether a value is an error.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-error-x
 */

'use strict';

var toStringTag = require('to-string-tag-x');
var isObjectLike = require('is-object-like-x');
var $getPrototypeOf = require('get-prototype-of-x');

var errorCheck = function checkIfError(value) {
  return toStringTag(value) === '[object Error]';
};

if (errorCheck(Error.prototype) === false) {
  var errorProto = Error.prototype;
  var testStringTag = errorCheck;
  errorCheck = function checkIfError(value) {
    return value === errorProto || testStringTag(value);
  };
}

/**
 * Determine whether or not a given `value` is an `Error` type.
 *
 * @param {*} value - The object to be tested.
 * @returns {boolean} Returns `true` if `value` is an `Error` type,
 *  else `false`.
 * @example
 * var isError = require('is-error-x');
 *
 * isError(); // false
 * isError(Number.MIN_VALUE); // false
 * isError('abc'); // false
 * isError(new Error()); //true
 */
module.exports = function isError(value) {
  if (isObjectLike(value) === false) {
    return false;
  }

  var object = value;
  var maxLoop = 100;
  while (object && maxLoop > -1) {
    if (errorCheck(object)) {
      return true;
    }

    object = $getPrototypeOf(object);
    maxLoop -= 1;
  }

  return false;
};

},{"get-prototype-of-x":68,"is-object-like-x":124,"to-string-tag-x":348}],108:[function(require,module,exports){
/**
 * @file Test if a given value is falsey.
 * @version 1.0.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-falsey-x
 */

'use strict';

var toBoolean = require('to-boolean-x');

/**
 * This method tests if a given value is falsey.
 *
 * @param {*} value - The value to test.
 * @returns {boolean} `true` if the value is falsey: otherwise `false`.
 * @example
 * var isFalsey = require('is-falsey-x');
 *
 * isFalsey(); // true
 * isFalsey(0); // true
 * isFalsey(''); // true
 * isFalsey(false); // true
 * isFalsey(null); // true
 *
 * isFalsey(true); // false
 * isFalsey([]); // false
 * isFalsey(1); // false
 * isFalsey(function () {}); // false
 */
module.exports = function isFalsey(value) {
  return toBoolean(value) === false;
};

},{"to-boolean-x":336}],109:[function(require,module,exports){
/**
 * @file ES6-compliant shim for Number.isFinite.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-number.isfinite|20.1.2.2 Number.isFinite ( number )}
 * @version 3.0.4
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-finite-x
 */

'use strict';

var numberIsNaN = require('is-nan-x');
var INFINITY = require('infinity-x');

/**
 * This method determines whether the passed value is a finite number.
 *
 * @param {*} number - The value to be tested for finiteness.
 * @returns {boolean} A Boolean indicating whether or not the given value is a finite number.
 * @example
 * var numIsFinite = require('is-finite-x');
 *
 * numIsFinite(Infinity);  // false
 * numIsFinite(NaN);       // false
 * numIsFinite(-Infinity); // false
 *
 * numIsFinite(0);         // true
 * numIsFinite(2e64);      // true
 *
 * numIsFinite('0');       // false, would've been true with
 *                         // global isFinite('0')
 * numIsFinite(null);      // false, would've been true with
 */
module.exports = function isFinite(number) {
  return typeof number === 'number' && numberIsNaN(number) === false && number !== INFINITY && number !== -INFINITY;
};

},{"infinity-x":94,"is-nan-x":116}],110:[function(require,module,exports){
/**
 * @file Determine whether a given value is a function object.
 * @version 3.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-function-x
 */

'use strict';

var attempt = require('attempt-x');
var fToString = Function.prototype.toString;
var toBoolean = require('to-boolean-x');
var isFalsey = require('is-falsey-x');
var toStringTag = require('to-string-tag-x');
var hasToStringTag = require('has-to-string-tag-x');
var isPrimitive = require('is-primitive');
var normalise = require('normalize-space-x').normalizeSpace;
var deComment = require('replace-comments-x');
var funcTag = '[object Function]';
var genTag = '[object GeneratorFunction]';
var asyncTag = '[object AsyncFunction]';
var ctrRx = /^class /;
var test = ctrRx.test;

var hasNativeClass = attempt(function () {
  // eslint-disable-next-line no-new-func
  return Function('"use strict"; return class My {};')();
}).threw === false;

var testClassstring = function _testClassstring(value) {
  return test.call(ctrRx, normalise(deComment(fToString.call(value), ' ')));
};

var isES6ClassFn = function isES6ClassFunc(value) {
  var result = attempt(testClassstring, value);

  return result.threw === false && result.value;
};

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @private
 * @param {*} value - The value to check.
 * @param {boolean} allowClass - Whether to filter ES6 classes.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 * else `false`.
 */
var tryFuncToString = function funcToString(value, allowClass) {
  if (hasNativeClass && allowClass === false && isES6ClassFn(value)) {
    return false;
  }

  return attempt.call(value, fToString).threw === false;
};

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @param {*} value - The value to check.
 * @param {boolean} [allowClass=false] - Whether to filter ES6 classes.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 * else `false`.
 * @example
 * var isFunction = require('is-function-x');
 *
 * isFunction(); // false
 * isFunction(Number.MIN_VALUE); // false
 * isFunction('abc'); // false
 * isFunction(true); // false
 * isFunction({ name: 'abc' }); // false
 * isFunction(function () {}); // true
 * isFunction(new Function ()); // true
 * isFunction(function* test1() {}); // true
 * isFunction(function test2(a, b) {}); // true
 * isFunction(async function test3() {}); // true
 * isFunction(class Test {}); // false
 * isFunction(class Test {}, true); // true
 * isFunction((x, y) => {return this;}); // true
 */
module.exports = function isFunction(value) {
  if (isPrimitive(value)) {
    return false;
  }

  if (hasToStringTag) {
    return tryFuncToString(value, toBoolean(arguments[1]));
  }

  if (hasNativeClass && isFalsey(arguments[1]) && isES6ClassFn(value)) {
    return false;
  }

  var strTag = toStringTag(value);
  return strTag === funcTag || strTag === genTag || strTag === asyncTag;
};

},{"attempt-x":32,"has-to-string-tag-x":75,"is-falsey-x":108,"is-primitive":126,"normalize-space-x":308,"replace-comments-x":328,"to-boolean-x":336,"to-string-tag-x":348}],111:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var generatorFunc = getGeneratorFunc();
var GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	return getProto(fn) === GeneratorFunction;
};

},{}],112:[function(require,module,exports){
/**
 * @file Determine whether the passed value is a zero based index.
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-index-x
 */

'use strict';

var safeToString = require('to-string-symbols-supported-x');
var toInteger = require('to-integer-x').toInteger2018;
var toNumber = require('to-number-x').toNumber2018;
var mathClamp = require('math-clamp-x');
var MAX_SAFE_INTEGER = require('max-safe-integer');
var reIsUint = /^(?:0|[1-9]\d*)$/;
var rxTest = reIsUint.test;

/**
 * This method determines whether the passed value is a zero based index.
 * JavaScript arrays are zero-indexed: the first element of an array is at
 * index 0, and the last element is at the index equal to the value of the
 * array's length property minus 1.
 *
 * @param {number|string} value - The value to be tested for being a zero based index.
 * @param {number} [length=MAX_SAFE_INTEGER] - The length that sets the upper bound.
 * @returns {boolean} A Boolean indicating whether or not the given value is a
 * zero based index within bounds.
 * @example
 * var isIndex = require('is-index-x');
 *
 * isIndex(0);                    // true
 * isIndex(1);                    // true
 * isIndex('10');                 // true
 *
 * isIndex(-100000);              // false
 * isIndex(Math.pow(2, 53));      // false
 * isIndex(0.1);                  // false
 * isIndex(Math.PI);              // false
 * isIndex(NaN);                  // false
 * isIndex(Infinity);             // false
 * isIndex(-Infinity);            // false
 * isIndex(true);                 // false
 * isIndex(false);                // false
 * isIndex([1]);                  // false
 * isIndex(10, 10);               // false
 */
module.exports = function isIndex(value) {
  var string = safeToString(value);
  if (rxTest.call(reIsUint, string) === false) {
    return false;
  }

  var number = toNumber(string);
  if (arguments.length > 1) {
    return number < mathClamp(toInteger(arguments[1]), MAX_SAFE_INTEGER);
  }

  return number < MAX_SAFE_INTEGER;
};

},{"math-clamp-x":298,"max-safe-integer":300,"to-integer-x":337,"to-number-x":340,"to-string-symbols-supported-x":347}],113:[function(require,module,exports){
/**
 * @file Determine whether the passed value is an integer.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-integer-x
 */

'use strict';

var numberIsFinite = require('is-finite-x');
var toInteger = require('to-integer-x').toInteger2018;

/**
 * This method determines whether the passed value is an integer.
 *
 * @param {*} value - The value to be tested for being an integer.
 * @returns {boolean} A Boolean indicating whether or not the given value is an integer.
 * @example
 * var isInteger = require('is-integer-x');
 *
 * isInteger(0);         // true
 * isInteger(1);         // true
 * isInteger(-100000);   // true
 *
 * isInteger(0.1);       // false
 * isInteger(Math.PI);   // false
 *
 * isInteger(NaN);       // false
 * isInteger(Infinity);  // false
 * isInteger(-Infinity); // false
 * isInteger('10');      // false
 * isInteger(true);      // false
 * isInteger(false);     // false
 * isInteger([1]);       // false
 */
module.exports = function isInteger(value) {
  return numberIsFinite(value) && toInteger(value) === value;
};

},{"is-finite-x":109,"to-integer-x":337}],114:[function(require,module,exports){
/**
 * @file Checks if `value` is a valid array-like length.
 * @version 2.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-length-x
 */

'use strict';

var isSafeInteger = require('is-safe-integer-x');

/**
 * This method checks if `value` is a valid array-like length.
 *
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 * var isLength = require('is-length-x');
 *
 * isLength(3); // => true
 * isLength(Number.MIN_VALUE); // => false
 * isLength(Infinity); // => false
 * isLength('3'); // => false
 */
module.exports = function isLength(value) {
  return isSafeInteger(value) && value >= 0;
};

},{"is-safe-integer-x":132}],115:[function(require,module,exports){
/**
 * @file Detect whether or not an object is an ES6 Map.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-map-x
 */

'use strict';

var isFalsey = require('is-falsey-x');
var attempt;
var isObjectLike;
var isLength;
var getSize;

if (typeof Map === 'function') {
  var descriptor = require('object-get-own-property-descriptor-x')(Map.prototype, 'size');
  if (descriptor && typeof descriptor.get === 'function') {
    attempt = require('attempt-x');
    isObjectLike = require('is-object-like-x');
    var res = attempt(function () {
      return new Map();
    });

    if (res.threw === false && isObjectLike(res.value)) {
      isLength = require('is-length-x');
      res = attempt.call(res.value, descriptor.get);
      if (res.threw === false && isLength(res.value)) {
        getSize = descriptor.get;
      }
    }

  }
}

/**
 * Determine if an `object` is a `Map`.
 *
 * @param {*} object - The object to test.
 * @returns {boolean} `true` if the `object` is a `Map`,
 *  else `false`.
 * @example
 * var isMap = require('is-map-x');
 * var m = new Map();
 *
 * isMap([]); // false
 * isMap(true); // false
 * isMap(m); // true
 */
module.exports = function isMap(object) {
  if (isFalsey(getSize) || isObjectLike(object) === false) {
    return false;
  }

  var result = attempt.call(object, getSize);
  return result.threw === false && isLength(result.value);
};

},{"attempt-x":32,"is-falsey-x":108,"is-length-x":114,"is-object-like-x":124,"object-get-own-property-descriptor-x":319}],116:[function(require,module,exports){
/**
 * @file ES6-compliant shim for Number.isNaN - the global isNaN returns false positives.
 * @version 1.0.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-nan-x
 */

'use strict';

/**
 * This method determines whether the passed value is NaN and its type is
 * `Number`. It is a more robust version of the original, global isNaN().
 *
 * @param {*} value - The value to be tested for NaN.
 * @returns {boolean} `true` if the given value is NaN and its type is Number;
 *  otherwise, `false`.
 * @example
 * var numberIsNaN = require('is-nan-x');
 *
 * numberIsNaN(NaN);        // true
 * numberIsNaN(Number.NaN); // true
 * numberIsNaN(0 / 0);      // true
 *
 * // e.g. these would have been true with global isNaN()
 * numberIsNaN('NaN');      // false
 * numberIsNaN(undefined);  // false
 * numberIsNaN({});         // false
 * numberIsNaN('blabla');   // false
 *
 * // These all return false
 * numberIsNaN(true);
 * numberIsNaN(null);
 * numberIsNaN(37);
 * numberIsNaN('37');
 * numberIsNaN('37.37');
 * numberIsNaN('');
 * numberIsNaN(' ');
 */
module.exports = function isNaN(value) {
  return value !== value;
};

},{}],117:[function(require,module,exports){
'use strict';

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};

},{}],118:[function(require,module,exports){
'use strict';

var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(implementation, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = implementation;

},{"./implementation":117,"./polyfill":119,"./shim":120,"define-properties":48}],119:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};

},{"./implementation":117}],120:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, { isNaN: function () { return Number.isNaN !== polyfill; } });
	return polyfill;
};

},{"./polyfill":119,"define-properties":48}],121:[function(require,module,exports){
'use strict';

module.exports = function isNegativeZero(number) {
	return number === 0 && (1 / number) === -Infinity;
};


},{}],122:[function(require,module,exports){
/**
 * @file Checks if `value` is `null` or `undefined`.
 * @version 1.4.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-nil-x
 */

'use strict';

var isUndefined = require('validate.io-undefined');
var isNull = require('lodash.isnull');

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 * var isNil = require('is-nil-x');
 *
 * isNil(null); // => true
 * isNil(void 0); // => true
 * isNil(NaN); // => false
 */
module.exports = function isNil(value) {
  return isNull(value) || isUndefined(value);
};

},{"lodash.isnull":139,"validate.io-undefined":356}],123:[function(require,module,exports){
'use strict';

var numToStr = Number.prototype.toString;
var tryNumberObject = function tryNumberObject(value) {
	try {
		numToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var numClass = '[object Number]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isNumberObject(value) {
	if (typeof value === 'number') { return true; }
	if (typeof value !== 'object') { return false; }
	return hasToStringTag ? tryNumberObject(value) : toStr.call(value) === numClass;
};

},{}],124:[function(require,module,exports){
/**
 * @file Determine if a value is object like.
 * @version 1.7.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-object-like-x
 */

'use strict';

var isFunction = require('is-function-x');
var isPrimitive = require('is-primitive');

/**
 * Checks if `value` is object-like. A value is object-like if it's not a
 * primitive and not a function.
 *
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 * var isObjectLike = require('is-object-like-x');
 *
 * isObjectLike({});
 * // => true
 *
 * isObjectLike([1, 2, 3]);
 * // => true
 *
 * isObjectLike(_.noop);
 * // => false
 *
 * isObjectLike(null);
 * // => false
 */
module.exports = function isObjectLike(value) {
  return isPrimitive(value) === false && isFunction(value, true) === false;
};

},{"is-function-x":110,"is-primitive":125}],125:[function(require,module,exports){
/*!
 * is-primitive <https://github.com/jonschlinkert/is-primitive>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

module.exports = function isPrimitive(val) {
  if (typeof val === 'object') {
    return val === null;
  }
  return typeof val !== 'function';
};

},{}],126:[function(require,module,exports){
/*!
 * is-primitive <https://github.com/jonschlinkert/is-primitive>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

// see http://jsperf.com/testing-value-is-primitive/7
module.exports = function isPrimitive(value) {
  return value == null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],127:[function(require,module,exports){
module.exports = isPromise;

function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}

},{}],128:[function(require,module,exports){
'use strict';

var has = require('has');
var regexExec = RegExp.prototype.exec;
var gOPD = Object.getOwnPropertyDescriptor;

var tryRegexExecCall = function tryRegexExec(value) {
	try {
		var lastIndex = value.lastIndex;
		value.lastIndex = 0;

		regexExec.call(value);
		return true;
	} catch (e) {
		return false;
	} finally {
		value.lastIndex = lastIndex;
	}
};
var toStr = Object.prototype.toString;
var regexClass = '[object RegExp]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isRegex(value) {
	if (!value || typeof value !== 'object') {
		return false;
	}
	if (!hasToStringTag) {
		return toStr.call(value) === regexClass;
	}

	var descriptor = gOPD(value, 'lastIndex');
	var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
	if (!hasLastIndexDataProperty) {
		return false;
	}

	return tryRegexExecCall(value);
};

},{"has":76}],129:[function(require,module,exports){
/**
 * @file Is this value a JS regex?
 * @version 2.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-regexp-x
 */

'use strict';

var isObjectLike = require('is-object-like-x');

var toStringTag;
var regexClass;
var has;
var gOPD;
var regexExec;
var defineProperty;

if (require('has-to-string-tag-x')) {
  has = require('has-own-property-x');
  gOPD = require('object-get-own-property-descriptor-x');
  defineProperty = require('object-define-property-x');
  regexExec = RegExp.prototype.exec;
} else {
  toStringTag = require('to-string-tag-x');
  regexClass = '[object RegExp]';
}

var tryRegexExecCall = function tryRegexExec(value, descriptor) {
  try {
    value.lastIndex = 0;
    regexExec.call(value);
    return true;
  } catch (e) {
    return false;
  } finally {
    defineProperty(value, 'lastIndex', descriptor);
  }
};

/**
 * This method tests if a value is a regex.
 *
 * @param {*} value - The value to test.
 * @returns {boolean} `true` if value is a regex; otherwise `false`.
 * @example
 * var isRegex = require('is-regexp-x');
 *
 * isRegex(undefined); // false
 * isRegex(null); // false
 * isRegex(false); // false
 * isRegex(true); // false
 * isRegex(42); // false
 * isRegex('foo'); // false
 * isRegex(function () {}); // false
 * isRegex([]); // false
 * isRegex({})); // false
 *
 * isRegex(/a/g); // true
 * isRegex(new RegExp('a', 'g')); // true
 */
module.exports = function isRegex(value) {
  if (isObjectLike(value) === false) {
    return false;
  }

  if (toStringTag) {
    return toStringTag(value) === regexClass;
  }

  var descriptor = gOPD(value, 'lastIndex');
  var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
  if (hasLastIndexDataProperty !== true) {
    return false;
  }

  return tryRegexExecCall(value, descriptor);
};

},{"has-own-property-x":70,"has-to-string-tag-x":75,"is-object-like-x":124,"object-define-property-x":131,"object-get-own-property-descriptor-x":319,"to-string-tag-x":348}],130:[function(require,module,exports){
/**
 * @file If IsObject(value) is false, throw a TypeError exception.
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module assert-is-object-x
 */

'use strict';

var safeToString = require('to-string-symbols-supported-x');
var isPrimitive = require('is-primitive');

/**
   * Tests `value` to see if it is an object, throws a `TypeError` if it is
   * not. Otherwise returns the `value`.
   *
   * @param {*} value - The argument to be tested.
   * @throws {TypeError} Throws if `value` is not an object.
   * @returns {*} Returns `value` if it is an object.
   * @example
   * var assertIsObject = require('assert-is-object-x');
   * var primitive = true;
   * var mySymbol = Symbol('mySymbol');
   * var symObj = Object(mySymbol);
   * var object = {};
   * function fn () {}
   *
   * assertIsObject(primitive); // TypeError 'true is not an object'
   * assertIsObject(mySymbol); // TypeError 'Symbol(mySymbol) is not an object'
   * assertIsObject(symObj); // Returns symObj.
   * assertIsObject(object); // Returns object.
   * assertIsObject(fn); // Returns fn.
   */
module.exports = function assertIsObject(value) {
  if (isPrimitive(value)) {
    throw new TypeError(safeToString(value) + ' is not an object');
  }

  return value;
};

},{"is-primitive":126,"to-string-symbols-supported-x":347}],131:[function(require,module,exports){
/**
 * @file Sham for Object.defineProperty
 * @version 4.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-define-property-x
 */

'use strict';

var attempt = require('attempt-x');
var isFalsey = require('is-falsey-x');
var toObject = require('to-object-x');
var toPropertyKey = require('to-property-key-x');
var has = require('has-own-property-x');
var isFunction = require('is-function-x');
var isUndefined = require('validate.io-undefined');
var assertIsObject = require('assert-is-object-x');
var nativeDefProp = typeof Object.defineProperty === 'function' && Object.defineProperty;
var definePropertyFallback;

var toPropertyDescriptor = function _toPropertyDescriptor(desc) {
  var object = toObject(desc);
  var descriptor = {};
  if (has(object, 'enumerable')) {
    descriptor.enumerable = Boolean(object.enumerable);
  }

  if (has(object, 'configurable')) {
    descriptor.configurable = Boolean(object.configurable);
  }

  if (has(object, 'value')) {
    descriptor.value = object.value;
  }

  if (has(object, 'writable')) {
    descriptor.writable = Boolean(object.writable);
  }

  if (has(object, 'get')) {
    var getter = object.get;
    if (isUndefined(getter) === false && isFunction(getter) === false) {
      throw new TypeError('getter must be a function');
    }

    descriptor.get = getter;
  }

  if (has(object, 'set')) {
    var setter = object.set;
    if (isUndefined(setter) === false && isFunction(setter) === false) {
      throw new TypeError('setter must be a function');
    }

    descriptor.set = setter;
  }

  if ((has(descriptor, 'get') || has(descriptor, 'set')) && (has(descriptor, 'value') || has(descriptor, 'writable'))) {
    throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
  }

  return descriptor;
};

// ES5 15.2.3.6
// http://es5.github.com/#x15.2.3.6

// Patch for WebKit and IE8 standard mode
// Designed by hax <hax.github.com>
// related issue: https://github.com/es-shims/es5-shim/issues#issue/5
// IE8 Reference:
//     http://msdn.microsoft.com/en-us/library/dd282900.aspx
//     http://msdn.microsoft.com/en-us/library/dd229916.aspx
// WebKit Bugs:
//     https://bugs.webkit.org/show_bug.cgi?id=36423

var $defineProperty;
// check whether defineProperty works if it's given. Otherwise, shim partially.
if (nativeDefProp) {
  var testWorksWith = function _testWorksWith(object) {
    var testResult = attempt(nativeDefProp, object, 'sentinel', {});
    return testResult.threw === false && testResult.value === object && 'sentinel' in object;
  };

  var doc = typeof document !== 'undefined' && document;
  if (testWorksWith({}) && (isFalsey(doc) || testWorksWith(doc.createElement('div')))) {
    $defineProperty = function defineProperty(object, property, descriptor) {
      return nativeDefProp(assertIsObject(object), toPropertyKey(property), toPropertyDescriptor(descriptor));
    };
  } else {
    definePropertyFallback = nativeDefProp;
  }
}

if (isFalsey(nativeDefProp) || definePropertyFallback) {
  var prototypeOfObject = Object.prototype;

  // If JS engine supports accessors creating shortcuts.
  var defineGetter;
  var defineSetter;
  var lookupGetter;
  var lookupSetter;
  var supportsAccessors = has(prototypeOfObject, '__defineGetter__');
  if (supportsAccessors) {
    /* eslint-disable no-underscore-dangle, no-restricted-properties */
    defineGetter = prototypeOfObject.__defineGetter__;
    defineSetter = prototypeOfObject.__defineSetter__;
    lookupGetter = prototypeOfObject.__lookupGetter__;
    lookupSetter = prototypeOfObject.__lookupSetter__;
    /* eslint-enable no-underscore-dangle, no-restricted-properties */
  }

  $defineProperty = function defineProperty(object, property, descriptor) {
    assertIsObject(object);
    var propKey = toPropertyKey(property);
    var propDesc = toPropertyDescriptor(descriptor);

    // make a valiant attempt to use the real defineProperty for IE8's DOM elements.
    if (definePropertyFallback) {
      var result = attempt.call(Object, definePropertyFallback, object, propKey, propDesc);
      if (result.threw === false) {
        return result.value;
      }
      // try the shim if the real one doesn't work
    }

    // If it's a data property.
    if (has(propDesc, 'value')) {
      // fail silently if 'writable', 'enumerable', or 'configurable' are requested but not supported
      if (supportsAccessors && (lookupGetter.call(object, propKey) || lookupSetter.call(object, propKey))) {
        // As accessors are supported only on engines implementing
        // `__proto__` we can safely override `__proto__` while defining
        // a property to make sure that we don't hit an inherited accessor.
        /* eslint-disable no-proto */
        var prototype = object.__proto__;
        object.__proto__ = prototypeOfObject;
        // Deleting a property anyway since getter / setter may be defined on object itself.
        delete object[propKey];
        object[propKey] = propDesc.value;
        // Setting original `__proto__` back now.
        object.__proto__ = prototype;
        /* eslint-enable no-proto */
      } else {
        object[propKey] = propDesc.value;
      }
    } else {
      if (supportsAccessors === false && (propDesc.get || propDesc.set)) {
        throw new TypeError('getters & setters can not be defined on this javascript engine');
      }

      // If we got that far then getters and setters can be defined !!
      if (propDesc.get) {
        defineGetter.call(object, propKey, propDesc.get);
      }

      if (propDesc.set) {
        defineSetter.call(object, propKey, propDesc.set);
      }
    }

    return object;
  };
}

/**
 * This method defines a new property directly on an object, or modifies an
 * existing property on an object, and returns the object.
 *
 * @param {Object} object - The object on which to define the property.
 * @param {string} property - The name of the property to be defined or modified.
 * @param {Object} descriptor - The descriptor for the property being defined or modified.
 * @returns {Object} The object that was passed to the function.
 * @example
 * var defineProperty = require('object-define-property-x');
 *
 * var o = {}; // Creates a new object
 *
 * defineProperty(o, 'a', {
 *   value: 37,
 *   writable: true
 * });
 */
module.exports = $defineProperty;

},{"assert-is-object-x":130,"attempt-x":32,"has-own-property-x":70,"is-falsey-x":108,"is-function-x":110,"to-object-x":344,"to-property-key-x":346,"validate.io-undefined":356}],132:[function(require,module,exports){
/**
 * @file Determine whether the passed value is a safe integer.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-safe-integer-x
 */

'use strict';

var isInteger = require('is-integer-x');
var MAX_SAFE_INTEGER = require('max-safe-integer');
var MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;

/**
 * This method determines whether the passed value is a safe integer.
 *
 * Can be exactly represented as an IEEE-754 double precision number, and
 * whose IEEE-754 representation cannot be the result of rounding any other
 * integer to fit the IEEE-754 representation.
 *
 * @param {*} value - The value to be tested for being a safe integer.
 * @returns {boolean} A Boolean indicating whether or not the given value is a
 *  safe integer.
 * @example
 * var isSafeInteger = require('is-safe-integer-x');
 *
 * isSafeInteger(0);                    // true
 * isSafeInteger(1);                    // true
 * isSafeInteger(-100000);              // true
 *
 * isSafeInteger(Math.pow(2, 53));      // false
 * isSafeInteger(0.1);                  // false
 * isSafeInteger(Math.PI);              // false
 *
 * isSafeInteger(NaN);                  // false
 * isSafeInteger(Infinity);             // false
 * isSafeInteger(-Infinity);            // false
 * isSafeInteger('10');                 // false
 * isSafeInteger(true);                 // false
 * isSafeInteger(false);                // false
 * isSafeInteger([1]);                  // false
 */
module.exports = function isSafeInteger(value) {
  return isInteger(value) && value >= MIN_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
};

},{"is-integer-x":113,"max-safe-integer":300}],133:[function(require,module,exports){
/**
 * @file Detect whether or not an object is an ES6 SET.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-set-x
 */

'use strict';

var isFalsey = require('is-falsey-x');
var attempt;
var isObjectLike;
var isLength;
var getSize;

if (typeof Set === 'function') {
  var descriptor = require('object-get-own-property-descriptor-x')(Set.prototype, 'size');
  if (descriptor && typeof descriptor.get === 'function') {
    attempt = require('attempt-x');
    isObjectLike = require('is-object-like-x');
    var res = attempt(function () {
      return new Set();
    });

    if (res.threw === false && isObjectLike(res.value)) {
      isLength = require('is-length-x');
      res = attempt.call(res.value, descriptor.get);
      if (res.threw === false && isLength(res.value)) {
        getSize = descriptor.get;
      }
    }

  }
}

/**
 * Determine if an `object` is a `Set`.
 *
 * @param {*} object - The object to test.
 * @returns {boolean} `true` if the `object` is a `Set`,
 *  else `false`.
 * @example
 * var isSet = require('is-set-x');
 * var s = new Set();
 *
 * isSet([]); // false
 * isSet(true); // false
 * isSet(s); // true
 */
module.exports = function isSet(object) {
  if (isFalsey(getSize) || isObjectLike(object) === false) {
    return false;
  }

  var result = attempt.call(object, getSize);
  return result.threw === false && isLength(result.value);
};

},{"attempt-x":32,"is-falsey-x":108,"is-length-x":114,"is-object-like-x":124,"object-get-own-property-descriptor-x":319}],134:[function(require,module,exports){
'use strict';

var strValue = String.prototype.valueOf;
var tryStringObject = function tryStringObject(value) {
	try {
		strValue.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var strClass = '[object String]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isString(value) {
	if (typeof value === 'string') { return true; }
	if (typeof value !== 'object') { return false; }
	return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;
};

},{}],135:[function(require,module,exports){
/**
 * @file Tests if 2 characters together are a surrogate pair.
 * @version 1.4.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module is-surrogate-pair-x
 */

'use strict';

var isString = require('is-string');

/**
 * Tests if the two character arguments combined are a valid UTF-16
 * surrogate pair.
 *
 * @param {*} char1 - The first character of a suspected surrogate pair.
 * @param {*} char2 - The second character of a suspected surrogate pair.
 * @returns {boolean} Returns true if the two characters create a valid
 *  'UTF-16' surrogate pair; otherwise false.
 * @example
 * var isSurrogatePair = require('is-surrogate-pair-x');
 *
 * var test1 = 'a';
 * var test2 = '𠮟';
 *
 * isSurrogatePair(test1.charAt(0), test1.charAt(1)); // false
 * isSurrogatePair(test2.charAt(0), test2.charAt(1)); // true
 */
module.exports = function isSurrogatePair(char1, char2) {
  if (isString(char1) && char1.length === 1 && isString(char2) && char2.length === 1) {
    var code1 = char1.charCodeAt();
    if (code1 >= 0xD800 && code1 <= 0xDBFF) {
      var code2 = char2.charCodeAt();
      if (code2 >= 0xDC00 && code2 <= 0xDFFF) {
        return true;
      }
    }
  }

  return false;
};

},{"is-string":134}],136:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;
var hasSymbols = require('has-symbols')();

if (hasSymbols) {
	var symToStr = Symbol.prototype.toString;
	var symStringRegex = /^Symbol\(.*\)$/;
	var isSymbolObject = function isRealSymbolObject(value) {
		if (typeof value.valueOf() !== 'symbol') {
			return false;
		}
		return symStringRegex.test(symToStr.call(value));
	};

	module.exports = function isSymbol(value) {
		if (typeof value === 'symbol') {
			return true;
		}
		if (toStr.call(value) !== '[object Symbol]') {
			return false;
		}
		try {
			return isSymbolObject(value);
		} catch (e) {
			return false;
		}
	};
} else {

	module.exports = function isSymbol(value) {
		// this environment does not support Symbols.
		return false && value;
	};
}

},{"has-symbols":73}],137:[function(require,module,exports){
(function (global){
'use strict';

var forEach = require('foreach');

var toStr = Object.prototype.toString;
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

var typedArrays = {
	Float32Array: true,
	Float64Array: true,
	Int8Array: true,
	Int16Array: true,
	Int32Array: true,
	Uint8Array: true,
	Uint8ClampedArray: true,
	Uint16Array: true,
	Uint32Array: true
};

var slice = String.prototype.slice;
var toStrTags = {};
var gOPD = Object.getOwnPropertyDescriptor;
if (hasToStringTag && gOPD && Object.getPrototypeOf) {
	forEach(typedArrays, function (_, typedArray) {
		var arr = new global[typedArray]();
		if (!(Symbol.toStringTag in arr)) {
			throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
		}
		var proto = Object.getPrototypeOf(arr);
		var descriptor = gOPD(proto, Symbol.toStringTag);
		if (!descriptor) {
			var superProto = Object.getPrototypeOf(proto);
			descriptor = gOPD(superProto, Symbol.toStringTag);
		}
		toStrTags[typedArray] = descriptor.get;
	});
}

var tryTypedArrays = function tryTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) { return !!typedArrays[slice.call(toStr.call(value), 8, -1)]; }
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"foreach":58}],138:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],139:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;

},{}],140:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":208,"./_root":249}],141:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":216,"./_hashDelete":217,"./_hashGet":218,"./_hashHas":219,"./_hashSet":220}],142:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":230,"./_listCacheDelete":231,"./_listCacheGet":232,"./_listCacheHas":233,"./_listCacheSet":234}],143:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":208,"./_root":249}],144:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":235,"./_mapCacheDelete":236,"./_mapCacheGet":237,"./_mapCacheHas":238,"./_mapCacheSet":239}],145:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":208,"./_root":249}],146:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":208,"./_root":249}],147:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":142,"./_stackClear":252,"./_stackDelete":253,"./_stackGet":254,"./_stackHas":255,"./_stackSet":256}],148:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":249}],149:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":249}],150:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":208,"./_root":249}],151:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],152:[function(require,module,exports){
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],153:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],154:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":184,"./_isIndex":225,"./isArguments":267,"./isArray":268,"./isBuffer":270,"./isTypedArray":283}],155:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],156:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],157:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

},{"./_baseAssignValue":161,"./eq":262}],158:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":262}],159:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keys = require('./keys');

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

},{"./_copyObject":197,"./keys":285}],160:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

},{"./_copyObject":197,"./keysIn":286}],161:[function(require,module,exports){
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

},{"./_defineProperty":202}],162:[function(require,module,exports){
var Stack = require('./_Stack'),
    arrayEach = require('./_arrayEach'),
    assignValue = require('./_assignValue'),
    baseAssign = require('./_baseAssign'),
    baseAssignIn = require('./_baseAssignIn'),
    cloneBuffer = require('./_cloneBuffer'),
    copyArray = require('./_copyArray'),
    copySymbols = require('./_copySymbols'),
    copySymbolsIn = require('./_copySymbolsIn'),
    getAllKeys = require('./_getAllKeys'),
    getAllKeysIn = require('./_getAllKeysIn'),
    getTag = require('./_getTag'),
    initCloneArray = require('./_initCloneArray'),
    initCloneByTag = require('./_initCloneByTag'),
    initCloneObject = require('./_initCloneObject'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isMap = require('./isMap'),
    isObject = require('./isObject'),
    isSet = require('./isSet'),
    keys = require('./keys');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });

    return result;
  }

  if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });

    return result;
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

},{"./_Stack":147,"./_arrayEach":152,"./_assignValue":157,"./_baseAssign":159,"./_baseAssignIn":160,"./_cloneBuffer":191,"./_copyArray":196,"./_copySymbols":198,"./_copySymbolsIn":199,"./_getAllKeys":205,"./_getAllKeysIn":206,"./_getTag":213,"./_initCloneArray":221,"./_initCloneByTag":222,"./_initCloneObject":223,"./isArray":268,"./isBuffer":270,"./isMap":275,"./isObject":277,"./isSet":280,"./keys":285}],163:[function(require,module,exports){
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;

},{"./isObject":277}],164:[function(require,module,exports){
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],165:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isFlattenable = require('./_isFlattenable');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

},{"./_arrayPush":156,"./_isFlattenable":224}],166:[function(require,module,exports){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":189,"./_toKey":259}],167:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":156,"./isArray":268}],168:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":148,"./_getRawTag":210,"./_objectToString":245}],169:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],170:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

},{"./_baseFindIndex":164,"./_baseIsNaN":173,"./_strictIndexOf":257}],171:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":168,"./isObjectLike":278}],172:[function(require,module,exports){
var getTag = require('./_getTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;

},{"./_getTag":213,"./isObjectLike":278}],173:[function(require,module,exports){
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

},{}],174:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":228,"./_toSource":260,"./isFunction":273,"./isObject":277}],175:[function(require,module,exports){
var getTag = require('./_getTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;

},{"./_getTag":213,"./isObjectLike":278}],176:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":168,"./isLength":274,"./isObjectLike":278}],177:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":229,"./_nativeKeys":242}],178:[function(require,module,exports){
var isObject = require('./isObject'),
    isPrototype = require('./_isPrototype'),
    nativeKeysIn = require('./_nativeKeysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

},{"./_isPrototype":229,"./_nativeKeysIn":243,"./isObject":277}],179:[function(require,module,exports){
var basePickBy = require('./_basePickBy'),
    hasIn = require('./hasIn');

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

},{"./_basePickBy":180,"./hasIn":264}],180:[function(require,module,exports){
var baseGet = require('./_baseGet'),
    baseSet = require('./_baseSet'),
    castPath = require('./_castPath');

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;

},{"./_baseGet":166,"./_baseSet":181,"./_castPath":189}],181:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    castPath = require('./_castPath'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;

},{"./_assignValue":157,"./_castPath":189,"./_isIndex":225,"./_toKey":259,"./isObject":277}],182:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":202,"./constant":261,"./identity":265}],183:[function(require,module,exports){
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

},{}],184:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],185:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":148,"./_arrayMap":155,"./isArray":268,"./isSymbol":282}],186:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],187:[function(require,module,exports){
var castPath = require('./_castPath'),
    last = require('./last'),
    parent = require('./_parent'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;

},{"./_castPath":189,"./_parent":248,"./_toKey":259,"./last":287}],188:[function(require,module,exports){
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;

},{"./_arrayMap":155}],189:[function(require,module,exports){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./_isKey":226,"./_stringToPath":258,"./isArray":268,"./toString":296}],190:[function(require,module,exports){
var Uint8Array = require('./_Uint8Array');

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

},{"./_Uint8Array":149}],191:[function(require,module,exports){
var root = require('./_root');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

},{"./_root":249}],192:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

},{"./_cloneArrayBuffer":190}],193:[function(require,module,exports){
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

},{}],194:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

},{"./_Symbol":148}],195:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":190}],196:[function(require,module,exports){
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

},{}],197:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":157,"./_baseAssignValue":161}],198:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    getSymbols = require('./_getSymbols');

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

},{"./_copyObject":197,"./_getSymbols":211}],199:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    getSymbolsIn = require('./_getSymbolsIn');

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

},{"./_copyObject":197,"./_getSymbolsIn":212}],200:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":249}],201:[function(require,module,exports){
var isPlainObject = require('./isPlainObject');

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;

},{"./isPlainObject":279}],202:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":208}],203:[function(require,module,exports){
var flatten = require('./flatten'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

},{"./_overRest":247,"./_setToString":250,"./flatten":263}],204:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],205:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":167,"./_getSymbols":211,"./keys":285}],206:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbolsIn = require('./_getSymbolsIn'),
    keysIn = require('./keysIn');

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

},{"./_baseGetAllKeys":167,"./_getSymbolsIn":212,"./keysIn":286}],207:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":227}],208:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":174,"./_getValue":214}],209:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":246}],210:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":148}],211:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":153,"./stubArray":291}],212:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    getPrototype = require('./_getPrototype'),
    getSymbols = require('./_getSymbols'),
    stubArray = require('./stubArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;

},{"./_arrayPush":156,"./_getPrototype":209,"./_getSymbols":211,"./stubArray":291}],213:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":140,"./_Map":143,"./_Promise":145,"./_Set":146,"./_WeakMap":150,"./_baseGetTag":168,"./_toSource":260}],214:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],215:[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":189,"./_isIndex":225,"./_toKey":259,"./isArguments":267,"./isArray":268,"./isLength":274}],216:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":241}],217:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],218:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":241}],219:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":241}],220:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":241}],221:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

},{}],222:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer'),
    cloneDataView = require('./_cloneDataView'),
    cloneRegExp = require('./_cloneRegExp'),
    cloneSymbol = require('./_cloneSymbol'),
    cloneTypedArray = require('./_cloneTypedArray');

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":190,"./_cloneDataView":192,"./_cloneRegExp":193,"./_cloneSymbol":194,"./_cloneTypedArray":195}],223:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    getPrototype = require('./_getPrototype'),
    isPrototype = require('./_isPrototype');

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;

},{"./_baseCreate":163,"./_getPrototype":209,"./_isPrototype":229}],224:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray');

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

},{"./_Symbol":148,"./isArguments":267,"./isArray":268}],225:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],226:[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":268,"./isSymbol":282}],227:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],228:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":200}],229:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],230:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],231:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":158}],232:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":158}],233:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":158}],234:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":158}],235:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":141,"./_ListCache":142,"./_Map":143}],236:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":207}],237:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":207}],238:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":207}],239:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":207}],240:[function(require,module,exports){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":288}],241:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":208}],242:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":246}],243:[function(require,module,exports){
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

},{}],244:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":204}],245:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],246:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],247:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":151}],248:[function(require,module,exports){
var baseGet = require('./_baseGet'),
    baseSlice = require('./_baseSlice');

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;

},{"./_baseGet":166,"./_baseSlice":183}],249:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":204}],250:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":182,"./_shortOut":251}],251:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],252:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":142}],253:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],254:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],255:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],256:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":142,"./_Map":143,"./_MapCache":144}],257:[function(require,module,exports){
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

},{}],258:[function(require,module,exports){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":240}],259:[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":282}],260:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],261:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],262:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],263:[function(require,module,exports){
var baseFlatten = require('./_baseFlatten');

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

},{"./_baseFlatten":165}],264:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":169,"./_hasPath":215}],265:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],266:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    toInteger = require('./toInteger'),
    values = require('./values');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;

},{"./_baseIndexOf":170,"./isArrayLike":269,"./isString":281,"./toInteger":294,"./values":297}],267:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":171,"./isObjectLike":278}],268:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],269:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":273,"./isLength":274}],270:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":249,"./stubFalse":292}],271:[function(require,module,exports){
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isPrototype = require('./_isPrototype'),
    isTypedArray = require('./isTypedArray');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

},{"./_baseKeys":177,"./_getTag":213,"./_isPrototype":229,"./isArguments":267,"./isArray":268,"./isArrayLike":269,"./isBuffer":270,"./isTypedArray":283}],272:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike'),
    isPlainObject = require('./isPlainObject');

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag ||
    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
}

module.exports = isError;

},{"./_baseGetTag":168,"./isObjectLike":278,"./isPlainObject":279}],273:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":168,"./isObject":277}],274:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],275:[function(require,module,exports){
var baseIsMap = require('./_baseIsMap'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;

},{"./_baseIsMap":172,"./_baseUnary":186,"./_nodeUtil":244}],276:[function(require,module,exports){
/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;

},{}],277:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],278:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],279:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":168,"./_getPrototype":209,"./isObjectLike":278}],280:[function(require,module,exports){
var baseIsSet = require('./_baseIsSet'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;

},{"./_baseIsSet":175,"./_baseUnary":186,"./_nodeUtil":244}],281:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;

},{"./_baseGetTag":168,"./isArray":268,"./isObjectLike":278}],282:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":168,"./isObjectLike":278}],283:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":176,"./_baseUnary":186,"./_nodeUtil":244}],284:[function(require,module,exports){
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

},{}],285:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":154,"./_baseKeys":177,"./isArrayLike":269}],286:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeysIn = require('./_baseKeysIn'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

},{"./_arrayLikeKeys":154,"./_baseKeysIn":178,"./isArrayLike":269}],287:[function(require,module,exports){
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

},{}],288:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":144}],289:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseClone = require('./_baseClone'),
    baseUnset = require('./_baseUnset'),
    castPath = require('./_castPath'),
    copyObject = require('./_copyObject'),
    customOmitClone = require('./_customOmitClone'),
    flatRest = require('./_flatRest'),
    getAllKeysIn = require('./_getAllKeysIn');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

module.exports = omit;

},{"./_arrayMap":155,"./_baseClone":162,"./_baseUnset":187,"./_castPath":189,"./_copyObject":197,"./_customOmitClone":201,"./_flatRest":203,"./_getAllKeysIn":206}],290:[function(require,module,exports){
var basePick = require('./_basePick'),
    flatRest = require('./_flatRest');

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;

},{"./_basePick":179,"./_flatRest":203}],291:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],292:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],293:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":295}],294:[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":293}],295:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":277,"./isSymbol":282}],296:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":185}],297:[function(require,module,exports){
var baseValues = require('./_baseValues'),
    keys = require('./keys');

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

},{"./_baseValues":188,"./keys":285}],298:[function(require,module,exports){
/**
 * @file Clamp a number to limits.
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module math-clamp-x
 */

'use strict';

var toNumber = require('to-number-x').toNumber2018;

/**
 * This method clamp a number to min and max limits inclusive.
 *
 * @param {number} value - The number to be clamped.
 * @param {number} [min=0] - The minimum number.
 * @param {number} max - The maximum number.
 * @throws {RangeError} If min > max.
 * @return {number} The clamped number.
 * @example
 * var mathClamp = require('math-clamp-x');
 */
module.exports = function clamp(value) {
  var number = toNumber(value);
  var argsLength = arguments.length;
  if (argsLength < 2) {
    return number;
  }

  var min = toNumber(arguments[1]);
  var max;
  if (argsLength < 3) {
    max = min;
    min = 0;
  } else {
    max = toNumber(arguments[2]);
  }

  if (min > max) {
    throw new RangeError('"min" must be less than "max"');
  }

  if (number < min) {
    return min;
  }

  if (number > max) {
    return max;
  }

  return number;
};

},{"to-number-x":340}],299:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"dup":80,"is-nan-x":116,"to-number-x":340}],300:[function(require,module,exports){
'use strict';
module.exports = 9007199254740991;

},{}],301:[function(require,module,exports){
module.exports=[
  {
    "Header Field Name": "A-IM",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Accept",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.2]"
  },
  {
    "Header Field Name": "Accept-Additions",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Accept-Charset",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.3]"
  },
  {
    "Header Field Name": "Accept-Datetime",
    "Template": "",
    "Protocol": "http",
    "Status": "informational",
    "Reference": "[RFC7089]"
  },
  {
    "Header Field Name": "Accept-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.4][RFC7694, Section 3]"
  },
  {
    "Header Field Name": "Accept-Features",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Accept-Language",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.5]"
  },
  {
    "Header Field Name": "Accept-Language",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Accept-Patch",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC5789]"
  },
  {
    "Header Field Name": "Accept-Post",
    "Template": "perm/accept-post",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[https://www.w3.org/TR/ldp/]"
  },
  {
    "Header Field Name": "Accept-Ranges",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 2.3]"
  },
  {
    "Header Field Name": "Age",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.1]"
  },
  {
    "Header Field Name": "Allow",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.4.1]"
  },
  {
    "Header Field Name": "ALPN",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7639, Section 2]"
  },
  {
    "Header Field Name": "Also-Control",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Alt-Svc",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7838]"
  },
  {
    "Header Field Name": "Alt-Used",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7838]"
  },
  {
    "Header Field Name": "Alternate-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Alternates",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Apply-To-Redirect-Ref",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4437]"
  },
  {
    "Header Field Name": "Approved",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Archive",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Archived-At",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "Archived-At",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "Article-Names",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Article-Updates",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Authentication-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "experimental",
    "Reference": "[RFC8053, Section 4]"
  },
  {
    "Header Field Name": "Authentication-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7615, Section 3]"
  },
  {
    "Header Field Name": "Authentication-Results",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7601]"
  },
  {
    "Header Field Name": "Authorization",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.2]"
  },
  {
    "Header Field Name": "Auto-Submitted",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC3834 section 5]"
  },
  {
    "Header Field Name": "Autoforwarded",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Autosubmitted",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Base",
    "Template": "",
    "Protocol": "MIME",
    "Status": "obsoleted",
    "Reference": "[RFC1808][RFC2068 Section 14.11]"
  },
  {
    "Header Field Name": "Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Body",
    "Template": "",
    "Protocol": "none",
    "Status": "reserved",
    "Reference": "[RFC6068]"
  },
  {
    "Header Field Name": "C-Ext",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-Man",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-Opt",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-PEP",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-PEP-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Cache-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.2]"
  },
  {
    "Header Field Name": "CalDAV-Timezones",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7809, Section 7.1]"
  },
  {
    "Header Field Name": "Cancel-Key",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC8315]"
  },
  {
    "Header Field Name": "Cancel-Lock",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC8315]"
  },
  {
    "Header Field Name": "Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Close",
    "Template": "",
    "Protocol": "http",
    "Status": "reserved",
    "Reference": "[RFC7230, Section 8.1]"
  },
  {
    "Header Field Name": "Comments",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Comments",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Connection",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 6.1]"
  },
  {
    "Header Field Name": "Content-Alternative",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Base",
    "Template": "",
    "Protocol": "http",
    "Status": "obsoleted",
    "Reference": "[RFC2068][RFC2616]"
  },
  {
    "Header Field Name": "Content-Base",
    "Template": "",
    "Protocol": "MIME",
    "Status": "obsoleted",
    "Reference": "[RFC2110][RFC2557]"
  },
  {
    "Header Field Name": "Content-Description",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Disposition",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6266]"
  },
  {
    "Header Field Name": "Content-Disposition",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Duration",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.2.2]"
  },
  {
    "Header Field Name": "Content-features",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-ID",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Language",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.3.2]"
  },
  {
    "Header Field Name": "Content-Language",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Length",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 3.3.2]"
  },
  {
    "Header Field Name": "Content-Location",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.4.2]"
  },
  {
    "Header Field Name": "Content-Location",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-MD5",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-MD5",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 4.2]"
  },
  {
    "Header Field Name": "Content-Return",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Script-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-Style-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-Transfer-Encoding",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Translation-Type",
    "Template": "",
    "Protocol": "MIME",
    "Status": "standard",
    "Reference": "[RFC8255]"
  },
  {
    "Header Field Name": "Content-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.1.5]"
  },
  {
    "Header Field Name": "Content-Type",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Control",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Conversion",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Conversion-With-Loss",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Cookie",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6265]"
  },
  {
    "Header Field Name": "Cookie2",
    "Template": "",
    "Protocol": "http",
    "Status": "obsoleted",
    "Reference": "[RFC2965][RFC6265]"
  },
  {
    "Header Field Name": "DASL",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC5323]"
  },
  {
    "Header Field Name": "DAV",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "DL-Expansion-History",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.1.2]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Date-Received",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC0850][RFC5536]"
  },
  {
    "Header Field Name": "Default-Style",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Deferred-Delivery",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Delivery-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Delta-Base",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Depth",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Derived-From",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Destination",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Differential-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Digest",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Discarded-X400-IPMS-Extensions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Discarded-X400-MTS-Extensions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Disclose-Recipients",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Disposition-Notification-Options",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Disposition-Notification-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Distribution",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "DKIM-Signature",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6376]"
  },
  {
    "Header Field Name": "Downgraded-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Disposition-Notification-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Final-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-In-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Mail-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Message-Id",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Original-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Rcpt-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-References",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Return-Path",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Early-Data",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8470]"
  },
  {
    "Header Field Name": "Encoding",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Encrypted",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "ETag",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 2.3]"
  },
  {
    "Header Field Name": "Expect",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.1.1]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.3]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Expiry-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Ext",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Followup-To",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Forwarded",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7239]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.1]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Generate-Delivery-Report",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "GetProfile",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Hobareg",
    "Template": "",
    "Protocol": "http",
    "Status": "experimental",
    "Reference": "[RFC7486, Section 6.1.1]"
  },
  {
    "Header Field Name": "Host",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 5.4]"
  },
  {
    "Header Field Name": "HTTP2-Settings",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7540, Section 3.2.1]"
  },
  {
    "Header Field Name": "IM",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "If",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "If-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.1]"
  },
  {
    "Header Field Name": "If-Modified-Since",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.3]"
  },
  {
    "Header Field Name": "If-None-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.2]"
  },
  {
    "Header Field Name": "If-Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 3.2]"
  },
  {
    "Header Field Name": "If-Schedule-Tag-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "If-Unmodified-Since",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.4]"
  },
  {
    "Header Field Name": "Importance",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "In-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Include-Referred-Token-Binding-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC-ietf-tokbind-https-18]"
  },
  {
    "Header Field Name": "Incomplete-Copy",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Injection-Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Injection-Info",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Keep-Alive",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Keywords",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Keywords",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Label",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Language",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Last-Modified",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 2.2]"
  },
  {
    "Header Field Name": "Latest-Delivery-Time",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Lines",
    "Template": "",
    "Protocol": "netnews",
    "Status": "deprecated",
    "Reference": "[RFC5536][RFC3977]"
  },
  {
    "Header Field Name": "Link",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8288]"
  },
  {
    "Header Field Name": "List-Archive",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Help",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Owner",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Post",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Subscribe",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Unsubscribe",
    "Template": "perm/list-unsubscribe",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Unsubscribe-Post",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC8058]"
  },
  {
    "Header Field Name": "Location",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.2]"
  },
  {
    "Header Field Name": "Lock-Token",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Man",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Max-Forwards",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.1.2]"
  },
  {
    "Header Field Name": "Memento-Datetime",
    "Template": "",
    "Protocol": "http",
    "Status": "informational",
    "Reference": "[RFC7089]"
  },
  {
    "Header Field Name": "Message-Context",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Message-Type",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Meter",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "MIME-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Appendix A.1]"
  },
  {
    "Header Field Name": "MIME-Version",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "MMHS-Exempted-Address",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.1 and Appendix B.105]"
  },
  {
    "Header Field Name": "MMHS-Extended-Authorisation-Info",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.2 and Appendix B.106]"
  },
  {
    "Header Field Name": "MMHS-Subject-Indicator-Codes",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.3 and Appendix B.107]"
  },
  {
    "Header Field Name": "MMHS-Handling-Instructions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.4 and Appendix B.108]"
  },
  {
    "Header Field Name": "MMHS-Message-Instructions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.5 and Appendix B.109]"
  },
  {
    "Header Field Name": "MMHS-Codress-Message-Indicator",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.6 and Appendix B.110]"
  },
  {
    "Header Field Name": "MMHS-Originator-Reference",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.7 and Appendix B.111]"
  },
  {
    "Header Field Name": "MMHS-Primary-Precedence",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.8 and Appendix B.101]"
  },
  {
    "Header Field Name": "MMHS-Copy-Precedence",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.9 and Appendix B.102]"
  },
  {
    "Header Field Name": "MMHS-Message-Type",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.10 and Appendix B.103]"
  },
  {
    "Header Field Name": "MMHS-Other-Recipients-Indicator-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.12 and Appendix B.113]"
  },
  {
    "Header Field Name": "MMHS-Other-Recipients-Indicator-CC",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.12 and Appendix B.113]"
  },
  {
    "Header Field Name": "MMHS-Acp127-Message-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.14 and Appendix B.116]"
  },
  {
    "Header Field Name": "MMHS-Originator-PLAD",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.15 and Appendix B.117]"
  },
  {
    "Header Field Name": "MT-Priority",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6758]"
  },
  {
    "Header Field Name": "Negotiate",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Newsgroups",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "NNTP-Posting-Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "NNTP-Posting-Host",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC2980][RFC5536]"
  },
  {
    "Header Field Name": "Obsoletes",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Opt",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Optional-WWW-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "experimental",
    "Reference": "[RFC8053, Section 3]"
  },
  {
    "Header Field Name": "Ordering-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Organization",
    "Template": "",
    "Protocol": "mail",
    "Status": "informational",
    "Reference": "[RFC7681]"
  },
  {
    "Header Field Name": "Organization",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Origin",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6454]"
  },
  {
    "Header Field Name": "Original-Encoded-Information-Types",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Original-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5703]"
  },
  {
    "Header Field Name": "Original-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Original-Recipient",
    "Template": "perm/original-recipient",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC3798][RFC5337]"
  },
  {
    "Header Field Name": "Original-Sender",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5537]"
  },
  {
    "Header Field Name": "Originator-Return-Address",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Original-Subject",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5703]"
  },
  {
    "Header Field Name": "Overwrite",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "P3P",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Path",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "PEP",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "PICS-Label",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "PICS-Label",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Pep-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Position",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Posting-Version",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC0850][RFC5536]"
  },
  {
    "Header Field Name": "Pragma",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.4]"
  },
  {
    "Header Field Name": "Prefer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7240]"
  },
  {
    "Header Field Name": "Preference-Applied",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7240]"
  },
  {
    "Header Field Name": "Prevent-NonDelivery-Report",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Priority",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "ProfileObject",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol-Query",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol-Request",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Proxy-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.3]"
  },
  {
    "Header Field Name": "Proxy-Authentication-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7615, Section 4]"
  },
  {
    "Header Field Name": "Proxy-Authorization",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.4]"
  },
  {
    "Header Field Name": "Proxy-Features",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Proxy-Instruction",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Public",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Public-Key-Pins",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7469]"
  },
  {
    "Header Field Name": "Public-Key-Pins-Report-Only",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7469]"
  },
  {
    "Header Field Name": "Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 3.1]"
  },
  {
    "Header Field Name": "Received",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC5321]"
  },
  {
    "Header Field Name": "Received-SPF",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7208]"
  },
  {
    "Header Field Name": "Redirect-Ref",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4437]"
  },
  {
    "Header Field Name": "References",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "References",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Referer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.2]"
  },
  {
    "Header Field Name": "Relay-Version",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC0850][RFC5536]"
  },
  {
    "Header Field Name": "Reply-By",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Reply-To",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Require-Recipient-Valid-Since",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7293]"
  },
  {
    "Header Field Name": "Resent-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Resent-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Resent-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Retry-After",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.3]"
  },
  {
    "Header Field Name": "Return-Path",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Safe",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Schedule-Reply",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "Schedule-Tag",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "Sec-Token-Binding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC-ietf-tokbind-https-18]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Accept",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Extensions",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Key",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Protocol",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Security-Scheme",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "See-Also",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Sender",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Sensitivity",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Server",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.4.2]"
  },
  {
    "Header Field Name": "Set-Cookie",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6265]"
  },
  {
    "Header Field Name": "Set-Cookie2",
    "Template": "",
    "Protocol": "http",
    "Status": "obsoleted",
    "Reference": "[RFC2965][RFC6265]"
  },
  {
    "Header Field Name": "SetProfile",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "SLUG",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC5023]"
  },
  {
    "Header Field Name": "SoapAction",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Solicitation",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC3865]"
  },
  {
    "Header Field Name": "Status-URI",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Strict-Transport-Security",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6797]"
  },
  {
    "Header Field Name": "Subject",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Subject",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Summary",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Supersedes",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Supersedes",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC2156]"
  },
  {
    "Header Field Name": "Surrogate-Capability",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Surrogate-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "TCN",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "TE",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 4.3]"
  },
  {
    "Header Field Name": "Timeout",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "TLS-Report-Domain",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC-ietf-uta-smtp-tlsrpt-23]"
  },
  {
    "Header Field Name": "TLS-Report-Submitter",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC-ietf-uta-smtp-tlsrpt-23]"
  },
  {
    "Header Field Name": "To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Topic",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.4]"
  },
  {
    "Header Field Name": "Trailer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 4.4]"
  },
  {
    "Header Field Name": "Transfer-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 3.3.1]"
  },
  {
    "Header Field Name": "TTL",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.2]"
  },
  {
    "Header Field Name": "Urgency",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.3]"
  },
  {
    "Header Field Name": "URI",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Upgrade",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 6.7]"
  },
  {
    "Header Field Name": "User-Agent",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.3]"
  },
  {
    "Header Field Name": "User-Agent",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC2616]"
  },
  {
    "Header Field Name": "Variant-Vary",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Vary",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.4]"
  },
  {
    "Header Field Name": "VBR-Info",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5518]"
  },
  {
    "Header Field Name": "Via",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 5.7.1]"
  },
  {
    "Header Field Name": "WWW-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.1]"
  },
  {
    "Header Field Name": "Want-Digest",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Warning",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.5]"
  },
  {
    "Header Field Name": "X400-Content-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Content-Return",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Content-Type",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-MTS-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Originator",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Received",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Recipients",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Trace",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X-Content-Type-Options",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[https://fetch.spec.whatwg.org/#x-content-type-options-header]"
  },
  {
    "Header Field Name": "X-Frame-Options",
    "Template": "",
    "Protocol": "http",
    "Status": "informational",
    "Reference": "[RFC7034]"
  },
  {
    "Header Field Name": "Xref",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Access-Control",
    "Template": "prov/access-control",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Credentials",
    "Template": "prov/access-control-allow-credentials",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Headers",
    "Template": "prov/access-control-allow-headers",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Methods",
    "Template": "prov/access-control-allow-methods",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Origin",
    "Template": "prov/access-control-allow-origin",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Max-Age",
    "Template": "prov/access-control-max-age",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Request-Method",
    "Template": "prov/access-control-request-method",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Request-Headers",
    "Template": "prov/access-control-request-headers",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "AMP-Cache-Transform",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[https://github.com/ampproject/amphtml/blob/master/spec/amp-cache-transform.md]"
  },
  {
    "Header Field Name": "Apparently-To",
    "Template": "prov/apparently-to",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC2076]"
  },
  {
    "Header Field Name": "ARC-Authentication-Results",
    "Template": "prov/arc-authentication-results",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-ietf-dmarc-arc-protocol]"
  },
  {
    "Header Field Name": "ARC-Message-Signature",
    "Template": "prov/arc-message-signature",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-ietf-dmarc-arc-protocol]"
  },
  {
    "Header Field Name": "ARC-Seal",
    "Template": "prov/arc-seal",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-ietf-dmarc-arc-protocol]"
  },
  {
    "Header Field Name": "Compliance",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-Transfer-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Cost",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "EDIINT-Features",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC6017]"
  },
  {
    "Header Field Name": "EDIINT-Features",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6017]"
  },
  {
    "Header Field Name": "Eesst-Version",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7681]"
  },
  {
    "Header Field Name": "Errors-To",
    "Template": "prov/errors-to",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC2076]"
  },
  {
    "Header Field Name": "Form-Sub",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-levine-mailbomb-header]"
  },
  {
    "Header Field Name": "Jabber-ID",
    "Template": "prov/jabber-id",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7259]"
  },
  {
    "Header Field Name": "Jabber-ID",
    "Template": "prov/jabber-id",
    "Protocol": "netnews",
    "Status": "",
    "Reference": "[RFC7259]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Method-Check",
    "Template": "prov/method-check",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Method-Check-Expires",
    "Template": "prov/method-check-expires",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "MMHS-Authorizing-Users",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7912]"
  },
  {
    "Header Field Name": "Non-Compliance",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Optional",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Privicon",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-koenig-privicons]"
  },
  {
    "Header Field Name": "Referer-Root",
    "Template": "prov/referer-root",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Resolution-Hint",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Resolver-Location",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "SIO-Label",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7444]"
  },
  {
    "Header Field Name": "SIO-Label-History",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7444]"
  },
  {
    "Header Field Name": "SubOK",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Subst",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Title",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Color",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Media",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Pixels",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Resolution",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Windowpixels",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Version",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "X-Archived-At",
    "Template": "prov/x-archived-at",
    "Protocol": "mail",
    "Status": "deprecated",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "X-Archived-At",
    "Template": "prov/x-archived-at",
    "Protocol": "netnews",
    "Status": "deprecated",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "X-Device-Accept",
    "Template": "prov/x-device-accept",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-Accept-Charset",
    "Template": "prov/x-device-accept-charset",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-Accept-Encoding",
    "Template": "prov/x-device-accept-encoding",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-Accept-Language",
    "Template": "prov/x-device-accept-language",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-User-Agent",
    "Template": "prov/x-device-user-agent",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Mittente",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-PGP-Sig",
    "Template": "prov/x-pgp-sig",
    "Protocol": "netnews",
    "Status": "",
    "Reference": "[ftp://ftp.isc.org/pub/pgpcontrol/FORMAT][https://ftp.isc.org/pub/pgpcontrol/FORMAT]"
  },
  {
    "Header Field Name": "X-Ricevuta",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-Riferimento-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-TipoRicevuta",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-Trasporto",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-VerificaSicurezza",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  }
]
},{}],302:[function(require,module,exports){
module.exports=[
  {
    "Header Field Name": "Lines",
    "Template": "",
    "Protocol": "netnews",
    "Status": "deprecated",
    "Reference": "[RFC5536][RFC3977]"
  },
  {
    "Header Field Name": "Access-Control",
    "Template": "prov/access-control",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Method-Check",
    "Template": "prov/method-check",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Method-Check-Expires",
    "Template": "prov/method-check-expires",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Referer-Root",
    "Template": "prov/referer-root",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "X-Archived-At",
    "Template": "prov/x-archived-at",
    "Protocol": "mail",
    "Status": "deprecated",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "X-Archived-At",
    "Template": "prov/x-archived-at",
    "Protocol": "netnews",
    "Status": "deprecated",
    "Reference": "[RFC5064]"
  }
]
},{}],303:[function(require,module,exports){
module.exports = {
  all: require('./all.json'),
  permanent: require('./permanent.json'),
  provisional: require('./provisional.json'),
  standard: require('./standard.json'),
  deprecated: require('./deprecated.json')
};

},{"./all.json":301,"./deprecated.json":302,"./permanent.json":304,"./provisional.json":305,"./standard.json":306}],304:[function(require,module,exports){
module.exports=[
  {
    "Header Field Name": "A-IM",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Accept",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.2]"
  },
  {
    "Header Field Name": "Accept-Additions",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Accept-Charset",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.3]"
  },
  {
    "Header Field Name": "Accept-Datetime",
    "Template": "",
    "Protocol": "http",
    "Status": "informational",
    "Reference": "[RFC7089]"
  },
  {
    "Header Field Name": "Accept-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.4][RFC7694, Section 3]"
  },
  {
    "Header Field Name": "Accept-Features",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Accept-Language",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.5]"
  },
  {
    "Header Field Name": "Accept-Language",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Accept-Patch",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC5789]"
  },
  {
    "Header Field Name": "Accept-Post",
    "Template": "perm/accept-post",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[https://www.w3.org/TR/ldp/]"
  },
  {
    "Header Field Name": "Accept-Ranges",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 2.3]"
  },
  {
    "Header Field Name": "Age",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.1]"
  },
  {
    "Header Field Name": "Allow",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.4.1]"
  },
  {
    "Header Field Name": "ALPN",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7639, Section 2]"
  },
  {
    "Header Field Name": "Also-Control",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Alt-Svc",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7838]"
  },
  {
    "Header Field Name": "Alt-Used",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7838]"
  },
  {
    "Header Field Name": "Alternate-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Alternates",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Apply-To-Redirect-Ref",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4437]"
  },
  {
    "Header Field Name": "Approved",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Archive",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Archived-At",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "Archived-At",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "Article-Names",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Article-Updates",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Authentication-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "experimental",
    "Reference": "[RFC8053, Section 4]"
  },
  {
    "Header Field Name": "Authentication-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7615, Section 3]"
  },
  {
    "Header Field Name": "Authentication-Results",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7601]"
  },
  {
    "Header Field Name": "Authorization",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.2]"
  },
  {
    "Header Field Name": "Auto-Submitted",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC3834 section 5]"
  },
  {
    "Header Field Name": "Autoforwarded",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Autosubmitted",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Base",
    "Template": "",
    "Protocol": "MIME",
    "Status": "obsoleted",
    "Reference": "[RFC1808][RFC2068 Section 14.11]"
  },
  {
    "Header Field Name": "Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Body",
    "Template": "",
    "Protocol": "none",
    "Status": "reserved",
    "Reference": "[RFC6068]"
  },
  {
    "Header Field Name": "C-Ext",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-Man",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-Opt",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-PEP",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "C-PEP-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Cache-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.2]"
  },
  {
    "Header Field Name": "CalDAV-Timezones",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7809, Section 7.1]"
  },
  {
    "Header Field Name": "Cancel-Key",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC8315]"
  },
  {
    "Header Field Name": "Cancel-Lock",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC8315]"
  },
  {
    "Header Field Name": "Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Close",
    "Template": "",
    "Protocol": "http",
    "Status": "reserved",
    "Reference": "[RFC7230, Section 8.1]"
  },
  {
    "Header Field Name": "Comments",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Comments",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Connection",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 6.1]"
  },
  {
    "Header Field Name": "Content-Alternative",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Base",
    "Template": "",
    "Protocol": "http",
    "Status": "obsoleted",
    "Reference": "[RFC2068][RFC2616]"
  },
  {
    "Header Field Name": "Content-Base",
    "Template": "",
    "Protocol": "MIME",
    "Status": "obsoleted",
    "Reference": "[RFC2110][RFC2557]"
  },
  {
    "Header Field Name": "Content-Description",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Disposition",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6266]"
  },
  {
    "Header Field Name": "Content-Disposition",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Duration",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.2.2]"
  },
  {
    "Header Field Name": "Content-features",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-ID",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Language",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.3.2]"
  },
  {
    "Header Field Name": "Content-Language",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Length",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 3.3.2]"
  },
  {
    "Header Field Name": "Content-Location",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.4.2]"
  },
  {
    "Header Field Name": "Content-Location",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-MD5",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-MD5",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 4.2]"
  },
  {
    "Header Field Name": "Content-Return",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Script-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-Style-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-Transfer-Encoding",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Translation-Type",
    "Template": "",
    "Protocol": "MIME",
    "Status": "standard",
    "Reference": "[RFC8255]"
  },
  {
    "Header Field Name": "Content-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.1.5]"
  },
  {
    "Header Field Name": "Content-Type",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Content-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Control",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Conversion",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Conversion-With-Loss",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Cookie",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6265]"
  },
  {
    "Header Field Name": "Cookie2",
    "Template": "",
    "Protocol": "http",
    "Status": "obsoleted",
    "Reference": "[RFC2965][RFC6265]"
  },
  {
    "Header Field Name": "DASL",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC5323]"
  },
  {
    "Header Field Name": "DAV",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "DL-Expansion-History",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.1.2]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Date-Received",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC0850][RFC5536]"
  },
  {
    "Header Field Name": "Default-Style",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Deferred-Delivery",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Delivery-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Delta-Base",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Depth",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Derived-From",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Destination",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Differential-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Digest",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Discarded-X400-IPMS-Extensions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Discarded-X400-MTS-Extensions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Disclose-Recipients",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Disposition-Notification-Options",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Disposition-Notification-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Distribution",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "DKIM-Signature",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6376]"
  },
  {
    "Header Field Name": "Downgraded-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Disposition-Notification-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Final-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-In-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Mail-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Message-Id",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Original-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Rcpt-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-References",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Resent-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Return-Path",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Downgraded-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5504][RFC6857]"
  },
  {
    "Header Field Name": "Early-Data",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8470]"
  },
  {
    "Header Field Name": "Encoding",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Encrypted",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "ETag",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 2.3]"
  },
  {
    "Header Field Name": "Expect",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.1.1]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.3]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Expiry-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Ext",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Followup-To",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Forwarded",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7239]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.1]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Generate-Delivery-Report",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "GetProfile",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Hobareg",
    "Template": "",
    "Protocol": "http",
    "Status": "experimental",
    "Reference": "[RFC7486, Section 6.1.1]"
  },
  {
    "Header Field Name": "Host",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 5.4]"
  },
  {
    "Header Field Name": "HTTP2-Settings",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7540, Section 3.2.1]"
  },
  {
    "Header Field Name": "IM",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "If",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "If-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.1]"
  },
  {
    "Header Field Name": "If-Modified-Since",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.3]"
  },
  {
    "Header Field Name": "If-None-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.2]"
  },
  {
    "Header Field Name": "If-Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 3.2]"
  },
  {
    "Header Field Name": "If-Schedule-Tag-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "If-Unmodified-Since",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.4]"
  },
  {
    "Header Field Name": "Importance",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "In-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Include-Referred-Token-Binding-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC-ietf-tokbind-https-18]"
  },
  {
    "Header Field Name": "Incomplete-Copy",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Injection-Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Injection-Info",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Keep-Alive",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Keywords",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Keywords",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Label",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Language",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Last-Modified",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 2.2]"
  },
  {
    "Header Field Name": "Latest-Delivery-Time",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Lines",
    "Template": "",
    "Protocol": "netnews",
    "Status": "deprecated",
    "Reference": "[RFC5536][RFC3977]"
  },
  {
    "Header Field Name": "Link",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8288]"
  },
  {
    "Header Field Name": "List-Archive",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Help",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Owner",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Post",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Subscribe",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Unsubscribe",
    "Template": "perm/list-unsubscribe",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "List-Unsubscribe-Post",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC8058]"
  },
  {
    "Header Field Name": "Location",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.2]"
  },
  {
    "Header Field Name": "Lock-Token",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Man",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Max-Forwards",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.1.2]"
  },
  {
    "Header Field Name": "Memento-Datetime",
    "Template": "",
    "Protocol": "http",
    "Status": "informational",
    "Reference": "[RFC7089]"
  },
  {
    "Header Field Name": "Message-Context",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Message-Type",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Meter",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "MIME-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Appendix A.1]"
  },
  {
    "Header Field Name": "MIME-Version",
    "Template": "",
    "Protocol": "MIME",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "MMHS-Exempted-Address",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.1 and Appendix B.105]"
  },
  {
    "Header Field Name": "MMHS-Extended-Authorisation-Info",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.2 and Appendix B.106]"
  },
  {
    "Header Field Name": "MMHS-Subject-Indicator-Codes",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.3 and Appendix B.107]"
  },
  {
    "Header Field Name": "MMHS-Handling-Instructions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.4 and Appendix B.108]"
  },
  {
    "Header Field Name": "MMHS-Message-Instructions",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.5 and Appendix B.109]"
  },
  {
    "Header Field Name": "MMHS-Codress-Message-Indicator",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.6 and Appendix B.110]"
  },
  {
    "Header Field Name": "MMHS-Originator-Reference",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.7 and Appendix B.111]"
  },
  {
    "Header Field Name": "MMHS-Primary-Precedence",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.8 and Appendix B.101]"
  },
  {
    "Header Field Name": "MMHS-Copy-Precedence",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.9 and Appendix B.102]"
  },
  {
    "Header Field Name": "MMHS-Message-Type",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.10 and Appendix B.103]"
  },
  {
    "Header Field Name": "MMHS-Other-Recipients-Indicator-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.12 and Appendix B.113]"
  },
  {
    "Header Field Name": "MMHS-Other-Recipients-Indicator-CC",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.12 and Appendix B.113]"
  },
  {
    "Header Field Name": "MMHS-Acp127-Message-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.14 and Appendix B.116]"
  },
  {
    "Header Field Name": "MMHS-Originator-PLAD",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6477][ACP123 Appendix A1.15 and Appendix B.117]"
  },
  {
    "Header Field Name": "MT-Priority",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6758]"
  },
  {
    "Header Field Name": "Negotiate",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Newsgroups",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "NNTP-Posting-Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "NNTP-Posting-Host",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC2980][RFC5536]"
  },
  {
    "Header Field Name": "Obsoletes",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Opt",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Optional-WWW-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "experimental",
    "Reference": "[RFC8053, Section 3]"
  },
  {
    "Header Field Name": "Ordering-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Organization",
    "Template": "",
    "Protocol": "mail",
    "Status": "informational",
    "Reference": "[RFC7681]"
  },
  {
    "Header Field Name": "Organization",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Origin",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6454]"
  },
  {
    "Header Field Name": "Original-Encoded-Information-Types",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Original-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5703]"
  },
  {
    "Header Field Name": "Original-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Original-Recipient",
    "Template": "perm/original-recipient",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC3798][RFC5337]"
  },
  {
    "Header Field Name": "Original-Sender",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5537]"
  },
  {
    "Header Field Name": "Originator-Return-Address",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Original-Subject",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5703]"
  },
  {
    "Header Field Name": "Overwrite",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "P3P",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Path",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "PEP",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "PICS-Label",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "PICS-Label",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Pep-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Position",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Posting-Version",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC0850][RFC5536]"
  },
  {
    "Header Field Name": "Pragma",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.4]"
  },
  {
    "Header Field Name": "Prefer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7240]"
  },
  {
    "Header Field Name": "Preference-Applied",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7240]"
  },
  {
    "Header Field Name": "Prevent-NonDelivery-Report",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Priority",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "ProfileObject",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol-Query",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Protocol-Request",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Proxy-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.3]"
  },
  {
    "Header Field Name": "Proxy-Authentication-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7615, Section 4]"
  },
  {
    "Header Field Name": "Proxy-Authorization",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.4]"
  },
  {
    "Header Field Name": "Proxy-Features",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Proxy-Instruction",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Public",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Public-Key-Pins",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7469]"
  },
  {
    "Header Field Name": "Public-Key-Pins-Report-Only",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7469]"
  },
  {
    "Header Field Name": "Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 3.1]"
  },
  {
    "Header Field Name": "Received",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC5321]"
  },
  {
    "Header Field Name": "Received-SPF",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7208]"
  },
  {
    "Header Field Name": "Redirect-Ref",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4437]"
  },
  {
    "Header Field Name": "References",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "References",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Referer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.2]"
  },
  {
    "Header Field Name": "Relay-Version",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC0850][RFC5536]"
  },
  {
    "Header Field Name": "Reply-By",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Reply-To",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Require-Recipient-Valid-Since",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7293]"
  },
  {
    "Header Field Name": "Resent-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Resent-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "obsoleted",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Resent-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Retry-After",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.3]"
  },
  {
    "Header Field Name": "Return-Path",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Safe",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Schedule-Reply",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "Schedule-Tag",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "Sec-Token-Binding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC-ietf-tokbind-https-18]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Accept",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Extensions",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Key",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Protocol",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Security-Scheme",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "See-Also",
    "Template": "",
    "Protocol": "netnews",
    "Status": "obsoleted",
    "Reference": "[RFC1849][RFC5536]"
  },
  {
    "Header Field Name": "Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Sender",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Sensitivity",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Server",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.4.2]"
  },
  {
    "Header Field Name": "Set-Cookie",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6265]"
  },
  {
    "Header Field Name": "Set-Cookie2",
    "Template": "",
    "Protocol": "http",
    "Status": "obsoleted",
    "Reference": "[RFC2965][RFC6265]"
  },
  {
    "Header Field Name": "SetProfile",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "SLUG",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC5023]"
  },
  {
    "Header Field Name": "SoapAction",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Solicitation",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC3865]"
  },
  {
    "Header Field Name": "Status-URI",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Strict-Transport-Security",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6797]"
  },
  {
    "Header Field Name": "Subject",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Subject",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Summary",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Supersedes",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "Supersedes",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC2156]"
  },
  {
    "Header Field Name": "Surrogate-Capability",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Surrogate-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "TCN",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "TE",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 4.3]"
  },
  {
    "Header Field Name": "Timeout",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "TLS-Report-Domain",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC-ietf-uta-smtp-tlsrpt-23]"
  },
  {
    "Header Field Name": "TLS-Report-Submitter",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC-ietf-uta-smtp-tlsrpt-23]"
  },
  {
    "Header Field Name": "To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Topic",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.4]"
  },
  {
    "Header Field Name": "Trailer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 4.4]"
  },
  {
    "Header Field Name": "Transfer-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 3.3.1]"
  },
  {
    "Header Field Name": "TTL",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.2]"
  },
  {
    "Header Field Name": "Urgency",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.3]"
  },
  {
    "Header Field Name": "URI",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Upgrade",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 6.7]"
  },
  {
    "Header Field Name": "User-Agent",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.3]"
  },
  {
    "Header Field Name": "User-Agent",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC2616]"
  },
  {
    "Header Field Name": "Variant-Vary",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Vary",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.4]"
  },
  {
    "Header Field Name": "VBR-Info",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5518]"
  },
  {
    "Header Field Name": "Via",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 5.7.1]"
  },
  {
    "Header Field Name": "WWW-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.1]"
  },
  {
    "Header Field Name": "Want-Digest",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Warning",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.5]"
  },
  {
    "Header Field Name": "X400-Content-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Content-Return",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Content-Type",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-MTS-Identifier",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Originator",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Received",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Recipients",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X400-Trace",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC4021]"
  },
  {
    "Header Field Name": "X-Content-Type-Options",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[https://fetch.spec.whatwg.org/#x-content-type-options-header]"
  },
  {
    "Header Field Name": "X-Frame-Options",
    "Template": "",
    "Protocol": "http",
    "Status": "informational",
    "Reference": "[RFC7034]"
  },
  {
    "Header Field Name": "Xref",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  }
]
},{}],305:[function(require,module,exports){
module.exports=[
  {
    "Header Field Name": "Access-Control",
    "Template": "prov/access-control",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Credentials",
    "Template": "prov/access-control-allow-credentials",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Headers",
    "Template": "prov/access-control-allow-headers",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Methods",
    "Template": "prov/access-control-allow-methods",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Allow-Origin",
    "Template": "prov/access-control-allow-origin",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Max-Age",
    "Template": "prov/access-control-max-age",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Request-Method",
    "Template": "prov/access-control-request-method",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Access-Control-Request-Headers",
    "Template": "prov/access-control-request-headers",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "AMP-Cache-Transform",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[https://github.com/ampproject/amphtml/blob/master/spec/amp-cache-transform.md]"
  },
  {
    "Header Field Name": "Apparently-To",
    "Template": "prov/apparently-to",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC2076]"
  },
  {
    "Header Field Name": "ARC-Authentication-Results",
    "Template": "prov/arc-authentication-results",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-ietf-dmarc-arc-protocol]"
  },
  {
    "Header Field Name": "ARC-Message-Signature",
    "Template": "prov/arc-message-signature",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-ietf-dmarc-arc-protocol]"
  },
  {
    "Header Field Name": "ARC-Seal",
    "Template": "prov/arc-seal",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-ietf-dmarc-arc-protocol]"
  },
  {
    "Header Field Name": "Compliance",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Content-Transfer-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Cost",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "EDIINT-Features",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC6017]"
  },
  {
    "Header Field Name": "EDIINT-Features",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6017]"
  },
  {
    "Header Field Name": "Eesst-Version",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7681]"
  },
  {
    "Header Field Name": "Errors-To",
    "Template": "prov/errors-to",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC2076]"
  },
  {
    "Header Field Name": "Form-Sub",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-levine-mailbomb-header]"
  },
  {
    "Header Field Name": "Jabber-ID",
    "Template": "prov/jabber-id",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7259]"
  },
  {
    "Header Field Name": "Jabber-ID",
    "Template": "prov/jabber-id",
    "Protocol": "netnews",
    "Status": "",
    "Reference": "[RFC7259]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Method-Check",
    "Template": "prov/method-check",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Method-Check-Expires",
    "Template": "prov/method-check-expires",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "MMHS-Authorizing-Users",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7912]"
  },
  {
    "Header Field Name": "Non-Compliance",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Optional",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Privicon",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[draft-koenig-privicons]"
  },
  {
    "Header Field Name": "Referer-Root",
    "Template": "prov/referer-root",
    "Protocol": "http",
    "Status": "deprecated",
    "Reference": "[W3C Web Application Formats Working Group]"
  },
  {
    "Header Field Name": "Resolution-Hint",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Resolver-Location",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "SIO-Label",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7444]"
  },
  {
    "Header Field Name": "SIO-Label-History",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC7444]"
  },
  {
    "Header Field Name": "SubOK",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Subst",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Title",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Color",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Media",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Pixels",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Resolution",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "UA-Windowpixels",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Version",
    "Template": "",
    "Protocol": "http",
    "Status": "",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "X-Archived-At",
    "Template": "prov/x-archived-at",
    "Protocol": "mail",
    "Status": "deprecated",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "X-Archived-At",
    "Template": "prov/x-archived-at",
    "Protocol": "netnews",
    "Status": "deprecated",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "X-Device-Accept",
    "Template": "prov/x-device-accept",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-Accept-Charset",
    "Template": "prov/x-device-accept-charset",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-Accept-Encoding",
    "Template": "prov/x-device-accept-encoding",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-Accept-Language",
    "Template": "prov/x-device-accept-language",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Device-User-Agent",
    "Template": "prov/x-device-user-agent",
    "Protocol": "http",
    "Status": "",
    "Reference": "[W3C Mobile Web Best Practices Working Group]"
  },
  {
    "Header Field Name": "X-Mittente",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-PGP-Sig",
    "Template": "prov/x-pgp-sig",
    "Protocol": "netnews",
    "Status": "",
    "Reference": "[ftp://ftp.isc.org/pub/pgpcontrol/FORMAT][https://ftp.isc.org/pub/pgpcontrol/FORMAT]"
  },
  {
    "Header Field Name": "X-Ricevuta",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-Riferimento-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-TipoRicevuta",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-Trasporto",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  },
  {
    "Header Field Name": "X-VerificaSicurezza",
    "Template": "",
    "Protocol": "mail",
    "Status": "",
    "Reference": "[RFC6109]"
  }
]
},{}],306:[function(require,module,exports){
module.exports=[
  {
    "Header Field Name": "Accept",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.2]"
  },
  {
    "Header Field Name": "Accept-Charset",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.3]"
  },
  {
    "Header Field Name": "Accept-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.4][RFC7694, Section 3]"
  },
  {
    "Header Field Name": "Accept-Language",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.3.5]"
  },
  {
    "Header Field Name": "Accept-Post",
    "Template": "perm/accept-post",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[https://www.w3.org/TR/ldp/]"
  },
  {
    "Header Field Name": "Accept-Ranges",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 2.3]"
  },
  {
    "Header Field Name": "Age",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.1]"
  },
  {
    "Header Field Name": "Allow",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.4.1]"
  },
  {
    "Header Field Name": "ALPN",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7639, Section 2]"
  },
  {
    "Header Field Name": "Alt-Svc",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7838]"
  },
  {
    "Header Field Name": "Alt-Used",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7838]"
  },
  {
    "Header Field Name": "Approved",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Archive",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Archived-At",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "Archived-At",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5064]"
  },
  {
    "Header Field Name": "Authentication-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7615, Section 3]"
  },
  {
    "Header Field Name": "Authentication-Results",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7601]"
  },
  {
    "Header Field Name": "Authorization",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.2]"
  },
  {
    "Header Field Name": "Auto-Submitted",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC3834 section 5]"
  },
  {
    "Header Field Name": "Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Cache-Control",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.2]"
  },
  {
    "Header Field Name": "CalDAV-Timezones",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7809, Section 7.1]"
  },
  {
    "Header Field Name": "Cancel-Key",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC8315]"
  },
  {
    "Header Field Name": "Cancel-Lock",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC8315]"
  },
  {
    "Header Field Name": "Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Comments",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Comments",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Connection",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 6.1]"
  },
  {
    "Header Field Name": "Content-Disposition",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6266]"
  },
  {
    "Header Field Name": "Content-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.2.2]"
  },
  {
    "Header Field Name": "Content-Language",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.3.2]"
  },
  {
    "Header Field Name": "Content-Length",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 3.3.2]"
  },
  {
    "Header Field Name": "Content-Location",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.4.2]"
  },
  {
    "Header Field Name": "Content-Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 4.2]"
  },
  {
    "Header Field Name": "Content-Translation-Type",
    "Template": "",
    "Protocol": "MIME",
    "Status": "standard",
    "Reference": "[RFC8255]"
  },
  {
    "Header Field Name": "Content-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 3.1.1.5]"
  },
  {
    "Header Field Name": "Control",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Cookie",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6265]"
  },
  {
    "Header Field Name": "DASL",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC5323]"
  },
  {
    "Header Field Name": "DAV",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.1.2]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Depth",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Destination",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Distribution",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "DKIM-Signature",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6376]"
  },
  {
    "Header Field Name": "Downgraded-Final-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-In-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Message-Id",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-Original-Recipient",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Downgraded-References",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6857 Section 3.1.10]"
  },
  {
    "Header Field Name": "Early-Data",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8470]"
  },
  {
    "Header Field Name": "ETag",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 2.3]"
  },
  {
    "Header Field Name": "Expect",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.1.1]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.3]"
  },
  {
    "Header Field Name": "Expires",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Followup-To",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Forwarded",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7239]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.1]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "From",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Host",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 5.4]"
  },
  {
    "Header Field Name": "HTTP2-Settings",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7540, Section 3.2.1]"
  },
  {
    "Header Field Name": "If",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "If-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.1]"
  },
  {
    "Header Field Name": "If-Modified-Since",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.3]"
  },
  {
    "Header Field Name": "If-None-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.2]"
  },
  {
    "Header Field Name": "If-Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 3.2]"
  },
  {
    "Header Field Name": "If-Schedule-Tag-Match",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "If-Unmodified-Since",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 3.4]"
  },
  {
    "Header Field Name": "In-Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Include-Referred-Token-Binding-ID",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC-ietf-tokbind-https-18]"
  },
  {
    "Header Field Name": "Injection-Date",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Injection-Info",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Keywords",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Keywords",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Last-Modified",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7232, Section 2.2]"
  },
  {
    "Header Field Name": "Link",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8288]"
  },
  {
    "Header Field Name": "List-Unsubscribe-Post",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC8058]"
  },
  {
    "Header Field Name": "Location",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.2]"
  },
  {
    "Header Field Name": "Lock-Token",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Max-Forwards",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.1.2]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Message-ID",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "MIME-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Appendix A.1]"
  },
  {
    "Header Field Name": "MT-Priority",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC6758]"
  },
  {
    "Header Field Name": "Newsgroups",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Ordering-Type",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Organization",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Origin",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6454]"
  },
  {
    "Header Field Name": "Original-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5703]"
  },
  {
    "Header Field Name": "Original-Recipient",
    "Template": "perm/original-recipient",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC3798][RFC5337]"
  },
  {
    "Header Field Name": "Original-Sender",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5537]"
  },
  {
    "Header Field Name": "Original-Subject",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5703]"
  },
  {
    "Header Field Name": "Overwrite",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "Path",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Position",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4229]"
  },
  {
    "Header Field Name": "Pragma",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.4]"
  },
  {
    "Header Field Name": "Prefer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7240]"
  },
  {
    "Header Field Name": "Preference-Applied",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7240]"
  },
  {
    "Header Field Name": "Proxy-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.3]"
  },
  {
    "Header Field Name": "Proxy-Authentication-Info",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7615, Section 4]"
  },
  {
    "Header Field Name": "Proxy-Authorization",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.4]"
  },
  {
    "Header Field Name": "Public-Key-Pins",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7469]"
  },
  {
    "Header Field Name": "Public-Key-Pins-Report-Only",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7469]"
  },
  {
    "Header Field Name": "Range",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7233, Section 3.1]"
  },
  {
    "Header Field Name": "Received",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC5321]"
  },
  {
    "Header Field Name": "Received-SPF",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7208]"
  },
  {
    "Header Field Name": "References",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "References",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Referer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.2]"
  },
  {
    "Header Field Name": "Reply-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Reply-To",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Require-Recipient-Valid-Since",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC7293]"
  },
  {
    "Header Field Name": "Resent-Bcc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Cc",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Date",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-From",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Resent-Message-ID",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Resent-Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Resent-To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Retry-After",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.3]"
  },
  {
    "Header Field Name": "Return-Path",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Schedule-Reply",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "Schedule-Tag",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6638]"
  },
  {
    "Header Field Name": "Sec-Token-Binding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC-ietf-tokbind-https-18]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Accept",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Extensions",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Key",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Protocol",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sec-WebSocket-Version",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6455]"
  },
  {
    "Header Field Name": "Sender",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322][RFC6854]"
  },
  {
    "Header Field Name": "Sender",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Server",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.4.2]"
  },
  {
    "Header Field Name": "Set-Cookie",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6265]"
  },
  {
    "Header Field Name": "SLUG",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC5023]"
  },
  {
    "Header Field Name": "Strict-Transport-Security",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC6797]"
  },
  {
    "Header Field Name": "Subject",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Subject",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC5322]"
  },
  {
    "Header Field Name": "Summary",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  },
  {
    "Header Field Name": "Supersedes",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC2156]"
  },
  {
    "Header Field Name": "TE",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 4.3]"
  },
  {
    "Header Field Name": "Timeout",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC4918]"
  },
  {
    "Header Field Name": "TLS-Report-Domain",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC-ietf-uta-smtp-tlsrpt-23]"
  },
  {
    "Header Field Name": "TLS-Report-Submitter",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC-ietf-uta-smtp-tlsrpt-23]"
  },
  {
    "Header Field Name": "To",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5322]"
  },
  {
    "Header Field Name": "Topic",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.4]"
  },
  {
    "Header Field Name": "Trailer",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 4.4]"
  },
  {
    "Header Field Name": "Transfer-Encoding",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 3.3.1]"
  },
  {
    "Header Field Name": "TTL",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.2]"
  },
  {
    "Header Field Name": "Urgency",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC8030, Section 5.3]"
  },
  {
    "Header Field Name": "Upgrade",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 6.7]"
  },
  {
    "Header Field Name": "User-Agent",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 5.5.3]"
  },
  {
    "Header Field Name": "User-Agent",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536][RFC2616]"
  },
  {
    "Header Field Name": "Vary",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7231, Section 7.1.4]"
  },
  {
    "Header Field Name": "VBR-Info",
    "Template": "",
    "Protocol": "mail",
    "Status": "standard",
    "Reference": "[RFC5518]"
  },
  {
    "Header Field Name": "Via",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7230, Section 5.7.1]"
  },
  {
    "Header Field Name": "WWW-Authenticate",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7235, Section 4.1]"
  },
  {
    "Header Field Name": "Warning",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[RFC7234, Section 5.5]"
  },
  {
    "Header Field Name": "X-Content-Type-Options",
    "Template": "",
    "Protocol": "http",
    "Status": "standard",
    "Reference": "[https://fetch.spec.whatwg.org/#x-content-type-options-header]"
  },
  {
    "Header Field Name": "Xref",
    "Template": "",
    "Protocol": "netnews",
    "Status": "standard",
    "Reference": "[RFC5536]"
  }
]
},{}],307:[function(require,module,exports){
/**
 * @file The constant NaN derived mathematically by 0 / 0.
 * @version 1.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module nan-x
 */

'use strict';

/**
 * The constant NaN derived mathematically by 0 / 0.
 *
 * @type number
 * @example
 * var NAN = require('nan-x');
 *
 * NAN !== NAN; // true
 * NAN === NAN; // false
 */
module.exports = 0 / 0;

},{}],308:[function(require,module,exports){
/**
 * @file Trims and replaces sequences of whitespace characters by a single space.
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module normalize-space-x
 */

'use strict';

var libTrim = require('trim-x');
var trim2016 = libTrim.trim2016;
var trim2018 = libTrim.trim2018;
var Rx = require('cached-constructors-x').RegExp;
var libWhiteSpace = require('white-space-x');
var reNormalize2016 = new Rx('[' + libWhiteSpace.string2016 + ']+', 'g');
var reNormalize2018 = new Rx('[' + libWhiteSpace.string2018 + ']+', 'g');
var replace = ''.replace;

var $normalizeSpace2016 = function normalizeSpace2016(string) {
  return replace.call(trim2016(string), reNormalize2016, ' ');
};

var $normalizeSpace2018 = function normalizeSpace2018(string) {
  return replace.call(trim2018(string), reNormalize2018, ' ');
};

module.exports = {
  /**
   * Reference to normalizeSpace2018.
   */
  normalizeSpace: $normalizeSpace2018,

  /**
   * This method strips leading and trailing white-space from a string,
   * replaces sequences of whitespace characters by a single space,
   * and returns the resulting string. (ES2016)
   *
   * @param {string} string - The string to be normalized.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The normalized string.
   * @example
   * var normalizeSpace = require('normalize-space-x');
   *
   * normalizeSpace(' \t\na \t\nb \t\n') === 'a b'; // true
   */
  normalizeSpace2016: $normalizeSpace2016,

  /**
   * This method strips leading and trailing white-space from a string,
   * replaces sequences of whitespace characters by a single space,
   * and returns the resulting string. (ES2018)
   *
   * @param {string} string - The string to be normalized.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The normalized string.
   * @example
   * var normalizeSpace = require('normalize-space-x');
   *
   * normalizeSpace(' \t\na \t\nb \t\n') === 'a b'; // true
   */
  normalizeSpace2018: $normalizeSpace2018
};

},{"cached-constructors-x":35,"trim-x":310,"white-space-x":311}],309:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"cached-constructors-x":35,"dup":92,"require-coercible-to-string-x":329,"white-space-x":311}],310:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"dup":85,"trim-left-x":350,"trim-right-x":309}],311:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"dup":93}],312:[function(require,module,exports){
/**
 * @file Used to copy the values of all enumerable own properties from one or more source objects to a target object.
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-assign-x
 */

'use strict';

var attempt = require('attempt-x');
var objectKeys = require('object-keys-x');
var isFunction = require('is-function-x');
var reduce = require('array-reduce-x');
var getOwnPropertyNames = require('get-own-property-names-x');
var isObjectLike = require('is-object-like-x');
var nativeAssign = isFunction(Object.assign) && Object.assign;

var workingNativeAssign = function _nativeWorks() {
  var obj = {};
  var res = attempt(nativeAssign, obj, { 0: 1 }, { 1: 2 });
  return res.threw === false && res.value === obj && objectKeys(obj).length === 2 && obj[0] === 1 && obj[1] === 2;
};

// eslint-disable-next-line id-length
var lacksProperEnumerationOrder = function _enumOrder() {
  // https://bugs.chromium.org/p/v8/issues/detail?id=4118
  var test1 = Object('abc');
  test1[5] = 'de';
  if (getOwnPropertyNames(test1)[0] === '5') {
    return true;
  }

  var strNums = '0123456789';
  // https://bugs.chromium.org/p/v8/issues/detail?id=3056
  var test2 = reduce(strNums.split(''), function (acc, ignore, index) {
    acc['_' + String.fromCharCode(index)] = index;
    return acc;
  }, {});

  var order = reduce(getOwnPropertyNames(test2), function (acc, name) {
    return acc + test2[name];
  }, '');

  if (order !== strNums) {
    return true;
  }

  // https://bugs.chromium.org/p/v8/issues/detail?id=3056
  var letters = 'abcdefghijklmnopqrst';
  var test3 = reduce(letters.split(''), function (acc, letter) {
    acc[letter] = letter;
    return acc;
  }, {});

  var result = attempt(nativeAssign, {}, test3);
  return result.threw === false && objectKeys(result.value).join('') !== letters;
};

// eslint-disable-next-line id-length
var assignHasPendingExceptions = function _exceptions() {
  if (isFunction(Object.preventExtensions) === false) {
    return false;
  }

  // Firefox 37 still has "pending exception" logic in its Object.assign implementation,
  // which is 72% slower than our shim, and Firefox 40's native implementation.
  var result = attempt(Object.preventExtensions, { 1: 2 });
  if (result.threw || isObjectLike(result.value) === false) {
    return false;
  }

  var thrower = result.value;
  result = attempt(nativeAssign, thrower, 'xy');
  return result.threw ? thrower[1] === 'y' : false;
};

var shouldImplement = (function () {
  if (nativeAssign === false) {
    return true;
  }

  if (workingNativeAssign() === false) {
    return true;
  }

  if (lacksProperEnumerationOrder()) {
    return true;
  }

  if (assignHasPendingExceptions()) {
    return true;
  }

  return false;
}());

var $assign;
if (shouldImplement) {
  var toObject = require('to-object-x');
  var slice = require('array-slice-x');
  var isNil = require('is-nil-x');
  var getOEPS = require('get-own-enumerable-property-symbols-x');
  var concat = Array.prototype.concat;

  // 19.1.3.1
  $assign = function assign(target) {
    return reduce(slice(arguments, 1), function _assignSources(tgt, source) {
      if (isNil(source)) {
        return tgt;
      }

      var object = Object(source);
      return reduce(concat.call(objectKeys(object), getOEPS(object)), function _assignTo(tar, key) {
        tar[key] = object[key];
        return tar;
      }, tgt);
    }, toObject(target));
  };
} else {
  $assign = nativeAssign;
}

/**
 * This method is used to copy the values of all enumerable own properties from
 * one or more source objects to a target object. It will return the target object.
 *
 * @param {*} target - The target object.
 * @param {*} [...source] - The source object(s).
 * @throws {TypeError} If target is null or undefined.
 * @returns {Object} The target object.
 * @example
 * var assign = require('object-assign-x');
 *
 * var obj = { a: 1 };
 * var copy = assign({}, obj);
 * console.log(copy); // { a: 1 }
 */
module.exports = $assign;

},{"array-reduce-x":313,"array-slice-x":24,"attempt-x":32,"get-own-enumerable-property-symbols-x":63,"get-own-property-names-x":315,"is-function-x":110,"is-nil-x":122,"is-object-like-x":124,"object-keys-x":316,"to-object-x":344}],313:[function(require,module,exports){
/**
 * @file Reduce an array (from left to right) to a single value.
 * @version 2.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module array-reduce-x
 */

'use strict';

var cachedCtrs = require('cached-constructors-x');
var ArrayCtr = cachedCtrs.Array;
var castObject = cachedCtrs.Object;
var nativeReduce = typeof ArrayCtr.prototype.reduce === 'function' && ArrayCtr.prototype.reduce;

// ES5 15.4.4.21
// http://es5.github.com/#x15.4.4.21
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
var isWorking;
if (nativeReduce) {
  var attempt = require('attempt-x');
  isWorking = attempt.call([], nativeReduce, function (acc) {
    return acc;
  }).threw;

  var res;
  if (isWorking) {
    res = attempt.call(castObject('abc'), nativeReduce, function (acc, c) {
      return acc + c;
    }, 'x');

    isWorking = res.threw === false && res.value === 'xabc';
  }

  if (isWorking) {
    res = attempt.call((function () {
      return arguments;
    }(1, 2, 3)), nativeReduce, function (acc, arg) {
      return acc + arg;
    }, 1);

    isWorking = res.threw === false && res.value === 7;
  }

  if (isWorking) {
    res = attempt.call({
      0: 1,
      1: 2,
      3: 3,
      4: 4,
      length: 4
    }, nativeReduce, function (acc, arg) {
      return acc + arg;
    }, 2);

    isWorking = res.threw === false && res.value === 8;
  }

  if (isWorking) {
    var doc = typeof document !== 'undefined' && document;
    if (doc) {
      var fragment = doc.createDocumentFragment();
      var div = doc.createElement('div');
      fragment.appendChild(div);
      res = attempt.call(fragment.childNodes, nativeReduce, function (acc, node) {
        acc[acc.length] = node;
        return acc;
      }, []);

      isWorking = res.threw === false && res.value.length === 1 && res.value[0] === div;
    }
  }

  if (isWorking) {
    // eslint-disable-next-line max-params
    res = attempt.call('ab', nativeReduce, function (_, __, ___, list) {
      return list;
    });

    isWorking = res.threw === false && typeof res.value === 'object';
  }
}

var $reduce;
if (nativeReduce && isWorking) {
  $reduce = function reduce(array, callBack /* , initialValue */) {
    var args = [callBack];
    if (arguments.length > 2) {
      args[1] = arguments[2];
    }

    return nativeReduce.apply(array, args);
  };
} else {
  // Check failure of by-index access of string characters (IE < 9)
  // and failure of `0 in boxedString` (Rhino)
  var splitIfBoxedBug = require('split-if-boxed-bug-x');
  var toLength = require('to-length-x').toLength2018;
  var toObject = require('to-object-x');
  var assertIsFunction = require('assert-is-function-x');

  $reduce = function reduce(array, callBack /* , initialValue*/) {
    var object = toObject(array);
    // If no callback function or if callback is not a callable function
    assertIsFunction(callBack);
    var iterable = splitIfBoxedBug(object);
    var length = toLength(iterable.length);
    var argsLength = arguments.length;
    // no value to return if no initial value and an empty array
    if (length === 0 && argsLength < 3) {
      throw new TypeError('reduce of empty array with no initial value');
    }

    var i = 0;
    var result;
    if (argsLength > 2) {
      result = arguments[2];
    } else {
      do {
        if (i in iterable) {
          result = iterable[i];
          i += 1;
          // eslint-disable-next-line no-restricted-syntax
          break;
        }

        // if array contains no values, no initial value to return
        i += 1;
        if (i >= length) {
          throw new TypeError('reduce of empty array with no initial value');
        }
      } while (true); // eslint-disable-line no-constant-condition
    }

    while (i < length) {
      if (i in iterable) {
        result = callBack(result, iterable[i], i, object);
      }

      i += 1;
    }

    return result;
  };
}

/**
 * This method applies a function against an accumulator and each element in the
 * array (from left to right) to reduce it to a single value.
 *
 * @param {array} array - The array to iterate over.
 * @param {Function} callBack - Function to execute for each element.
 * @param {*} [initialValue] - Value to use as the first argument to the first
 *  call of the callback. If no initial value is supplied, the first element in
 *  the array will be used. Calling reduce on an empty array without an initial
 *  value is an error.
 * @throws {TypeError} If array is null or undefined.
 * @throws {TypeError} If callBack is not a function.
 * @throws {TypeError} If called on an empty array without an initial value.
 * @returns {*} The value that results from the reduction.
 * @example
 * var reduce = require('array-reduce-x');
 *
 * var sum = reduce([0, 1, 2, 3], function (a, b) {
 *   return a + b;
 * }, 0);
 * // sum is 6
 */
module.exports = $reduce;

},{"assert-is-function-x":314,"attempt-x":32,"cached-constructors-x":35,"split-if-boxed-bug-x":334,"to-length-x":339,"to-object-x":344}],314:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"dup":16,"is-function-x":110,"is-primitive":126,"to-string-symbols-supported-x":347}],315:[function(require,module,exports){
/**
 * @file Creates an array of all properties (enumerable or not) found directly upon a given object.
 * @version 2.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module get-own-property-names-x
 */

'use strict';

var toObject = require('to-object-x');
var nativeGOPN = typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames;

var getOPN;
if (nativeGOPN) {
  var attempt = require('attempt-x');
  var isArray = require('is-array-x');
  var isCorrectRes = function _isCorrectRes(r, length) {
    return r.threw === false && isArray(r.value) && r.value.length === length;
  };

  var either = function _either(r, a, b) {
    var x = r.value[0];
    var y = r.value[1];
    return (x === a && y === b) || (x === b && y === a);
  };

  var res = attempt(nativeGOPN, 'fo');
  if (isCorrectRes(res, 3) && either(res, '0', '1') && res.value[2] === 'length') {
    getOPN = nativeGOPN;
  } else {
    res = attempt(nativeGOPN, { a: 1, b: 2 });
    if (isCorrectRes(res, 2) && either(res, 'a', 'b')) {
      var toStringTag = require('to-string-tag-x');
      var arraySlice = require('array-slice-x');
      var win = typeof window === 'object' && window;
      var cachedWindowNames = win ? nativeGOPN(win) : [];

      getOPN = function getOwnPropertyNames(obj) {
        var val = toObject(obj);
        // IE bug where layout engine calls userland gOPN for cross-domain `window` objects
        if (win && win !== window && toStringTag(val) === '[object Window]') {
          var result = attempt(nativeGOPN, val);
          return result.threw ? arraySlice(cachedWindowNames) : result.value;
        }

        return nativeGOPN(val);
      };
    }
  }
}

if (typeof getOPN !== 'function') {
  var objectKeys = require('object-keys-x');
  getOPN = function getOwnPropertyNames(obj) {
    return objectKeys(obj);
  };
}

/**
 * This method creates an array of all properties (enumerable or not) found
 * directly upon a given object.
 *
 * @param {object} obj - The object whose enumerable and non-enumerable own
 *  properties are to be returned.
 * @throws {TypeError} If target is null or undefined.
 * @returns {array} An array of strings that correspond to the properties found
 *  directly upon the given object.
 * @example
 * var getOwnPropertyName = require('get-own-property-name-x');
 *
 * getOwnPropertyNames('foo'); // ["0", "1", "2", "length"]
 */
module.exports = getOPN;

},{"array-slice-x":24,"attempt-x":32,"is-array-x":101,"object-keys-x":316,"to-object-x":344,"to-string-tag-x":348}],316:[function(require,module,exports){
/**
 * @file An ES6 Object.keys shim.
 * @version 2.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-keys-x
 */

'use strict';

var toObject = require('to-object-x');
var nativeKeys = typeof Object.keys === 'function' && Object.keys;

var isWorking;
var throwsWithNull;
var worksWithPrim;
var worksWithRegex;
var worksWithArgs;
var worksWithStr;
if (nativeKeys) {
  var attempt = require('attempt-x');
  var isArray = require('is-array-x');
  var isCorrectRes = function _isCorrectRes(r, length) {
    return r.threw === false && isArray(r.value) && r.value.length === length;
  };

  var either = function _either(r, a, b) {
    var x = r.value[0];
    var y = r.value[1];
    return (x === a && y === b) || (x === b && y === a);
  };

  var testObj = { a: 1, b: 2 };
  var res = attempt(nativeKeys, testObj);
  isWorking = isCorrectRes(res, 2) && either(res, 'a', 'b');

  if (isWorking) {
    testObj = Object('a');
    testObj.y = 1;
    res = attempt(nativeKeys, testObj);
    isWorking = isCorrectRes(res, 2) && either(res, '0', 'y');
  }

  if (isWorking) {
    throwsWithNull = attempt(nativeKeys, null).threw;
    worksWithPrim = isCorrectRes(attempt(nativeKeys, 42), 0);
    worksWithRegex = attempt(nativeKeys, /a/g).threw === false;

    res = attempt(nativeKeys, (function () {
      return arguments;
    }(1, 2)));

    worksWithArgs = isCorrectRes(res, 2) && either(res, '0', '1');

    res = attempt(nativeKeys, Object('ab'));
    worksWithStr = isCorrectRes(res, 2) && either(res, '0', '1');
  }
}

var objectKeys;
if (isWorking) {
  if (throwsWithNull && worksWithPrim && worksWithRegex && worksWithArgs && worksWithStr) {
    objectKeys = nativeKeys;
  } else {
    var isArguments = worksWithArgs !== true && require('is-arguments');
    var arraySlice = isArguments && require('array-like-slice-x');
    var splitIfBoxed = worksWithStr !== true && require('split-if-boxed-bug-x');
    var isString = splitIfBoxed && require('is-string');
    var isRegexp = worksWithRegex !== true && require('is-regexp-x');
    var has = isRegexp && require('has-own-property-x');

    objectKeys = function keys(object) {
      var obj = toObject ? toObject(object) : object;
      if (isArguments && isArguments(obj)) {
        obj = arraySlice(obj);
      } else if (isString && isString(obj)) {
        obj = splitIfBoxed(obj);
      } else if (isRegexp && isRegexp(obj)) {
        var regexKeys = [];
        // eslint-disable-next-line no-restricted-syntax
        for (var k in obj) {
          if (has(obj, k)) {
            regexKeys[regexKeys.length] = k;
          }
        }

        return regexKeys;
      }

      return nativeKeys(obj);
    };
  }
} else {
  var objKeys = require('object-keys');
  objectKeys = function keys(object) {
    return objKeys(toObject(object));
  };
}

/**
 * This method returns an array of a given object's own enumerable properties,
 * in the same order as that provided by a for...in loop (the difference being
 * that a for-in loop enumerates properties in the prototype chain as well).
 *
 * @param {*} obj The object of which the enumerable own properties are to be returned.
 * @return {Array} An array of strings that represent all the enumerable properties of the given object.
 * @example
 * var objectKeys = require('object-keys-x');
 *
 * var obj = {
 *   arr: [],
 *   bool: true,
 *   'null': null,
 *   num: 42,
 *   obj: { },
 *   str: 'boz',
 *   undefined: void 0
 * };
 *
 * objectKeys(obj); // ['arr', 'bool', 'null', 'num', 'obj', 'str', 'undefined']
 */
module.exports = objectKeys;

},{"array-like-slice-x":14,"attempt-x":32,"has-own-property-x":70,"is-arguments":98,"is-array-x":101,"is-regexp-x":129,"is-string":134,"object-keys":321,"split-if-boxed-bug-x":334,"to-object-x":344}],317:[function(require,module,exports){
/**
 * @file Sham for Object.defineProperties
 * @version 2.0.4
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-define-properties-x
 */

'use strict';

var forEach = require('array-for-each-x');
var $keys = require('object-keys-x');
var $defineProperty = require('object-define-property-x');
var $defineProperties = Object.defineProperties;
var definePropertiesFallback;

// ES5 15.2.3.6
// http://es5.github.com/#x15.2.3.6

// Patch for WebKit and IE8 standard mode
// Designed by hax <hax.github.com>
// related issue: https://github.com/es-shims/es5-shim/issues#issue/5
// IE8 Reference:
//     http://msdn.microsoft.com/en-us/library/dd282900.aspx
//     http://msdn.microsoft.com/en-us/library/dd229916.aspx
// WebKit Bugs:
//     https://bugs.webkit.org/show_bug.cgi?id=36423

var doesDefinePropertyWork = function _doesDefinePropertyWork(object) {
  try {
    $defineProperty(object, 'sentinel', {});
    return 'sentinel' in object;
  } catch (exception) {
    return false;
  }
};

// check whether defineProperty works if it's given. Otherwise,
// shim partially.
if ($defineProperty) {
  // eslint-disable-next-line id-length
  var definePropertyWorksOnObject = doesDefinePropertyWork({});
  var definePropertyWorksOnDom = typeof document === 'undefined' || doesDefinePropertyWork(document.createElement('div'));
  if (definePropertyWorksOnObject === false || definePropertyWorksOnDom === false) {
    definePropertiesFallback = Object.defineProperties;
  }
}

// ES5 15.2.3.7
// http://es5.github.com/#x15.2.3.7
if (Boolean($defineProperties) === false || definePropertiesFallback) {
  $defineProperties = function defineProperties(object, properties) {
    // make a valiant attempt to use the real defineProperties
    if (definePropertiesFallback) {
      try {
        return definePropertiesFallback.call(Object, object, properties);
      } catch (exception) {
        // try the shim if the real one doesn't work
      }
    }

    forEach($keys(properties), function (property) {
      if (property !== '__proto__') {
        $defineProperty(object, property, properties[property]);
      }
    });
    return object;
  };
}

/**
 * This method defines new or modifies existing properties directly on an
 * object, returning the object.
 *
 * @param {Object} object - The object on which to define or modify properties.
 * @param {Object} properties - An object whose own enumerable properties
 *  constitute descriptors for the
 * properties to be defined or modified.
 * @returns {Object} The object that was passed to the function.
 * @example
 * var defineProperties = require('object-define-properties-x');
 *
 * var obj = {};
 * defineProperties(obj, {
 *   'property1': {
 *     value: true,
 *     writable: true
 *   },
 *   'property2': {
 *     value: 'Hello',
 *     writable: true
 *   }
 *   // etc. etc.
 * });
 */
module.exports = $defineProperties;

},{"array-for-each-x":8,"object-define-property-x":318,"object-keys-x":320}],318:[function(require,module,exports){
/**
 * @file Sham for Object.defineProperty
 * @version 2.1.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-define-property-x
 */

'use strict';

var isPrimitive = require('is-primitive');
var owns = require('has-own-property-x');
var $defineProperty = Object.defineProperty;

var prototypeOfObject = Object.prototype;
var definePropertyFallback;
// If JS engine supports accessors creating shortcuts.
var defineGetter;
var defineSetter;
var lookupGetter;
var lookupSetter;
var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
if (supportsAccessors) {
  /* eslint-disable no-underscore-dangle, no-restricted-properties */
  defineGetter = prototypeOfObject.__defineGetter__;
  defineSetter = prototypeOfObject.__defineSetter__;
  lookupGetter = prototypeOfObject.__lookupGetter__;
  lookupSetter = prototypeOfObject.__lookupSetter__;
  /* eslint-enable no-underscore-dangle, no-restricted-properties */
}

// ES5 15.2.3.6
// http://es5.github.com/#x15.2.3.6

// Patch for WebKit and IE8 standard mode
// Designed by hax <hax.github.com>
// related issue: https://github.com/es-shims/es5-shim/issues#issue/5
// IE8 Reference:
//     http://msdn.microsoft.com/en-us/library/dd282900.aspx
//     http://msdn.microsoft.com/en-us/library/dd229916.aspx
// WebKit Bugs:
//     https://bugs.webkit.org/show_bug.cgi?id=36423

var doesDefinePropertyWork = function _doesDefinePropertyWork(object) {
  try {
    $defineProperty(object, 'sentinel', {});
    return 'sentinel' in object;
  } catch (exception) {
    return false;
  }
};

// check whether defineProperty works if it's given. Otherwise,
// shim partially.
if ($defineProperty) {
  // eslint-disable-next-line id-length
  var definePropertyWorksOnObject = doesDefinePropertyWork({});
  var definePropertyWorksOnDom = typeof document === 'undefined' || doesDefinePropertyWork(document.createElement('div'));
  if (definePropertyWorksOnObject === false || definePropertyWorksOnDom === false) {
    definePropertyFallback = Object.defineProperty;
  }
}

if (Boolean($defineProperty) === false || definePropertyFallback) {
  var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
  var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
  // eslint-disable-next-line id-length
  var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';

  $defineProperty = function defineProperty(object, property, descriptor) {
    if (isPrimitive(object)) {
      throw new TypeError(ERR_NON_OBJECT_TARGET + object);
    }
    if (isPrimitive(descriptor)) {
      throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
    }
    // make a valiant attempt to use the real defineProperty
    // for I8's DOM elements.
    if (definePropertyFallback) {
      try {
        return definePropertyFallback.call(Object, object, property, descriptor);
      } catch (exception) {
        // try the shim if the real one doesn't work
      }
    }

    // If it's a data property.
    if ('value' in descriptor) {
      // fail silently if 'writable', 'enumerable', or 'configurable'
      // are requested but not supported
      /*
      // alternate approach:
      if ( // can't implement these features; allow false but not true
          ('writable' in descriptor && !descriptor.writable) ||
          ('enumerable' in descriptor && !descriptor.enumerable) ||
          ('configurable' in descriptor && !descriptor.configurable)
      ))
          throw new RangeError(
            'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
          );
      */

      if (supportsAccessors && (lookupGetter.call(object, property) || lookupSetter.call(object, property))) {
        // As accessors are supported only on engines implementing
        // `__proto__` we can safely override `__proto__` while defining
        // a property to make sure that we don't hit an inherited
        // accessor.
        /* eslint-disable no-proto */
        var prototype = object.__proto__;
        object.__proto__ = prototypeOfObject;
        // Deleting a property anyway since getter / setter may be
        // defined on object itself.
        delete object[property];
        object[property] = descriptor.value;
        // Setting original `__proto__` back now.
        object.__proto__ = prototype;
        /* eslint-enable no-proto */
      } else {
        object[property] = descriptor.value;
      }
    } else {
      var hasGetter = 'get' in descriptor;
      var hasSetter = 'set' in descriptor;
      if (supportsAccessors === false && (hasGetter || hasSetter)) {
        throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
      }
      // If we got that far then getters and setters can be defined !!
      if (hasGetter) {
        defineGetter.call(object, property, descriptor.get);
      }
      if (hasSetter) {
        defineSetter.call(object, property, descriptor.set);
      }
    }
    return object;
  };
}

/**
 * This method defines a new property directly on an object, or modifies an existing property on an object,
 * and returns the object.
 *
 * @param {Object} object - The object on which to define the property.
 * @param {string} property - The name of the property to be defined or modified.
 * @param {Object} descriptor - The descriptor for the property being defined or modified.
 * @returns {Object} The object that was passed to the function.
 * @example
 * var defineProperty = require('object-define-property-x');
 *
 * var o = {}; // Creates a new object
 *
 * defineProperty(o, 'a', {
 *   value: 37,
 *   writable: true
 * });
 */
module.exports = $defineProperty;

},{"has-own-property-x":70,"is-primitive":126}],319:[function(require,module,exports){
/**
 * @file Sham for ES6 Object.getOwnPropertyDescriptor
 * @version 3.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-get-own-property-descriptor-x
 */

'use strict';

var toObject = require('to-object-x');
var toPropertyKey = require('to-property-key-x');
var isFalsey = require('is-falsey-x');
var attempt = require('attempt-x');

var nativeGOPD = typeof Object.getOwnPropertyDescriptor === 'function' && Object.getOwnPropertyDescriptor;
var getOPDFallback1;
var getOPDFallback2;

// ES5 15.2.3.3
// http://es5.github.com/#x15.2.3.3

var doesGOPDWork = function (object, prop) {
  object[toPropertyKey(prop)] = 0;
  var testResult = attempt(nativeGOPD, object, prop);
  return testResult.threw === false && testResult.value.value === 0;
};

// check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
var $getOwnPropertyDescriptor;
if (nativeGOPD) {
  var doc = typeof document !== 'undefined' && document;
  var getOPDWorksOnDom = doc ? doesGOPDWork(doc.createElement('div'), 'sentinel') : true;
  if (getOPDWorksOnDom) {
    var res = attempt(nativeGOPD, Object('abc'), 1);
    var worksWithStr = res.threw === false && res.value && res.value.value === 'b';
    if (worksWithStr) {
      var getOPDWorksOnObject = doesGOPDWork({}, 'sentinel');
      if (getOPDWorksOnObject) {
        var worksWithPrim = attempt(nativeGOPD, 42, 'name').threw === false;
        var worksWithObjSym = require('has-symbol-support-x') && doesGOPDWork({}, Object(Symbol('')));
        // eslint-disable-next-line max-depth
        if (worksWithObjSym) {
          // eslint-disable-next-line max-depth
          if (worksWithPrim) {
            $getOwnPropertyDescriptor = nativeGOPD;
          } else {
            $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
              return nativeGOPD(toObject(object), property);
            };
          }
        } else if (worksWithPrim) {
          $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
            return nativeGOPD(object, toPropertyKey(property));
          };
        } else {
          $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
            return nativeGOPD(toObject(object), toPropertyKey(property));
          };
        }
      } else {
        getOPDFallback1 = nativeGOPD;
      }
    } else {
      getOPDFallback2 = nativeGOPD;
    }
  }
}

if (isFalsey($getOwnPropertyDescriptor) || getOPDFallback1 || getOPDFallback2) {
  var owns = require('has-own-property-x');
  var isPrimitive = require('is-primitive');
  var isString = require('is-string');
  var isIndex = require('is-index-x');
  var propertyIsEnumerable = require('property-is-enumerable-x');
  var prototypeOfObject = Object.prototype;

  // If JS engine supports accessors creating shortcuts.
  var lookupGetter;
  var lookupSetter;
  var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
  if (supportsAccessors) {
    // eslint-disable-next-line no-underscore-dangle
    var lg = prototypeOfObject.__lookupGetter__;
    // eslint-disable-next-line no-underscore-dangle
    var ls = prototypeOfObject.__lookupSetter__;
    lookupGetter = function (object, property) {
      return lg.call(object, property);
    };

    lookupSetter = function (object, property) {
      return ls.call(object, property);
    };
  }

  $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
    var obj = toObject(object);
    var propKey = toPropertyKey(property);

    var result;
    // make a valiant attempt to use the real getOwnPropertyDescriptor for I8's DOM elements.
    if (getOPDFallback1) {
      result = attempt.call(Object, getOPDFallback1, obj, propKey);
      if (result.threw === false) {
        return result.value;
      }
      // try the shim if the real one doesn't work
    }

    var isStringIndex = isString(obj) && isIndex(propKey, obj.length);
    if (getOPDFallback2 && isStringIndex === false) {
      result = attempt.call(Object, getOPDFallback2, obj, propKey);
      if (result.threw === false) {
        return result.value;
      }
      // try the shim if the real one doesn't work
    }

    var descriptor;
    // If object does not owns property return undefined immediately.
    if (isStringIndex === false && owns(obj, propKey) === false) {
      return descriptor;
    }

    // If object has a property then it's for sure `configurable`, and
    // probably `enumerable`. Detect enumerability though.
    descriptor = {
      configurable: isPrimitive(object) === false && isStringIndex === false,
      enumerable: propertyIsEnumerable(obj, propKey)
    };

    // If JS engine supports accessor properties then property may be a
    // getter or setter.
    if (supportsAccessors) {
      // Unfortunately `__lookupGetter__` will return a getter even
      // if object has own non getter property along with a same named
      // inherited getter. To avoid misbehavior we temporary remove
      // `__proto__` so that `__lookupGetter__` will return getter only
      // if it's owned by an object.
      // eslint-disable-next-line no-proto
      var prototype = obj.__proto__;
      var notPrototypeOfObject = obj !== prototypeOfObject;
      // avoid recursion problem, breaking in Opera Mini when
      // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
      // or any other Object.prototype accessor
      if (notPrototypeOfObject) {
        // eslint-disable-next-line no-proto
        obj.__proto__ = prototypeOfObject;
      }

      var getter = lookupGetter(obj, propKey);
      var setter = lookupSetter(obj, propKey);

      if (notPrototypeOfObject) {
        // Once we have getter and setter we can put values back.
        // eslint-disable-next-line no-proto
        obj.__proto__ = prototype;
      }

      if (getter || setter) {
        if (getter) {
          descriptor.get = getter;
        }

        if (setter) {
          descriptor.set = setter;
        }

        // If it was accessor property we're done and return here
        // in order to avoid adding `value` to the descriptor.
        return descriptor;
      }
    }

    // If we got this far we know that object has an own property that is
    // not an accessor so we set it as a value and return descriptor.
    if (isStringIndex) {
      descriptor.value = obj.charAt(propKey);
      descriptor.writable = false;
    } else {
      descriptor.value = obj[propKey];
      descriptor.writable = true;
    }

    return descriptor;
  };
}

/**
 * This method returns a property descriptor for an own property (that is,
 * one directly present on an object and not in the object's prototype chain)
 * of a given object.
 *
 * @param {*} object - The object in which to look for the property.
 * @param {*} property - The name of the property whose description is to be retrieved.
 * @returns {Object} A property descriptor of the given property if it exists on the object, undefined otherwise.
 * @example
 * var getOwnPropertyDescriptor = require('object-get-own-property-descriptor-x');
 * var obj = { bar: 42 };
 * var d = getOwnPropertyDescriptor(o, 'bar');
 * // d is {
 * //   configurable: true,
 * //   enumerable: true,
 * //   value: 42,
 * //   writable: true
 * // }
 */
module.exports = $getOwnPropertyDescriptor;

},{"attempt-x":32,"has-own-property-x":70,"has-symbol-support-x":72,"is-falsey-x":108,"is-index-x":112,"is-primitive":126,"is-string":134,"property-is-enumerable-x":326,"to-object-x":344,"to-property-key-x":346}],320:[function(require,module,exports){
/**
 * @file An ES6 Object.keys shim.
 * @version 1.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module object-keys-x
 */

'use strict';

var isArguments = require('is-arguments');
var toObject = require('to-object-x');
var originalKeys = Object.keys;

try {
  var arr = originalKeys({ a: 1, b: 2 });
  if (arr.length !== 2 || arr[0] !== 'a' || arr[1] !== 'b') {
    throw new Error('failed keys');
  }
} catch (ignore) {
  originalKeys = require('object-keys');
}

var keysWorksWithArguments = (function () {
  // Safari 5.0 bug
  return originalKeys(arguments).length === 2;
}(1, 2));

var keysHasArgumentsLengthBug = (function () {
  var argKeys = originalKeys(arguments);
  return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;
}(1));

var objectKeys;
if (!keysWorksWithArguments || keysHasArgumentsLengthBug) {
  var arraySlice = Array.prototype.slice;
  objectKeys = function keys(object) {
    var obj = toObject(object);
    if (isArguments(object)) {
      return originalKeys(arraySlice.call(obj));
    }

    return originalKeys(obj);
  };
} else {
  objectKeys = function keys(object) {
    return originalKeys(toObject(object));
  };
}

/**
 * This method returns an array of a given object's own enumerable properties,
 * in the same order as that provided by a for...in loop (the difference being
 * that a for-in loop enumerates properties in the prototype chain as well).
 *
 * @param {*} obj The object of which the enumerable own properties are to be returned.
 * @return {Array} An array of strings that represent all the enumerable properties of the given object.
 * @example
 * var objectKeys = require('object-keys-x');
 *
 * var obj = {
 *   arr: [],
 *   bool: true,
 *   'null': null,
 *   num: 42,
 *   obj: { },
 *   str: 'boz',
 *   undefined: void 0
 * };
 *
 * objectKeys(obj); // ['arr', 'bool', 'null', 'num', 'obj', 'str', 'undefined']
 */
module.exports = objectKeys;

},{"is-arguments":98,"object-keys":321,"to-object-x":344}],321:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$applicationCache: true,
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":322}],322:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],323:[function(require,module,exports){
"use strict";

// <https://lacke.mn/reduce-your-bundle-js-file-size/>
// // <https://github.com/lodash/babel-plugin-lodash/issues/221>
var isError = require('lodash/isError');

var isArray = require('lodash/isArray');

var isEmpty = require('lodash/isEmpty');

var pick = require('lodash/pick');

var isFunction = require('lodash/isFunction'); // we want to support parsing other fields than the standard:
// <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors>
// <https://github.com/stripe/stripe-node/blob/3c07d851cf897490d8b93dd4457dda0c4c8e667f/lib/Error.js#L33>


var parseErr = function parseErr(err) {
  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (!isError(err)) throw new Error('`err` must be an Error');
  if (!isArray(fields)) throw new Error('`fields` must be an Array');
  var keys = {};
  Object.getOwnPropertyNames(Object.getPrototypeOf(err)).concat(Object.getOwnPropertyNames(err)).forEach(function (key) {
    if (!isFunction(err[key])) keys[key] = err[key];
  });
  if (!keys.name && err.constructor.name) keys.name = err.constructor.name;
  return isArray(fields) && !isEmpty(fields) ? pick(keys, fields) : keys;
};

module.exports = parseErr;
},{"lodash/isArray":268,"lodash/isEmpty":271,"lodash/isError":272,"lodash/isFunction":273,"lodash/pick":290}],324:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"cached-constructors-x":35,"dup":81,"nan-x":307,"to-string-x":349,"trim-left-x":350}],325:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],326:[function(require,module,exports){
/**
 * @file Indicates whether the specified property is enumerable.
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module property-is-enumerable-x
 */

'use strict';

var toPropertyKey = require('to-property-key-x');
var toObject = require('to-object-x');
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

/**
 * This method returns a Boolean indicating whether the specified property is
 * enumerable. Does not attempt to fix bugs in IE<9 or old Opera, otherwise it
 * does ES6ify the method.
 *
 * @param {!Object} object - The object on which to test the property.
 * @param {string|Symbol} property - The name of the property to test.
 * @throws {TypeError} If target is null or undefined.
 * @returns {boolean} A Boolean indicating whether the specified property is
 *  enumerable.
 * @example
 * var propertyIsEnumerable = require('property-is-enumerable-x');
 *
 * var o = {};
 * var a = [];
 * o.prop = 'is enumerable';
 * a[0] = 'is enumerable';
 *
 * propertyIsEnumerable(o, 'prop'); // true
 * propertyIsEnumerable(a, 0); // true
 */
module.exports = function propertyIsEnumerable(object, property) {
  return propIsEnumerable.call(toObject(object), toPropertyKey(property));
};

},{"to-object-x":344,"to-property-key-x":346}],327:[function(require,module,exports){
/**
 * @file Sham for Reflect.ownKeys
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module reflect-own-keys-x
 */

'use strict';

var hasReflect = require('has-reflect-support-x');
var reflectOwnKeys = hasReflect && Reflect.ownKeys;

if (reflectOwnKeys) {
  try {
    var k = reflectOwnKeys({ a: 1, b: 2 }).sort();
    if (k.length !== 2 || k[0] !== 'a' || k[1] !== 'b') {
      throw new Error('failed');
    }
  } catch (ignore) {
    reflectOwnKeys = null;
  }
}

if (Boolean(reflectOwnKeys) === false) {
  var assertIsObject = require('assert-is-object-x');
  var getOwnPropertyNames = require('get-own-property-names-x');
  var getOwnPropertySymbols = require('get-own-property-symbols-x');
  var concat = Array.prototype.concat;

  reflectOwnKeys = function ownKeys(target) {
    assertIsObject(target);
    return concat.call(getOwnPropertyNames(target), getOwnPropertySymbols(target));
  };
}

/**
 * This method returns an array of the target object's own property keys.
 * Its return value is equivalent to
 * Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target)).
 *
 * @param {*} target - The target object from which to get the own keys.
 * @throws {TypeError} If target is not an Object.
 * @returns {Object} An Array of the target object's own property keys.
 * @example
 * var reflectOwnKeys = require('reflect-own-keys-x');
 * reflectOwnKeys({ a: 1, b: 2 }); // ['a', 'b']
 */
module.exports = reflectOwnKeys;

},{"assert-is-object-x":31,"get-own-property-names-x":66,"get-own-property-symbols-x":67,"has-reflect-support-x":71}],328:[function(require,module,exports){
/**
 * @file Replace the comments in a string.
 * @version 2.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module replace-comments-x
 */

'use strict';

var toStr = require('to-string-x');
var requireCoercibleToString = require('require-coercible-to-string-x');
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var replace = ''.replace;

/**
 * This method replaces comments in a string.
 *
 * @param {string} string - The string to be stripped.
 * @param {string} [replacement] - The string to be used as a replacement.
 * @throws {TypeError} If string is null or undefined or not coercible.
 * @throws {TypeError} If replacement is not coercible.
 * @returns {string} The new string with the comments replaced.
 * @example
 * var replaceComments = require('replace-comments-x');
 *
 * replaceComments(test;/* test * /, ''), // 'test;'
 * replaceComments(test; // test, ''), // 'test;'
 */
module.exports = function replaceComments(string) {
  return replace.call(requireCoercibleToString(string), STRIP_COMMENTS, arguments.length > 1 ? toStr(arguments[1]) : '');
};

},{"require-coercible-to-string-x":329,"to-string-x":349}],329:[function(require,module,exports){
/**
 * @file Requires an argument is corecible then converts using ToString.
 * @version 1.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module require-coercible-to-string-x
 */

'use strict';

var requireObjectCoercible = require('require-object-coercible-x');
var toStr = require('to-string-x');

/**
 * This method requires an argument is corecible then converts using ToString.
 *
 * @param {*} value - The value to converted to a string.
 * @throws {TypeError} If value is null or undefined.
 * @returns {string} The value as a string.
 * @example
 * var requireCoercibleToString = require('require-coercible-to-string-x');
 *
 * requireCoercibleToString(); // TypeError
 * requireCoercibleToString(null); // TypeError
 * requireCoercibleToString(Symbol('')); // TypeError
 * requireCoercibleToString(Object.create(null)); // TypeError
 * requireCoercibleToString(1); // '1'
 * requireCoercibleToString(true); // 'true'
 */
module.exports = function requireCoercibleToString(value) {
  return toStr(requireObjectCoercible(value));
};

},{"require-object-coercible-x":330,"to-string-x":349}],330:[function(require,module,exports){
/**
 * @file ES6-compliant shim for RequireObjectCoercible.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-requireobjectcoercible|7.2.1 RequireObjectCoercible ( argument )}
 * @version 1.4.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module require-object-coercible-x
 */

'use strict';

var isNil = require('is-nil-x');

/**
 * The abstract operation RequireObjectCoercible throws an error if argument
 * is a value that cannot be converted to an Object using ToObject.
 *
 * @param {*} value - The `value` to check.
 * @throws {TypeError} If `value` is a `null` or `undefined`.
 * @returns {string} The `value`.
 * @example
 * var RequireObjectCoercible = require('require-object-coercible-x');
 *
 * RequireObjectCoercible(); // TypeError
 * RequireObjectCoercible(null); // TypeError
 * RequireObjectCoercible('abc'); // 'abc'
 * RequireObjectCoercible(true); // true
 * RequireObjectCoercible(Symbol('foo')); // Symbol('foo')
 */
module.exports = function RequireObjectCoercible(value) {
  if (isNil(value)) {
    throw new TypeError('Cannot call method on ' + value);
  }

  return value;
};

},{"is-nil-x":122}],331:[function(require,module,exports){
/**
 * @file Like ES6 ToString but handles Symbols too.
 * @see {@link https://github.com/Xotic750/to-string-x|to-string-x}
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module safe-to-string-x
 */

'use strict';

var isSymbol = require('is-symbol');
var pToString = require('has-symbol-support-x') && Symbol.prototype.toString;

/**
 * The abstract operation `safeToString` converts a `Symbol` literal or
 * object to `Symbol()` instead of throwing a `TypeError`.
 *
 * @param {*} value - The value to convert to a string.
 * @returns {string} The converted value.
 * @example
 * var safeToString = require('safe-to-string-x');
 *
 * safeToString(); // 'undefined'
 * safeToString(null); // 'null'
 * safeToString('abc'); // 'abc'
 * safeToString(true); // 'true'
 * safeToString(Symbol('foo')); // 'Symbol(foo)'
 * safeToString(Symbol.iterator); // 'Symbol(Symbol.iterator)'
 * safeToString(Object(Symbol.iterator)); // 'Symbol(Symbol.iterator)'
 */
module.exports = function safeToString(value) {
  return pToString && isSymbol(value) ? pToString.call(value) : String(value);
};

},{"has-symbol-support-x":72,"is-symbol":136}],332:[function(require,module,exports){
/**
 * @file Determines whether two values are the same value.
 * @version 1.0.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module same-value-x
 */

'use strict';

var numberIsNaN = require('is-nan-x');

/**
 * This method is the comparison abstract operation SameValue(x, y), where x
 * and y are ECMAScript language values, produces true or false.
 *
 * @param {*} value1 - The first value to compare.
 * @param {*} value2 - The second value to compare.
 * @returns {boolean} A Boolean indicating whether or not the two arguments are
 *  the same value.
 * @example
 * var sameValue = require('same-value-x');
 *
 * sameValue(1, 1); // true
 * sameValue(true, true); // true
 * sameValue(NaN, NaN); // true
 * sameValue(true, false); // false
 * sameValue(0, -0); // false
 */
module.exports = function sameValue(value1, value2) {
  if (value1 === 0 && value2 === 0) {
    return 1 / value1 === 1 / value2;
  }

  if (value1 === value2) {
    return true;
  }

  return numberIsNaN(value1) && numberIsNaN(value2);
};

},{"is-nan-x":116}],333:[function(require,module,exports){
/**
 * @file ES6-compliant shim for SameValueZero.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero|7.2.10 SameValueZero(x, y)}
 * @version 1.3.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module same-value-zero-x
 */

'use strict';

var sameValue = require('same-value-x');

/**
 * This method determines whether two values are the same value.
 * SameValueZero differs from SameValue (`Object.is`) only in its treatment
 * of +0 and -0.
 *
 * @param {*} x - The first value to compare.
 * @param {*} y - The second value to compare.
 * @returns {boolean} A Boolean indicating whether or not the two arguments
 * are the same value.
 * @example
 * var sameValueZero = require('same-value-zero-x');
 * sameValueZero(0, 0); // true
 * sameValueZero(-0, -0); // true
 * sameValueZero(0, -0); // true
 * sameValueZero(NaN, NaN); //true
 * sameValueZero(Infinity, Infinity); // true
 * sameValueZero(-Infinity, -Infinity); // true
 */
module.exports = function sameValueZero(x, y) {
  return x === y || sameValue(x, y);
};

},{"same-value-x":332}],334:[function(require,module,exports){
/**
 * @file Tests if a value is a string with the boxed bug; splits to an array.
 * @version 1.1.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module split-if-boxed-bug-x
 */

'use strict';

var strSplit;
var isString;
if (require('has-boxed-string-x') === false) {
  strSplit = ''.split;
  isString = typeof strSplit === 'function' && require('is-string');
}

/**
 * This method tests if a value is a string with the boxed bug; splits to an
 * array for iteration; otherwise returns the original value.
 *
 * @param {*} value - The value to be tested.
 * @returns {*} An array or characters if value was a string with the boxed bug;
 *  otherwise the value.
 * @example
 * var splitIfBoxedBug = require('split-if-boxed-bug-x');
 *
 * // No boxed bug
 * splitIfBoxedBug('abc'); // 'abc'
 *
 * // Boxed bug
 * splitIfBoxedBug('abc'); // ['a', 'b', 'c']
 */
module.exports = function splitIfBoxedBug(value) {
  return isString && isString(value) ? strSplit.call(value, '') : value;
};


},{"has-boxed-string-x":69,"is-string":134}],335:[function(require,module,exports){
/**
 * @file Pads a string with another string (repeated, if needed).
 * @version 1.2.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module string-pad-start-x
 */

'use strict';

var requireObjectCoercible = require('require-object-coercible-x');
var toStr = require('to-string-x');
var toLength = require('to-length-x').toLength2018;
var isUndefined = require('validate.io-undefined');
var strSlice = String.prototype.slice;

/**
 * This method pads the current string with another string (repeated, if needed)
 * so that the resulting string reaches the given length. The padding is applied
 * from the start (left) of the current string.
 *
 * @param {string} string - The string to pad.
 * @throws {TypeError} If target is null or undefined.
 * @param {number} targetLength - The length of the resulting string once the
 *  current string has been padded. If the value is lower than the current
 *  string's length, the current string will be returned as is.
 * @param {string} [padString] - The string to pad the current string with. If
 *  this string is too long to stay within the target length, it will be
 *  truncated and the left-most part will be applied. The default value for this
 *  parameter is " " (U+0020).
 * @returns {string} A String of the specified length with the pad string
 *  applied from the start.
 * @example
 * var padStart = require('string-pad-start-x');
 *
 * padStart('a', 3, 'b'); // 'bba'
 * padStart('a', 3); // '  a'
 * padStart('a', 2, 'bc'); // 'ba'
 */
module.exports = function padStart(string, targetLength) {
  var str = toStr(requireObjectCoercible(string));
  var stringLength = toLength(str.length);
  var fillString;
  if (arguments.length > 2) {
    fillString = arguments[2];
  }

  var filler = isUndefined(fillString) ? '' : toStr(fillString);
  if (filler === '') {
    filler = ' ';
  }

  var intMaxLength = toLength(targetLength);
  if (intMaxLength <= stringLength) {
    return str;
  }

  var fillLen = intMaxLength - stringLength;
  while (filler.length < fillLen) {
    var fLen = filler.length;
    var remainingCodeUnits = fillLen - fLen;
    filler += fLen > remainingCodeUnits ? strSlice.call(filler, 0, remainingCodeUnits) : filler;
  }

  var truncatedStringFiller = filler.length > fillLen ? strSlice.call(filler, 0, fillLen) : filler;

  return truncatedStringFiller + str;
};

},{"require-object-coercible-x":330,"to-length-x":339,"to-string-x":349,"validate.io-undefined":356}],336:[function(require,module,exports){
/**
 * @file Converts argument to a value of type Boolean.
 * @version 1.0.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-boolean-x
 */

'use strict';

/**
 * The abstract operation ToBoolean converts argument to a value of type Boolean.
 *
 * @param {*} value - The value to be converted.
 * @returns {boolean} 'true' if value is truthy; otherwise 'false'.
 * @example
 * var toBoolean = require('to-boolean-x');
 *
 * toBoolean(null); // false
 * toBoolean(''); // false
 * toBoolean(1); // true
 * toBoolean('0'); // true
 */
module.exports = function toBoolean(value) {
  return !!value;
};

},{}],337:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"dup":82,"is-finite-x":109,"is-nan-x":116,"math-sign-x":299,"to-number-x":340}],338:[function(require,module,exports){
/**
 * @file Cross-browser toISOString support.
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-iso-string-x
 */

'use strict';

var nativeToISOString = typeof Date.prototype.toISOString === 'function' && Date.prototype.toISOString;

var isWorking;
if (nativeToISOString) {
  var attempt = require('attempt-x');
  var res = attempt.call(new Date(0), nativeToISOString);
  isWorking = res.threw === false && res.value === '1970-01-01T00:00:00.000Z';
  if (isWorking) {
    res = attempt.call(new Date(-62198755200000), nativeToISOString);
    isWorking = res.threw === false && res.value.indexOf('-000001') > -1;
  }

  if (isWorking) {
    res = attempt.call(new Date(-1), nativeToISOString);
    isWorking = res.threw === false && res.value === '1969-12-31T23:59:59.999Z';
  }
}

var $toISOString;
if (isWorking) {
  $toISOString = function toISOString(date) {
    return nativeToISOString.call(date);
  };
} else {
  var isDate = require('is-date-object');
  var padStart = require('string-pad-start-x');
  var map = require('array-map-x');
  var arraySlice = require('array-slice-x');
  var join = Array.prototype.join;

  $toISOString = function toISOString(date) {
    if (isDate(date) === false) {
      throw new TypeError('toISOString called on incompatible receiver.');
    }

    if (isFinite(date) === false || isFinite(date.getTime()) === false) {
      // Adope Photoshop requires the second check.
      throw new RangeError('toISOString called on non-finite value.');
    }

    var year = date.getUTCFullYear();
    var month = date.getUTCMonth();
    // see https://github.com/es-shims/es5-shim/issues/111
    year += (month / 12) >> 0; // floor
    month = ((month % 12) + 12) % 12;

    // the date time string format is specified in 15.9.1.15.
    var parts = [
      month + 1,
      date.getUTCDate(),
      date.getUTCHours(),
      date.getUTCMinutes(),
      date.getUTCSeconds()
    ];

    var sign;
    if (year < 0) {
      sign = '-';
    } else if (year > 9999) {
      sign = '+';
    } else {
      sign = '';
    }

    year = sign + padStart(Math.abs(year), sign ? 6 : 4, '0');
    var result = map(parts, function _mapper(item) {
      // pad months, days, hours, minutes, and seconds to have two digits.
      return padStart(item, 2, '0');
    });

    var dateStr = year + '-' + join.call(arraySlice(result, 0, 2), '-');
    // pad milliseconds to have three digits.
    var msStr = padStart(date.getUTCMilliseconds(date), 3, '0');
    var timeStr = join.call(arraySlice(result, 2), ':') + '.' + msStr;

    return dateStr + 'T' + timeStr + 'Z';
  };
}

/**
 * This method returns a string in simplified extended ISO format (ISO 8601),
 * which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or
 * ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC
 * offset, as denoted by the suffix "Z".
 *
 * @param {Object} date A Date object.
 * @throws {TypeError} If date is not a Date object.
 * @throws {RangeError} If date is invalid.
 * @return {string} Given date in the ISO 8601 format according to universal time.

 * @example
 * var toISOString = require('to-iso-string-x');
 * toISOString(new Date(0)); // '1970-01-01T00:00:00.000Z'
 */
module.exports = $toISOString;

},{"array-map-x":15,"array-slice-x":24,"attempt-x":32,"is-date-object":106,"string-pad-start-x":335}],339:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"dup":83,"max-safe-integer":300,"to-integer-x":337}],340:[function(require,module,exports){
arguments[4][84][0].apply(exports,arguments)
},{"cached-constructors-x":35,"dup":84,"nan-x":307,"parse-int-x":324,"to-primitive-x":345,"trim-x":342}],341:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"cached-constructors-x":35,"dup":92,"require-coercible-to-string-x":329,"white-space-x":343}],342:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"dup":85,"trim-left-x":350,"trim-right-x":341}],343:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"dup":93}],344:[function(require,module,exports){
/**
 * @file ES6-compliant shim for ToObject.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-toobject|7.1.13 ToObject ( argument )}
 * @version 1.5.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-object-x
 */

'use strict';

var requireObjectCoercible = require('require-object-coercible-x');
var castObject = require('cached-constructors-x').Object;

/**
 * The abstract operation ToObject converts argument to a value of
 * type Object.
 *
 * @param {*} value - The `value` to convert.
 * @throws {TypeError} If `value` is a `null` or `undefined`.
 * @returns {!Object} The `value` converted to an object.
 * @example
 * var ToObject = require('to-object-x');
 *
 * ToObject(); // TypeError
 * ToObject(null); // TypeError
 * ToObject('abc'); // Object('abc')
 * ToObject(true); // Object(true)
 * ToObject(Symbol('foo')); // Object(Symbol('foo'))
 */
module.exports = function toObject(value) {
  return castObject(requireObjectCoercible(value));
};

},{"cached-constructors-x":35,"require-object-coercible-x":330}],345:[function(require,module,exports){
/**
 * @file Converts a JavaScript object to a primitive value.
 * @version 1.1.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-primitive-x
 */

'use strict';

var hasSymbols = require('has-symbol-support-x');
var isPrimitive = require('is-primitive');
var isDate = require('is-date-object');
var isSymbol = require('is-symbol');
var isFunction = require('is-function-x');
var requireObjectCoercible = require('require-object-coercible-x');
var isNil = require('is-nil-x');
var isUndefined = require('validate.io-undefined');
var symToPrimitive = hasSymbols && Symbol.toPrimitive;
var symValueOf = hasSymbols && Symbol.prototype.valueOf;

var toStringOrder = ['toString', 'valueOf'];
var toNumberOrder = ['valueOf', 'toString'];
var orderLength = 2;

var ordinaryToPrimitive = function _ordinaryToPrimitive(O, hint) {
  requireObjectCoercible(O);
  if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
    throw new TypeError('hint must be "string" or "number"');
  }

  var methodNames = hint === 'string' ? toStringOrder : toNumberOrder;
  var method;
  var result;
  for (var i = 0; i < orderLength; i += 1) {
    method = O[methodNames[i]];
    if (isFunction(method)) {
      result = method.call(O);
      if (isPrimitive(result)) {
        return result;
      }
    }
  }

  throw new TypeError('No default value');
};

var getMethod = function _getMethod(O, P) {
  var func = O[P];
  if (isNil(func) === false) {
    if (isFunction(func) === false) {
      throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
    }

    return func;
  }

  return void 0;
};

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive

/**
 * This method converts a JavaScript object to a primitive value.
 * Note: When toPrimitive is called with no hint, then it generally behaves as
 * if the hint were Number. However, objects may over-ride this behaviour by
 * defining a @@toPrimitive method. Of the objects defined in this specification
 * only Date objects (see 20.3.4.45) and Symbol objects (see 19.4.3.4) over-ride
 * the default ToPrimitive behaviour. Date objects treat no hint as if the hint
 * were String.
 *
 * @param {*} input - The input to convert.
 * @param {constructor} [prefferedtype] - The preffered type (String or Number).
 * @throws {TypeError} If unable to convert input to a primitive.
 * @returns {string|number} The converted input as a primitive.
 * @example
 * var toPrimitive = require('to-primitive-x');
 *
 * var date = new Date(0);
 * toPrimitive(date)); // Thu Jan 01 1970 01:00:00 GMT+0100 (CET)
 * toPrimitive(date, String)); // Thu Jan 01 1970 01:00:00 GMT+0100 (CET)
 * toPrimitive(date, Number)); // 0
 */
module.exports = function toPrimitive(input, preferredType) {
  if (isPrimitive(input)) {
    return input;
  }

  var hint = 'default';
  if (arguments.length > 1) {
    if (preferredType === String) {
      hint = 'string';
    } else if (preferredType === Number) {
      hint = 'number';
    }
  }

  var exoticToPrim;
  if (hasSymbols) {
    if (symToPrimitive) {
      exoticToPrim = getMethod(input, symToPrimitive);
    } else if (isSymbol(input)) {
      exoticToPrim = symValueOf;
    }
  }

  if (isUndefined(exoticToPrim) === false) {
    var result = exoticToPrim.call(input, hint);
    if (isPrimitive(result)) {
      return result;
    }

    throw new TypeError('unable to convert exotic object to primitive');
  }

  if (hint === 'default' && (isDate(input) || isSymbol(input))) {
    hint = 'string';
  }

  return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};

},{"has-symbol-support-x":72,"is-date-object":106,"is-function-x":110,"is-nil-x":122,"is-primitive":126,"is-symbol":136,"require-object-coercible-x":330,"validate.io-undefined":356}],346:[function(require,module,exports){
/**
 * @file Converts argument to a value that can be used as a property key.
 * @version 2.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-property-key-x
 */

'use strict';

var hasSymbols = require('has-symbol-support-x');
var toPrimitive = require('to-primitive-x');
var toStr = require('to-string-x');

/**
 * This method Converts argument to a value that can be used as a property key.
 *
 * @param {*} argument - The argument to onvert to a property key.
 * @throws {TypeError} If argument is not a symbol and is not coercible to a string.
 * @returns {string|symbol} The converted argument.
 * @example
 * var toPropertyKey = require('to-property-key-x');
 *
 * toPropertyKey(); // 'undefined'
 * toPropertyKey(1); // '1'
 * toPropertyKey(true); // 'true'
 *
 * var symbol = Symbol('a');
 * toPropertyKey(symbol); // symbol
 *
 * toPropertyKey(Object.create(null)); // TypeError
 */
module.exports = function toPropertyKey(argument) {
  var key = toPrimitive(argument, String);
  return hasSymbols && typeof key === 'symbol' ? key : toStr(key);
};

},{"has-symbol-support-x":72,"to-primitive-x":345,"to-string-x":349}],347:[function(require,module,exports){
/**
 * @file ES6 abstract ToString with Symbol conversion support.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tostring|7.1.12 ToString ( argument )}
 * @version 1.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-string-symbols-supported-x
 */

'use strict';

var castString = require('cached-constructors-x').String;
var pToString = require('has-symbol-support-x') && Symbol.prototype.toString;
var isSymbol = typeof pToString === 'function' && require('is-symbol');

/**
 * The abstract operation ToString converts argument to a value of type String,
 * however the specification states that if the argument is a Symbol then a
 * 'TypeError' is thrown. This version also allows Symbols be converted to
 * a string. Other uncoercible exotics will still throw though.
 *
 * @param {*} value - The value to convert to a string.
 * @returns {string} The converted value.
 * @example
 * var toStringSymbolsSupported = require('to-string-symbols-supported-x');
 *
 * toStringSymbolsSupported(); // 'undefined'
 * toStringSymbolsSupported(null); // 'null'
 * toStringSymbolsSupported('abc'); // 'abc'
 * toStringSymbolsSupported(true); // 'true'
 * toStringSymbolsSupported(Symbol('foo')); // 'Symbol('foo')'
 * toStringSymbolsSupported(Object(Symbol('foo'))); // 'Symbol('foo')'
 * toStringSymbolsSupported(Object.create(null)); // TypeError
 */
module.exports = function toStringSymbolsSupported(value) {
  return isSymbol && isSymbol(value) ? pToString.call(value) : castString(value);
};

},{"cached-constructors-x":35,"has-symbol-support-x":72,"is-symbol":136}],348:[function(require,module,exports){
/**
 * @file Get an object's ES6 @@toStringTag.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring|19.1.3.6 Object.prototype.toString ( )}
 * @version 1.4.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-string-tag-x
 */

'use strict';

var isNull = require('lodash.isnull');
var isUndefined = require('validate.io-undefined');
var toStr = {}.toString;

/**
 * The `toStringTag` method returns "[object type]", where type is the
 * object type.
 *
 * @param {*} value - The object of which to get the object type string.
 * @returns {string} The object type string.
 * @example
 * var toStringTag = require('to-string-tag-x');
 *
 * var o = new Object();
 * toStringTag(o); // returns '[object Object]'
 */
module.exports = function toStringTag(value) {
  if (isNull(value)) {
    return '[object Null]';
  }

  if (isUndefined(value)) {
    return '[object Undefined]';
  }

  return toStr.call(value);
};

},{"lodash.isnull":139,"validate.io-undefined":356}],349:[function(require,module,exports){
/**
 * @file ES6-compliant shim for ToString.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tostring|7.1.12 ToString ( argument )}
 * @version 1.4.5
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-string-x
 */

'use strict';

var castString = require('cached-constructors-x').String;
var isSymbol = require('is-symbol');

/**
 * The abstract operation ToString converts argument to a value of type String.
 *
 * @param {*} value - The value to convert to a string.
 * @throws {TypeError} If `value` is a Symbol.
 * @returns {string} The converted value.
 * @example
 * var $toString = require('to-string-x');
 *
 * $toString(); // 'undefined'
 * $toString(null); // 'null'
 * $toString('abc'); // 'abc'
 * $toString(true); // 'true'
 * $toString(Symbol('foo')); // TypeError
 * $toString(Symbol.iterator); // TypeError
 * $toString(Object(Symbol.iterator)); // TypeError
 * $toString(Object.create(null)); // TypeError
 */
module.exports = function ToString(value) {
  if (isSymbol(value)) {
    throw new TypeError('Cannot convert a Symbol value to a string');
  }

  return castString(value);
};

},{"cached-constructors-x":35,"is-symbol":136}],350:[function(require,module,exports){
/**
 * @file This method removes whitespace from the left end of a string.
 * @version 3.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module trim-left-x
 */

'use strict';

var requireCoercibleToString = require('require-coercible-to-string-x');
var Rx = require('cached-constructors-x').RegExp;
var reLeft2016 = new Rx('^[' + require('white-space-x').string2016 + ']+');
var reLeft2018 = new Rx('^[' + require('white-space-x').string2018 + ']+');
var replace = ''.replace;

var $trimLeft2016 = function trimLeft2016(string) {
  return replace.call(requireCoercibleToString(string), reLeft2016, '');
};

var $trimLeft2018 = function trimLeft2018(string) {
  return replace.call(requireCoercibleToString(string), reLeft2018, '');
};

module.exports = {
  /**
   * A reference to leftTrim2018.
   */
  trimLeft: $trimLeft2018,

  /**
   * This method removes whitespace from the left end of a string. (ES2016)
   *
   * @param {string} string - The string to trim the left end whitespace from.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The left trimmed string.
   * @example
   * var trimLeft = require('trim-left-x').trimLeft2016;
   *
   * trimLeft(' \t\na \t\n') === 'a \t\n'; // true
   */
  trimLeft2016: $trimLeft2016,

  /**
   * This method removes whitespace from the left end of a string. (ES2018)
   *
   * @param {string} string - The string to trim the left end whitespace from.
   * @throws {TypeError} If string is null or undefined or not coercible.
   * @returns {string} The left trimmed string.
   * @example
   * var trimLeft = require('trim-left-x').trimLeft2018;
   *
   * trimLeft(' \t\na \t\n') === 'a \t\n'; // true
   */
  trimLeft2018: $trimLeft2018
};

},{"cached-constructors-x":35,"require-coercible-to-string-x":329,"white-space-x":351}],351:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"dup":93}],352:[function(require,module,exports){
/**
 * @file This method removes whitespace from the right end of a string.
 * @version 2.0.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module trim-right-x
 */

'use strict';

var requireCoercibleToString = require('require-coercible-to-string-x');
var Rx = require('cached-constructors-x').RegExp;
var reRight = new Rx('[' + require('white-space-x').string + ']+$');
var replace = ''.replace;

/**
 * This method removes whitespace from the right end of a string.
 *
 * @param {string} string - The string to trim the right end whitespace from.
 * @throws {TypeError} If string is null or undefined or not coercible.
 * @returns {string} The right trimmed string.
 * @example
 * var trimRight = require('trim-right-x');
 *
 * trimRight(' \t\na \t\n') === ' \t\na'; // true
 */
module.exports = function trimRight(string) {
  return replace.call(requireCoercibleToString(string), reRight, '');
};

},{"cached-constructors-x":35,"require-coercible-to-string-x":329,"white-space-x":357}],353:[function(require,module,exports){
/**
 * @file This method removes whitespace from the left and right end of a string.
 * @version 2.0.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module trim-x
 */

'use strict';

var trimLeft = require('trim-left-x');
var trimRight = require('trim-right-x');

/**
 * This method removes whitespace from the left and right end of a string.
 *
 * @param {string} string - The string to trim the whitespace from.
 * @throws {TypeError} If string is null or undefined or not coercible.
 * @returns {string} The trimmed string.
 * @example
 * var trim = require('trim-x');
 *
 * trim(' \t\na \t\n') === 'a'; // true
 */
module.exports = function trim(string) {
  return trimLeft(trimRight(string));
};

},{"trim-left-x":354,"trim-right-x":352}],354:[function(require,module,exports){
/**
 * @file This method removes whitespace from the left end of a string.
 * @version 2.0.1
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module trim-left-x
 */

'use strict';

var requireCoercibleToString = require('require-coercible-to-string-x');
var Rx = require('cached-constructors-x').RegExp;
var reLeft = new Rx('^[' + require('white-space-x').string + ']+');
var replace = ''.replace;

/**
 * This method removes whitespace from the left end of a string.
 *
 * @param {string} string - The string to trim the left end whitespace from.
 * @throws {TypeError} If string is null or undefined or not coercible.
 * @returns {string} The left trimmed string.
 * @example
 * var trimLeft = require('trim-left-x');
 *
 * trimLeft(' \t\na \t\n') === 'a \t\n'; // true
 */
module.exports = function trimLeft(string) {
  return replace.call(requireCoercibleToString(string), reLeft, '');
};

},{"cached-constructors-x":35,"require-coercible-to-string-x":329,"white-space-x":357}],355:[function(require,module,exports){
/**
 * @file An implementation of node's util.format
 * @version 1.3.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module util-format-x
 */

'use strict';

var inspect = require('inspect-x');
var JSON3 = require('json3');
var safeToString = require('safe-to-string-x');
var isNull = require('lodash.isnull');

var CIRCULAR_ERROR_MESSAGE;
var tryStringify = function _tryStringify(arg) {
  try {
    return JSON3.stringify(arg);
  } catch (err) {
    // Populate the circular error message lazily
    if (!CIRCULAR_ERROR_MESSAGE) {
      try {
        var a = {};
        a.a = a;
        JSON3.stringify(a);
      } catch (e) {
        CIRCULAR_ERROR_MESSAGE = e.message;
      }
    }

    if (err.name === 'TypeError' && err.message === CIRCULAR_ERROR_MESSAGE) {
      return '[Circular]';
    }

    throw err;
  }
};

// eslint-disable-next-line complexity
var format = function _format(f) {
  if (typeof f !== 'string') {
    var objects = new Array(arguments.length);
    for (var index = 0; index < arguments.length; index += 1) {
      objects[index] = inspect(arguments[index]);
    }

    return objects.join(' ');
  }

  if (arguments.length === 1) {
    return f;
  }

  var str = '';
  var a = 1;
  var lastPos = 0;
  for (var i = 0; i < f.length;) {
    if (f.charCodeAt(i) === 37/* '%'*/ && i + 1 < f.length) {
      if (f.charCodeAt(i + 1) !== 37/* '%'*/ && a >= arguments.length) {
        i += 1;
        // eslint-disable-next-line no-continue
        continue; // eslint-disable-line no-restricted-syntax
      }

      switch (f.charCodeAt(i + 1)) {
      case 100: // 'd'
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += Number(arguments[a]);
        a += 1;
        // eslint-disable-next-line no-restricted-syntax
        break;
      case 105: // 'i'
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += parseInt(arguments[a], 10);
        a += 1;
        // eslint-disable-next-line no-restricted-syntax
        break;
      case 102: // 'f'
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += parseFloat(arguments[a]);
        a += 1;
        // eslint-disable-next-line no-restricted-syntax
        break;
      case 106: // 'j'
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += tryStringify(arguments[a]);
        a += 1;
        // eslint-disable-next-line no-restricted-syntax
        break;
      case 115: // 's'
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += safeToString(arguments[a]);
        a += 1;
        // eslint-disable-next-line no-restricted-syntax
        break;
      case 37: // '%'
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += '%';
        // eslint-disable-next-line no-restricted-syntax
        break;
      default: // any other character is not a correct placeholder
        if (lastPos < i) {
          str += f.slice(lastPos, i);
        }

        str += '%';
        i += 1;
        lastPos = i;
        // eslint-disable-next-line no-continue
        continue; // eslint-disable-line no-restricted-syntax
      }

      i += 2;
      lastPos = i;
      // eslint-disable-next-line no-continue
      continue; // eslint-disable-line no-restricted-syntax
    }

    i += 1;
  }

  if (lastPos === 0) {
    str = f;
  } else if (lastPos < f.length) {
    str += f.slice(lastPos);
  }

  while (a < arguments.length) {
    var x = arguments[a];
    a += 1;

    if (isNull(x) || (typeof x !== 'object' && typeof x !== 'symbol')) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
};

/**
 * The format() method returns a formatted string using the first argument as a
 * printf-like format.
 *
 * The first argument is a string containing zero or more placeholder tokens.
 * Each placeholder token is replaced with the converted value from the
 * corresponding argument. Supported placeholders are:
 *
 * %s - String.
 * %d - Number (integer or floating point value).
 * %i - Integer.
 * %f - Floating point value.
 * %j - JSON. Replaced with the string '[Circular]' if the argument contains circular references.
 * %% - single percent sign ('%'). This does not consume an argument.
 *
 * @param {string} f - Template.
 * @param {*} [...args] - Values.
 * @returns {*} The target.
 * @example
 * var format = require('util-format-x');
 *
 * // If the placeholder does not have a corresponding argument,
 * // the placeholder is not replaced.
 * format('%s:%s', 'foo'); // Returns: 'foo:%s'
 *
 * // If there are more arguments passed to the format() method than the number
 * // of placeholders, the extra arguments are coerced into strings (for objects
 * // and symbols, inspect() is used) then concatenated to the returned
 * // string, each delimited by a space.
 * format('%s:%s', 'foo', 'bar', 'baz'); // 'foo:bar baz'
 *
 * // If the first argument is not a format string then format() returns a
 * // string that is the concatenation of all arguments separated by spaces.
 * // Each argument is converted to a string using inspect().
 * format(1, 2, 3); // '1 2 3'
 *
 * // If only one argument is passed to format(), it is returned as it is
 * //without any formatting.
 * format('%% %s'); // '%% %s'
 */
module.exports = format;

},{"inspect-x":95,"json3":138,"lodash.isnull":139,"safe-to-string-x":331}],356:[function(require,module,exports){
/**
*
*	VALIDATE: undefined
*
*
*	DESCRIPTION:
*		- Validates if a value is undefined.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

'use strict';

/**
* FUNCTION: isUndefined( value )
*	Validates if a value is undefined.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is undefined
*/
function isUndefined( value ) {
	return value === void 0;
} // end FUNCTION isUndefined()


// EXPORTS //

module.exports = isUndefined;

},{}],357:[function(require,module,exports){
/**
 * @file List of ECMAScript5 white space characters.
 * @version 2.0.3
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module white-space-x
 */

'use strict';

/**
 * An array of the ES5 whitespace char codes, string, and their descriptions.
 *
 * @name list
 * @type Array.<Object>
 * @example
 * var whiteSpace = require('white-space-x');
 * whiteSpaces.list.foreach(function (item) {
 *   console.log(lib.description, item.code, item.string);
 * });
 */
var list = [
  {
    code: 0x0009,
    description: 'Tab',
    string: '\u0009'
  },
  {
    code: 0x000a,
    description: 'Line Feed',
    string: '\u000a'
  },
  {
    code: 0x000b,
    description: 'Vertical Tab',
    string: '\u000b'
  },
  {
    code: 0x000c,
    description: 'Form Feed',
    string: '\u000c'
  },
  {
    code: 0x000d,
    description: 'Carriage Return',
    string: '\u000d'
  },
  {
    code: 0x0020,
    description: 'Space',
    string: '\u0020'
  },
  /*
  {
    code: 0x0085,
    description: 'Next line - Not ES5 whitespace',
    string: '\u0085'
  }
  */
  {
    code: 0x00a0,
    description: 'No-break space',
    string: '\u00a0'
  },
  {
    code: 0x1680,
    description: 'Ogham space mark',
    string: '\u1680'
  },
  {
    code: 0x180e,
    description: 'Mongolian vowel separator',
    string: '\u180e'
  },
  {
    code: 0x2000,
    description: 'En quad',
    string: '\u2000'
  },
  {
    code: 0x2001,
    description: 'Em quad',
    string: '\u2001'
  },
  {
    code: 0x2002,
    description: 'En space',
    string: '\u2002'
  },
  {
    code: 0x2003,
    description: 'Em space',
    string: '\u2003'
  },
  {
    code: 0x2004,
    description: 'Three-per-em space',
    string: '\u2004'
  },
  {
    code: 0x2005,
    description: 'Four-per-em space',
    string: '\u2005'
  },
  {
    code: 0x2006,
    description: 'Six-per-em space',
    string: '\u2006'
  },
  {
    code: 0x2007,
    description: 'Figure space',
    string: '\u2007'
  },
  {
    code: 0x2008,
    description: 'Punctuation space',
    string: '\u2008'
  },
  {
    code: 0x2009,
    description: 'Thin space',
    string: '\u2009'
  },
  {
    code: 0x200a,
    description: 'Hair space',
    string: '\u200a'
  },
  /*
  {
    code: 0x200b,
    description: 'Zero width space - Not ES5 whitespace',
    string: '\u200b'
  },
  */
  {
    code: 0x2028,
    description: 'Line separator',
    string: '\u2028'
  },
  {
    code: 0x2029,
    description: 'Paragraph separator',
    string: '\u2029'
  },
  {
    code: 0x202f,
    description: 'Narrow no-break space',
    string: '\u202f'
  },
  {
    code: 0x205f,
    description: 'Medium mathematical space',
    string: '\u205f'
  },
  {
    code: 0x3000,
    description: 'Ideographic space',
    string: '\u3000'
  },
  {
    code: 0xfeff,
    description: 'Byte Order Mark',
    string: '\ufeff'
  }
];

var string = '';
var length = list.length;
for (var i = 0; i < length; i += 1) {
  string += list[i].string;
}

/**
 * A string of the ES5 whitespace characters.
 *
 * @name string
 * @type string
 * @example
 * var whiteSpace = require('white-space-x');
 * var characters = [
 *   '\u0009',
 *   '\u000a',
 *   '\u000b',
 *   '\u000c',
 *   '\u000d',
 *   '\u0020',
 *   '\u00a0',
 *   '\u1680',
 *   '\u180e',
 *   '\u2000',
 *   '\u2001',
 *   '\u2002',
 *   '\u2003',
 *   '\u2004',
 *   '\u2005',
 *   '\u2006',
 *   '\u2007',
 *   '\u2008',
 *   '\u2009',
 *   '\u200a',
 *   '\u2028',
 *   '\u2029',
 *   '\u202f',
 *   '\u205f',
 *   '\u3000',
 *   '\ufeff'
 * ];
 * var ws = characters.join('');
 * var re1 = new RegExp('^[' + whiteSpace.string + ']+$)');
 * re1.test(ws); // true
 */
module.exports = {
  list: list,
  string: string
};

},{}],358:[function(require,module,exports){
(function (process){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var format = require('util-format-x');

var superagent = require('@ladjs/superagent');

var cuid = require('cuid');

var parseErr = require('parse-err');

var safeStringify = require('fast-safe-stringify'); // <https://lacke.mn/reduce-your-bundle-js-file-size/>
// <https://github.com/lodash/babel-plugin-lodash/issues/221>


var isError = require('lodash/isError');

var isObject = require('lodash/isObject');

var isString = require('lodash/isString');

var includes = require('lodash/includes');

var omit = require('lodash/omit');

var isEmpty = require('lodash/isEmpty');

var isPlainObject = require('lodash/isPlainObject');

var isUndefined = require('lodash/isUndefined');

var isNull = require('lodash/isNull');

var boolean = require('boolean');

var _require = require('message-headers'),
    standard = _require.standard;

var formatSpecifiers = require('format-specifiers');

var standardHeaders = standard.map(function (o) {
  return o['Header Field Name'].toLowerCase();
});
var hasWindow = typeof window !== 'undefined' && typeof window.document !== 'undefined'; // eslint-disable-next-line import/no-unassigned-import

require('console-polyfill');

var levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];
var endpoint = 'https://api.cabinjs.com';
var env = process.env.NODE_ENV || 'development';

var Axe =
/*#__PURE__*/
function () {
  function Axe() {
    var _this = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Axe);

    this.config = _objectSpread({
      key: '',
      endpoint: endpoint,
      headers: {},
      timeout: 5000,
      retry: 3,
      showStack: boolean(process.env.SHOW_STACK || env !== 'production'),
      showMeta: boolean(process.env.SHOW_META),
      silent: false,
      logger: console,
      levels: ['info', 'warn', 'error', 'fatal'],
      capture: env === 'production'
    }, config);
    Object.assign(this, omit(this.config.logger, ['config', 'log'])); // we could have used `auto-bind` but it's not compiled for browser

    this.log = this.log.bind(this); // bind helper functions for each log level

    levels.forEach(function (level) {
      _this[level] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this.log.apply(_this, _toConsumableArray([level].concat([].slice.call(args))));
      };
    }); // aliases

    this.err = this.error;
    this.warning = this.warn;
  } // eslint-disable-next-line complexity


  _createClass(Axe, [{
    key: "log",
    value: function log(level, message, meta) {
      var _this2 = this;

      var originalArgs = [level, message];
      if (!isUndefined(meta)) originalArgs.push(meta);

      for (var _len2 = arguments.length, args = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        args[_key2 - 3] = arguments[_key2];
      }

      originalArgs = originalArgs.concat([].slice.call(args));
      var config = this.config;
      var modifier = 0;
      if (level === 'warning') level = 'warn';
      if (level === 'err') level = 'error';

      if (isError(level)) {
        meta = message;
        message = level;
        level = 'error';
      } else if (!isString(level) || !includes(levels, level)) {
        meta = message;
        message = level;
        level = 'info';
        modifier = -1;
      } // if there are four or more args
      // then infer to use util.format on everything


      if (originalArgs.length >= 4 + modifier) {
        message = format.apply(void 0, _toConsumableArray(originalArgs.slice(1 + modifier)));
        meta = {};
      } else if (originalArgs.length === 3 + modifier && isString(message) && formatSpecifiers.some(function (t) {
        return includes(message, t);
      })) {
        // otherwise if there are three args and if the `message` contains
        // a placeholder token (e.g. '%s' or '%d' - see above `formatSpecifiers` variable)
        // then we can infer that the `meta` arg passed is used for formatting
        message = format(message, meta);
        meta = {};
      } else if (!isError(message)) {
        if (isError(meta)) {
          meta = {
            err: parseErr(meta)
          };
        } else if (!isPlainObject(meta) && !isUndefined(meta) && !isNull(meta)) {
          // if the `meta` variable passed was not an Object then convert it
          message = format(message, meta);
          meta = {};
        } else if (!isString(message)) {
          // if the message is not a string then we should run `util.format` on it
          // assuming we're formatting it like it was another argument
          // (as opposed to using something like fast-json-stringify)
          message = format(message);
        }
      }

      if (!isPlainObject(meta)) meta = {};
      var err;

      if (isError(message)) {
        err = message;
        if (!isObject(meta.err)) meta.err = parseErr(err);
        var _message = message;
        message = _message.message;
      } // set default level on meta


      meta.level = level; // set the body used for returning with and sending logs
      // (and also remove circular references)

      var body = safeStringify({
        message: message,
        meta: meta
      }); // send to Cabin or other logging service here the `message` and `meta`

      if (config.capture && includes(config.levels, level) && (!isError(err) || !err._captureFailed)) {
        // if the user didn't specify a key
        // and they are using the default endpoint
        // then we should throw an error to them
        if (config.endpoint === endpoint && !config.key) throw new Error("Cabin API key required (e.g. `{ key: 'YOUR-CABIN-API-KEY' })`)\n<https://cabinjs.com>"); // capture the log over HTTP

        var req = superagent.post(config.endpoint).set('X-Request-Id', cuid()).timeout(config.timeout); // basic auth (e.g. Cabin API key)

        if (config.key) req.auth(config.key); // set headers if any

        if (!isEmpty(config.headers)) {
          var headers = config.headers;
          if (hasWindow) headers = Object.keys(config.headers).reduce(function (memo, header) {
            if (!includes(standardHeaders, config.headers[header].toLowerCase())) memo[header] = config.headers[header];
            return memo;
          }, {});
          req.set(headers);
        }

        req.retry(config.retry).send(body).end(function (err) {
          if (err) {
            err._captureFailed = true;

            _this2.config.logger.error(err);
          }
        });
      } // Suppress logs if it was silent


      if (config.silent) return body; // if there was meta information then output it

      var omitted = omit(meta, ['level', 'err']); // fatal should use error (e.g. in browser)

      if (level === 'fatal') level = 'error'; // if we didn't pass a level as a method
      // (e.g. console.info), then we should still
      // use the logger's `log` method to output

      if (modifier === -1) level = 'log'; // show stack trace if necessary (along with any metadata)

      if (level === 'error' && isError(err) && config.showStack) {
        if (!config.showMeta || isEmpty(omitted)) this.config.logger.error(err);else this.config.logger.error(err, omitted);
      } else if (!config.showMeta || isEmpty(omitted)) {
        this.config.logger[level](message);
      } else {
        this.config.logger[level](message, omitted);
      } // return the parsed body in case we need it


      return body;
    }
  }]);

  return Axe;
}();

module.exports = Axe;

}).call(this,require('_process'))

},{"@ladjs/superagent":2,"_process":325,"boolean":34,"console-polyfill":44,"cuid":45,"fast-safe-stringify":52,"format-specifiers":59,"lodash/includes":266,"lodash/isEmpty":271,"lodash/isError":272,"lodash/isNull":276,"lodash/isObject":277,"lodash/isPlainObject":279,"lodash/isString":281,"lodash/isUndefined":284,"lodash/omit":289,"message-headers":303,"parse-err":323,"util-format-x":355}]},{},[358])(358)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
