"use strict";

var Url = require('url-parse');

var cookie = require('cookie');

var safeStringify = require('fast-safe-stringify'); // <https://lacke.mn/reduce-your-bundle-js-file-size/>
// <https://github.com/lodash/babel-plugin-lodash/issues/221>


var pick = require('lodash/pick');

var isString = require('lodash/isString');

var isObject = require('lodash/isObject');

var clone = require('lodash/clone');

var cloneDeep = require('lodash/cloneDeep');

var isUndefined = require('lodash/isUndefined');

var isNull = require('lodash/isNull');

var isFunction = require('lodash/isFunction');

var isEmpty = require('lodash/isEmpty');

var isArray = require('lodash/isArray');

var mapValues = require('lodash/mapValues');

var hasWindow = typeof window !== 'undefined' && typeof window.document !== 'undefined'; // https://stackoverflow.com/a/39087474

function maskPasswords(obj) {
  return mapValues(obj, function (val, key) {
    if (isObject(val)) return maskPasswords(val);
    return key === 'password' && isString(val) ? new Array(val.length + 1).join('*') : val;
  });
} // inspired by raven's parseRequest
// eslint-disable-next-line complexity


var parseRequest = function parseRequest() {
  var originalReq = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var userFields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['id', 'email', 'full_name', 'ip_address'];
  var req = cloneDeep(pick(originalReq, ['method', 'query', 'header', 'headers', 'cookies', 'originalUrl', 'url', 'ip', 'connection']));
  if (Object.prototype.hasOwnProperty.call(req, 'hostname') && originalReq.host) req.host = clone(originalReq.host);
  var headers = req.headers || req.header || {};
  var method = req.method || 'GET'; // inspired from `preserve-qs` package

  var originalUrl = '';

  if (isString(req.originalUrl)) {
    originalUrl = req.originalUrl;
  } else if (isString(req.url)) originalUrl = req.url;else if (hasWindow) originalUrl = window.location.pathname + window.location.search;

  originalUrl = new Url(originalUrl); // parse query, path, and origin to prepare absolute Url

  var query = isObject(req.query) ? req.query : Url.qs.parse(originalUrl.query);
  var path = originalUrl.origin === 'null' ? originalUrl.pathname : "".concat(originalUrl.origin).concat(originalUrl.pathname);
  var qs = Url.qs.stringify(query, true);
  var absoluteUrl = path + qs; // default to the user object

  var user = isObject(originalReq.user) ? isFunction(originalReq.user.toObject) ? originalReq.user.toObject() : clone(originalReq.user) : {};
  var ip = '';

  if (isString(req.ip)) {
    ip = req.ip;
  } else if (isObject(req.connection) && isString(req.connection.remoteAddress)) ip = req.connection.remoteAddress;

  if (ip && !isString(user.ip_address)) user.ip_address = ip;
  if (isArray(userFields) && !isEmpty(userFields)) user = pick(user, userFields);
  var body = '';
  if (!['GET', 'HEAD'].includes(method) && !isUndefined(originalReq.body)) body = isString(originalReq.body) ? clone(originalReq.body) : cloneDeep(originalReq.body); // recursively search through body and filter out passwords from it

  if (isObject(body)) body = maskPasswords(body);
  if (!isUndefined(body) && !isNull(body) && !isString(body)) body = safeStringify(body); // populate user agent and referrer if
  // we're in a browser and they're unset

  if (hasWindow) {
    // set user agent
    if (typeof window.navigator !== 'undefined' && isObject(window.navigator) && isString(window.navigator.userAgent) && (!isString(headers['user-agent']) || !headers['user-agent'])) headers['user-agent'] = window.navigator.userAgent;

    if (typeof window.document !== 'undefined' && isObject(window.document)) {
      // set referrer
      if (isString(window.document.referrer) && (!isString(headers.referer) || !headers.referer) && (!isString(headers.referrer) || !headers.referrer)) headers.referer = window.document.referrer; // set cookie

      if (isString(window.document.cookie) && (!isString(headers.cookie) || !headers.cookie)) headers.cookie = window.document.cookie;
    }
  } // parse the cookies (if any were set)


  var cookies = cookie.parse(headers.cookie || '');
  return {
    request: {
      method: method,
      query: query,
      headers: headers,
      cookies: cookies,
      body: body,
      url: absoluteUrl
    },
    user: user
  };
};

module.exports = parseRequest;